/*
 * This class is auto generated by the schema.org code generator program.
 * https://github.com/Kobee1203/schema-org-java
 * Do not edit the class manually.
 */
package org.schema.model;

import org.schema.model.MonetaryAmount;
import org.schema.model.PriceSpecification;
import org.schema.model.Duration;
import org.schema.model.Order;
import org.schema.model.datatype.Text;
import org.schema.model.datatype.URL;
import org.schema.model.PhysicalActivityCategory;
import org.schema.model.Thing;
import org.schema.model.CategoryCode;
import org.schema.model.datatype.Date;
import org.schema.model.Organization;
import org.schema.model.Person;
import org.schema.model.datatype.DateTime;
import org.schema.model.PaymentStatusType;
import org.schema.model.PaymentMethod;

/**
 * A statement of the money due for goods or services; a bill.
 *
 * @see <a href="https://schema.org/Invoice">https://schema.org/Invoice</a>
 */
public interface Invoice extends Intangible {

    /**
     * The total amount due.
     *
     * @return {@link MonetaryAmount} or {@link PriceSpecification}
     */
    <T> T getTotalPaymentDue();

    /**
     * The total amount due.
     *
     */
    void setTotalPaymentDue(Object fTotalPaymentDue);

    /**
     * The time interval used to compute the invoice.
     *
     * @return {@link Duration}
     */
    Duration getBillingPeriod();

    /**
     * The time interval used to compute the invoice.
     *
     */
    void setBillingPeriod(Duration fBillingPeriod);

    /**
     * The Order(s) related to this Invoice. One or more Orders may be combined into a single Invoice.
     *
     * @return {@link Order}
     */
    Order getReferencesOrder();

    /**
     * The Order(s) related to this Invoice. One or more Orders may be combined into a single Invoice.
     *
     */
    void setReferencesOrder(Order fReferencesOrder);

    /**
     * The identifier for the account the payment will be applied to.
     *
     * @return {@link Text}
     */
    Text getAccountId();

    /**
     * The identifier for the account the payment will be applied to.
     *
     */
    void setAccountId(Text fAccountId);

    /**
     * A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
     *
     * @return {@link URL} or {@link Text} or {@link PhysicalActivityCategory} or {@link Thing} or {@link CategoryCode}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1741">https://github.com/schemaorg/schemaorg/issues/1741</a>
     */
    <T> T getCategory();

    /**
     * A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
     *
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1741">https://github.com/schemaorg/schemaorg/issues/1741</a>
     */
    void setCategory(Object fCategory);

    /**
     * The date the invoice is scheduled to be paid.
     *
     * @return {@link Date}
     */
    Date getScheduledPaymentDate();

    /**
     * The date the invoice is scheduled to be paid.
     *
     */
    void setScheduledPaymentDate(Date fScheduledPaymentDate);

    /**
     * A number that confirms the given order or payment has been received.
     *
     * @return {@link Text}
     */
    Text getConfirmationNumber();

    /**
     * A number that confirms the given order or payment has been received.
     *
     */
    void setConfirmationNumber(Text fConfirmationNumber);

    /**
     * Party placing the order or paying the invoice.
     *
     * @return {@link Organization} or {@link Person}
     */
    <T> T getCustomer();

    /**
     * Party placing the order or paying the invoice.
     *
     */
    void setCustomer(Object fCustomer);

    /**
     * The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
     *
     * @return {@link Organization} or {@link Person}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2927">https://github.com/schemaorg/schemaorg/issues/2927</a>
     */
    <T> T getProvider();

    /**
     * The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2927">https://github.com/schemaorg/schemaorg/issues/2927</a>
     */
    void setProvider(Object fProvider);

    /**
     * The minimum payment required at this time.
     *
     * @return {@link MonetaryAmount} or {@link PriceSpecification}
     */
    <T> T getMinimumPaymentDue();

    /**
     * The minimum payment required at this time.
     *
     */
    void setMinimumPaymentDue(Object fMinimumPaymentDue);

    /**
     * The date that payment is due.
     *
     * @return {@link DateTime} or {@link Date}
     */
    <T> T getPaymentDueDate();

    /**
     * The date that payment is due.
     *
     */
    void setPaymentDueDate(Object fPaymentDueDate);

    /**
     * An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
     *
     * @return {@link Person} or {@link Organization}
     */
    <T> T getBroker();

    /**
     * An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
     *
     */
    void setBroker(Object fBroker);

    /**
     * The status of payment; whether the invoice has been paid or not.
     *
     * @return {@link PaymentStatusType} or {@link Text}
     */
    <T> T getPaymentStatus();

    /**
     * The status of payment; whether the invoice has been paid or not.
     *
     */
    void setPaymentStatus(Object fPaymentStatus);

    /**
     * An identifier for the method of payment used (e.g. the last 4 digits of the credit card).
     *
     * @return {@link Text}
     */
    Text getPaymentMethodId();

    /**
     * An identifier for the method of payment used (e.g. the last 4 digits of the credit card).
     *
     */
    void setPaymentMethodId(Text fPaymentMethodId);

    /**
     * The date that payment is due.
     *
     * @return {@link DateTime}
     */
    DateTime getPaymentDue();

    /**
     * The date that payment is due.
     *
     */
    void setPaymentDue(DateTime fPaymentDue);

    /**
     * The name of the credit card or other method of payment for the order.
     *
     * @return {@link PaymentMethod}
     */
    PaymentMethod getPaymentMethod();

    /**
     * The name of the credit card or other method of payment for the order.
     *
     */
    void setPaymentMethod(PaymentMethod fPaymentMethod);
}
