/*
 * This class is auto generated by the schema.org code generator program.
 * https://github.com/Kobee1203/schema-org-java
 * Do not edit the class manually.
 */
package org.schema.model;

import org.schema.model.Event;
import org.schema.model.EventAttendanceModeEnumeration;
import org.schema.model.Review;
import org.schema.model.Person;
import org.schema.model.Organization;
import org.schema.model.datatype.DateTime;
import org.schema.model.datatype.Date;
import org.schema.model.datatype.Integer;
import org.schema.model.Grant;
import org.schema.model.DefinedTerm;
import org.schema.model.datatype.Text;
import org.schema.model.datatype.URL;
import org.schema.model.Audience;
import org.schema.model.Offer;
import org.schema.model.Demand;
import org.schema.model.EventStatusType;
import org.schema.model.AggregateRating;
import org.schema.model.PostalAddress;
import org.schema.model.Place;
import org.schema.model.VirtualLocation;
import org.schema.model.Duration;
import org.schema.model.datatype.Boolean;
import org.schema.model.CreativeWork;
import org.schema.model.datatype.Time;
import org.schema.model.Language;
import org.schema.model.Thing;
import org.schema.model.Schedule;

/**
 * An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
 *
 * @see <a href="https://schema.org/Event">https://schema.org/Event</a>
 */
public interface Event extends Thing {

    /**
     * An event that this event is a part of. For example, a collection of individual music performances might each have a music festival as their superEvent.
     *
     * @return {@link Event}
     */
    Event getSuperEvent();

    /**
     * An event that this event is a part of. For example, a collection of individual music performances might each have a music festival as their superEvent.
     *
     * @param fSuperEvent Event value to set.
     */
    void setSuperEvent(Event fSuperEvent);

    /**
     * The eventAttendanceMode of an event indicates whether it occurs online, offline, or a mix.
     *
     * @return {@link EventAttendanceModeEnumeration}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1842">https://github.com/schemaorg/schemaorg/issues/1842</a>
     */
    EventAttendanceModeEnumeration getEventAttendanceMode();

    /**
     * The eventAttendanceMode of an event indicates whether it occurs online, offline, or a mix.
     *
     * @param fEventAttendanceMode EventAttendanceModeEnumeration value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1842">https://github.com/schemaorg/schemaorg/issues/1842</a>
     */
    void setEventAttendanceMode(EventAttendanceModeEnumeration fEventAttendanceMode);

    /**
     * A review of the item.
     *
     * @return {@link Review}
     */
    Review getReview();

    /**
     * A review of the item.
     *
     * @param fReview Review value to set.
     */
    void setReview(Review fReview);

    /**
     * Organization or person who adapts a creative work to different languages, regional differences and technical requirements of a target market, or that translates during some event.
     *
     * @return {@link Person} or {@link Organization}
     */
    <T> T getTranslator();

    /**
     * Organization or person who adapts a creative work to different languages, regional differences and technical requirements of a target market, or that translates during some event.
     *
     * @param fTranslator Person value to set.
     */
    void setTranslator(Person fTranslator);
    /**
     * Organization or person who adapts a creative work to different languages, regional differences and technical requirements of a target market, or that translates during some event.
     *
     * @param fTranslator Organization value to set.
     */
    void setTranslator(Organization fTranslator);

    /**
     * The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
     *
     * @return {@link DateTime} or {@link Date}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2486">https://github.com/schemaorg/schemaorg/issues/2486</a>
     */
    <T> T getStartDate();

    /**
     * The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
     *
     * @param fStartDate DateTime value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2486">https://github.com/schemaorg/schemaorg/issues/2486</a>
     */
    void setStartDate(DateTime fStartDate);
    /**
     * The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
     *
     * @param fStartDate java.time.LocalDateTime value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2486">https://github.com/schemaorg/schemaorg/issues/2486</a>
     */
    void setStartDate(java.time.LocalDateTime fStartDate);
    /**
     * The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
     *
     * @param fStartDate Date value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2486">https://github.com/schemaorg/schemaorg/issues/2486</a>
     */
    void setStartDate(Date fStartDate);
    /**
     * The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
     *
     * @param fStartDate java.time.LocalDate value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2486">https://github.com/schemaorg/schemaorg/issues/2486</a>
     */
    void setStartDate(java.time.LocalDate fStartDate);

    /**
     * The person or organization who wrote a composition, or who is the composer of a work performed at some event.
     *
     * @return {@link Organization} or {@link Person}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ</a>
     */
    <T> T getComposer();

    /**
     * The person or organization who wrote a composition, or who is the composer of a work performed at some event.
     *
     * @param fComposer Organization value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ</a>
     */
    void setComposer(Organization fComposer);
    /**
     * The person or organization who wrote a composition, or who is the composer of a work performed at some event.
     *
     * @param fComposer Person value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ</a>
     */
    void setComposer(Person fComposer);

    /**
     * The total number of individuals that may attend an event or venue.
     *
     * @return {@link Integer}
     */
    Integer getMaximumAttendeeCapacity();

    /**
     * The total number of individuals that may attend an event or venue.
     *
     * @param fMaximumAttendeeCapacity Integer value to set.
     */
    void setMaximumAttendeeCapacity(Integer fMaximumAttendeeCapacity);
    /**
     * The total number of individuals that may attend an event or venue.
     *
     * @param fMaximumAttendeeCapacity java.lang.Integer value to set.
     */
    void setMaximumAttendeeCapacity(java.lang.Integer fMaximumAttendeeCapacity);

    /**
     * The maximum physical attendee capacity of an [[Event]] whose [[eventAttendanceMode]] is [[OnlineEventAttendanceMode]] (or the online aspects, in the case of a [[MixedEventAttendanceMode]]). 
     *
     * @return {@link Integer}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1842">https://github.com/schemaorg/schemaorg/issues/1842</a>
     */
    Integer getMaximumVirtualAttendeeCapacity();

    /**
     * The maximum physical attendee capacity of an [[Event]] whose [[eventAttendanceMode]] is [[OnlineEventAttendanceMode]] (or the online aspects, in the case of a [[MixedEventAttendanceMode]]). 
     *
     * @param fMaximumVirtualAttendeeCapacity Integer value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1842">https://github.com/schemaorg/schemaorg/issues/1842</a>
     */
    void setMaximumVirtualAttendeeCapacity(Integer fMaximumVirtualAttendeeCapacity);
    /**
     * The maximum physical attendee capacity of an [[Event]] whose [[eventAttendanceMode]] is [[OnlineEventAttendanceMode]] (or the online aspects, in the case of a [[MixedEventAttendanceMode]]). 
     *
     * @param fMaximumVirtualAttendeeCapacity java.lang.Integer value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1842">https://github.com/schemaorg/schemaorg/issues/1842</a>
     */
    void setMaximumVirtualAttendeeCapacity(java.lang.Integer fMaximumVirtualAttendeeCapacity);

    /**
     * A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip.
     *
     * @return {@link Person}
     */
    Person getDirector();

    /**
     * A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip.
     *
     * @param fDirector Person value to set.
     */
    void setDirector(Person fDirector);

    /**
     * A [[Grant]] that directly or indirectly provide funding or sponsorship for this item. See also [[ownershipFundingInfo]].
     *
     * @return {@link Grant}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/383">https://github.com/schemaorg/schemaorg/issues/383</a>
     * @see <a href="https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP">https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP</a>
     */
    Grant getFunding();

    /**
     * A [[Grant]] that directly or indirectly provide funding or sponsorship for this item. See also [[ownershipFundingInfo]].
     *
     * @param fFunding Grant value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/383">https://github.com/schemaorg/schemaorg/issues/383</a>
     * @see <a href="https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP">https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP</a>
     */
    void setFunding(Grant fFunding);

    /**
     * Keywords or tags used to describe some item. Multiple textual entries in a keywords list are typically delimited by commas, or by repeating the property.
     *
     * @return {@link DefinedTerm} or {@link Text} or {@link URL}
     */
    <T> T getKeywords();

    /**
     * Keywords or tags used to describe some item. Multiple textual entries in a keywords list are typically delimited by commas, or by repeating the property.
     *
     * @param fKeywords DefinedTerm value to set.
     */
    void setKeywords(DefinedTerm fKeywords);
    /**
     * Keywords or tags used to describe some item. Multiple textual entries in a keywords list are typically delimited by commas, or by repeating the property.
     *
     * @param fKeywords Text value to set.
     */
    void setKeywords(Text fKeywords);
    /**
     * Keywords or tags used to describe some item. Multiple textual entries in a keywords list are typically delimited by commas, or by repeating the property.
     *
     * @param fKeywords java.lang.String value to set.
     */
    void setKeywords(java.lang.String fKeywords);
    /**
     * Keywords or tags used to describe some item. Multiple textual entries in a keywords list are typically delimited by commas, or by repeating the property.
     *
     * @param fKeywords URL value to set.
     */
    void setKeywords(URL fKeywords);
    /**
     * Keywords or tags used to describe some item. Multiple textual entries in a keywords list are typically delimited by commas, or by repeating the property.
     *
     * @param fKeywords java.net.URL value to set.
     */
    void setKeywords(java.net.URL fKeywords);

    /**
     * An intended audience, i.e. a group for whom something was created.
     *
     * @return {@link Audience}
     */
    Audience getAudience();

    /**
     * An intended audience, i.e. a group for whom something was created.
     *
     * @param fAudience Audience value to set.
     */
    void setAudience(Audience fAudience);

    /**
     * An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.
     *       
     *
     * @return {@link Offer} or {@link Demand}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     */
    <T> T getOffers();

    /**
     * An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.
     *       
     *
     * @param fOffers Offer value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     */
    void setOffers(Offer fOffers);
    /**
     * An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.
     *       
     *
     * @param fOffers Demand value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     */
    void setOffers(Demand fOffers);

    /**
     * An Event that is part of this event. For example, a conference event includes many presentations, each of which is a subEvent of the conference.
     *
     * @return {@link Event}
     */
    Event getSubEvent();

    /**
     * An Event that is part of this event. For example, a conference event includes many presentations, each of which is a subEvent of the conference.
     *
     * @param fSubEvent Event value to set.
     */
    void setSubEvent(Event fSubEvent);

    /**
     * An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
     *
     * @return {@link Person}
     */
    Person getActor();

    /**
     * An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
     *
     * @param fActor Person value to set.
     */
    void setActor(Person fActor);

    /**
     * An eventStatus of an event represents its status; particularly useful when an event is cancelled or rescheduled.
     *
     * @return {@link EventStatusType}
     */
    EventStatusType getEventStatus();

    /**
     * An eventStatus of an event represents its status; particularly useful when an event is cancelled or rescheduled.
     *
     * @param fEventStatus EventStatusType value to set.
     */
    void setEventStatus(EventStatusType fEventStatus);

    /**
     * The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
     *
     * @return {@link Date} or {@link DateTime}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2486">https://github.com/schemaorg/schemaorg/issues/2486</a>
     */
    <T> T getEndDate();

    /**
     * The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
     *
     * @param fEndDate Date value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2486">https://github.com/schemaorg/schemaorg/issues/2486</a>
     */
    void setEndDate(Date fEndDate);
    /**
     * The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
     *
     * @param fEndDate java.time.LocalDate value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2486">https://github.com/schemaorg/schemaorg/issues/2486</a>
     */
    void setEndDate(java.time.LocalDate fEndDate);
    /**
     * The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
     *
     * @param fEndDate DateTime value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2486">https://github.com/schemaorg/schemaorg/issues/2486</a>
     */
    void setEndDate(DateTime fEndDate);
    /**
     * The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
     *
     * @param fEndDate java.time.LocalDateTime value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2486">https://github.com/schemaorg/schemaorg/issues/2486</a>
     */
    void setEndDate(java.time.LocalDateTime fEndDate);

    /**
     * A person or organization that supports (sponsors) something through some kind of financial contribution.
     *
     * @return {@link Organization} or {@link Person}
     */
    <T> T getFunder();

    /**
     * A person or organization that supports (sponsors) something through some kind of financial contribution.
     *
     * @param fFunder Organization value to set.
     */
    void setFunder(Organization fFunder);
    /**
     * A person or organization that supports (sponsors) something through some kind of financial contribution.
     *
     * @param fFunder Person value to set.
     */
    void setFunder(Person fFunder);

    /**
     * A performer at the event&#x2014;for example, a presenter, musician, musical group or actor.
     *
     * @return {@link Organization} or {@link Person}
     */
    <T> T getPerformer();

    /**
     * A performer at the event&#x2014;for example, a presenter, musician, musical group or actor.
     *
     * @param fPerformer Organization value to set.
     */
    void setPerformer(Organization fPerformer);
    /**
     * A performer at the event&#x2014;for example, a presenter, musician, musical group or actor.
     *
     * @param fPerformer Person value to set.
     */
    void setPerformer(Person fPerformer);

    /**
     * The overall rating, based on a collection of reviews or ratings, of the item.
     *
     * @return {@link AggregateRating}
     */
    AggregateRating getAggregateRating();

    /**
     * The overall rating, based on a collection of reviews or ratings, of the item.
     *
     * @param fAggregateRating AggregateRating value to set.
     */
    void setAggregateRating(AggregateRating fAggregateRating);

    /**
     * The typical expected age range, e.g. '7-9', '11-'.
     *
     * @return {@link Text}
     */
    Text getTypicalAgeRange();

    /**
     * The typical expected age range, e.g. '7-9', '11-'.
     *
     * @param fTypicalAgeRange Text value to set.
     */
    void setTypicalAgeRange(Text fTypicalAgeRange);
    /**
     * The typical expected age range, e.g. '7-9', '11-'.
     *
     * @param fTypicalAgeRange java.lang.String value to set.
     */
    void setTypicalAgeRange(java.lang.String fTypicalAgeRange);

    /**
     * The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
     *
     * @return {@link PostalAddress} or {@link Text} or {@link Place} or {@link VirtualLocation}
     */
    <T> T getLocation();

    /**
     * The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
     *
     * @param fLocation PostalAddress value to set.
     */
    void setLocation(PostalAddress fLocation);
    /**
     * The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
     *
     * @param fLocation Text value to set.
     */
    void setLocation(Text fLocation);
    /**
     * The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
     *
     * @param fLocation java.lang.String value to set.
     */
    void setLocation(java.lang.String fLocation);
    /**
     * The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
     *
     * @param fLocation Place value to set.
     */
    void setLocation(Place fLocation);
    /**
     * The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
     *
     * @param fLocation VirtualLocation value to set.
     */
    void setLocation(VirtualLocation fLocation);

    /**
     * The main performer or performers of the event&#x2014;for example, a presenter, musician, or actor.
     *
     * @return {@link Person} or {@link Organization}
     */
    <T> T getPerformers();

    /**
     * The main performer or performers of the event&#x2014;for example, a presenter, musician, or actor.
     *
     * @param fPerformers Person value to set.
     */
    void setPerformers(Person fPerformers);
    /**
     * The main performer or performers of the event&#x2014;for example, a presenter, musician, or actor.
     *
     * @param fPerformers Organization value to set.
     */
    void setPerformers(Organization fPerformers);

    /**
     * The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
     *
     * @return {@link Duration}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1457">https://github.com/schemaorg/schemaorg/issues/1457</a>
     */
    Duration getDuration();

    /**
     * The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
     *
     * @param fDuration Duration value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1457">https://github.com/schemaorg/schemaorg/issues/1457</a>
     */
    void setDuration(Duration fDuration);

    /**
     * An organizer of an Event.
     *
     * @return {@link Person} or {@link Organization}
     */
    <T> T getOrganizer();

    /**
     * An organizer of an Event.
     *
     * @param fOrganizer Person value to set.
     */
    void setOrganizer(Person fOrganizer);
    /**
     * An organizer of an Event.
     *
     * @param fOrganizer Organization value to set.
     */
    void setOrganizer(Organization fOrganizer);

    /**
     * A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.
     *
     * @return {@link Organization} or {@link Person}
     */
    <T> T getSponsor();

    /**
     * A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.
     *
     * @param fSponsor Organization value to set.
     */
    void setSponsor(Organization fSponsor);
    /**
     * A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.
     *
     * @param fSponsor Person value to set.
     */
    void setSponsor(Person fSponsor);

    /**
     * Used in conjunction with eventStatus for rescheduled or cancelled events. This property contains the previously scheduled start date. For rescheduled events, the startDate property should be used for the newly scheduled start date. In the (rare) case of an event that has been postponed and rescheduled multiple times, this field may be repeated.
     *
     * @return {@link Date}
     */
    Date getPreviousStartDate();

    /**
     * Used in conjunction with eventStatus for rescheduled or cancelled events. This property contains the previously scheduled start date. For rescheduled events, the startDate property should be used for the newly scheduled start date. In the (rare) case of an event that has been postponed and rescheduled multiple times, this field may be repeated.
     *
     * @param fPreviousStartDate Date value to set.
     */
    void setPreviousStartDate(Date fPreviousStartDate);
    /**
     * Used in conjunction with eventStatus for rescheduled or cancelled events. This property contains the previously scheduled start date. For rescheduled events, the startDate property should be used for the newly scheduled start date. In the (rare) case of an event that has been postponed and rescheduled multiple times, this field may be repeated.
     *
     * @param fPreviousStartDate java.time.LocalDate value to set.
     */
    void setPreviousStartDate(java.time.LocalDate fPreviousStartDate);

    /**
     * A flag to signal that the item, event, or place is accessible for free.
     *
     * @return {@link Boolean}
     */
    Boolean getIsAccessibleForFree();

    /**
     * A flag to signal that the item, event, or place is accessible for free.
     *
     * @param fIsAccessibleForFree Boolean value to set.
     */
    void setIsAccessibleForFree(Boolean fIsAccessibleForFree);
    /**
     * A flag to signal that the item, event, or place is accessible for free.
     *
     * @param fIsAccessibleForFree java.lang.Boolean value to set.
     */
    void setIsAccessibleForFree(java.lang.Boolean fIsAccessibleForFree);

    /**
     * The number of attendee places for an event that remain unallocated.
     *
     * @return {@link Integer}
     */
    Integer getRemainingAttendeeCapacity();

    /**
     * The number of attendee places for an event that remain unallocated.
     *
     * @param fRemainingAttendeeCapacity Integer value to set.
     */
    void setRemainingAttendeeCapacity(Integer fRemainingAttendeeCapacity);
    /**
     * The number of attendee places for an event that remain unallocated.
     *
     * @param fRemainingAttendeeCapacity java.lang.Integer value to set.
     */
    void setRemainingAttendeeCapacity(java.lang.Integer fRemainingAttendeeCapacity);

    /**
     * Events that are a part of this event. For example, a conference event includes many presentations, each subEvents of the conference.
     *
     * @return {@link Event}
     */
    Event getSubEvents();

    /**
     * Events that are a part of this event. For example, a conference event includes many presentations, each subEvents of the conference.
     *
     * @param fSubEvents Event value to set.
     */
    void setSubEvents(Event fSubEvents);

    /**
     * A work performed in some event, for example a play performed in a TheaterEvent.
     *
     * @return {@link CreativeWork}
     */
    CreativeWork getWorkPerformed();

    /**
     * A work performed in some event, for example a play performed in a TheaterEvent.
     *
     * @param fWorkPerformed CreativeWork value to set.
     */
    void setWorkPerformed(CreativeWork fWorkPerformed);

    /**
     * The time admission will commence.
     *
     * @return {@link Time} or {@link DateTime}
     */
    <T> T getDoorTime();

    /**
     * The time admission will commence.
     *
     * @param fDoorTime Time value to set.
     */
    void setDoorTime(Time fDoorTime);
    /**
     * The time admission will commence.
     *
     * @param fDoorTime java.time.LocalTime value to set.
     */
    void setDoorTime(java.time.LocalTime fDoorTime);
    /**
     * The time admission will commence.
     *
     * @param fDoorTime DateTime value to set.
     */
    void setDoorTime(DateTime fDoorTime);
    /**
     * The time admission will commence.
     *
     * @param fDoorTime java.time.LocalDateTime value to set.
     */
    void setDoorTime(java.time.LocalDateTime fDoorTime);

    /**
     * The language of the content or performance or used in an action. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[availableLanguage]].
     *
     * @return {@link Text} or {@link Language}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2382">https://github.com/schemaorg/schemaorg/issues/2382</a>
     */
    <T> T getInLanguage();

    /**
     * The language of the content or performance or used in an action. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[availableLanguage]].
     *
     * @param fInLanguage Text value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2382">https://github.com/schemaorg/schemaorg/issues/2382</a>
     */
    void setInLanguage(Text fInLanguage);
    /**
     * The language of the content or performance or used in an action. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[availableLanguage]].
     *
     * @param fInLanguage java.lang.String value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2382">https://github.com/schemaorg/schemaorg/issues/2382</a>
     */
    void setInLanguage(java.lang.String fInLanguage);
    /**
     * The language of the content or performance or used in an action. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[availableLanguage]].
     *
     * @param fInLanguage Language value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2382">https://github.com/schemaorg/schemaorg/issues/2382</a>
     */
    void setInLanguage(Language fInLanguage);

    /**
     * The subject matter of the content.
     *
     * @return {@link Thing}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    Thing getAbout();

    /**
     * The subject matter of the content.
     *
     * @param fAbout Thing value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    void setAbout(Thing fAbout);

    /**
     * The CreativeWork that captured all or part of this Event.
     *
     * @return {@link CreativeWork}
     */
    CreativeWork getRecordedIn();

    /**
     * The CreativeWork that captured all or part of this Event.
     *
     * @param fRecordedIn CreativeWork value to set.
     */
    void setRecordedIn(CreativeWork fRecordedIn);

    /**
     * The maximum physical attendee capacity of an [[Event]] whose [[eventAttendanceMode]] is [[OfflineEventAttendanceMode]] (or the offline aspects, in the case of a [[MixedEventAttendanceMode]]). 
     *
     * @return {@link Integer}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1842">https://github.com/schemaorg/schemaorg/issues/1842</a>
     */
    Integer getMaximumPhysicalAttendeeCapacity();

    /**
     * The maximum physical attendee capacity of an [[Event]] whose [[eventAttendanceMode]] is [[OfflineEventAttendanceMode]] (or the offline aspects, in the case of a [[MixedEventAttendanceMode]]). 
     *
     * @param fMaximumPhysicalAttendeeCapacity Integer value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1842">https://github.com/schemaorg/schemaorg/issues/1842</a>
     */
    void setMaximumPhysicalAttendeeCapacity(Integer fMaximumPhysicalAttendeeCapacity);
    /**
     * The maximum physical attendee capacity of an [[Event]] whose [[eventAttendanceMode]] is [[OfflineEventAttendanceMode]] (or the offline aspects, in the case of a [[MixedEventAttendanceMode]]). 
     *
     * @param fMaximumPhysicalAttendeeCapacity java.lang.Integer value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1842">https://github.com/schemaorg/schemaorg/issues/1842</a>
     */
    void setMaximumPhysicalAttendeeCapacity(java.lang.Integer fMaximumPhysicalAttendeeCapacity);

    /**
     * A person or organization attending the event.
     *
     * @return {@link Person} or {@link Organization}
     */
    <T> T getAttendee();

    /**
     * A person or organization attending the event.
     *
     * @param fAttendee Person value to set.
     */
    void setAttendee(Person fAttendee);
    /**
     * A person or organization attending the event.
     *
     * @param fAttendee Organization value to set.
     */
    void setAttendee(Organization fAttendee);

    /**
     * A work featured in some event, e.g. exhibited in an ExhibitionEvent.
     *        Specific subproperties are available for workPerformed (e.g. a play), or a workPresented (a Movie at a ScreeningEvent).
     *
     * @return {@link CreativeWork}
     */
    CreativeWork getWorkFeatured();

    /**
     * A work featured in some event, e.g. exhibited in an ExhibitionEvent.
     *        Specific subproperties are available for workPerformed (e.g. a play), or a workPresented (a Movie at a ScreeningEvent).
     *
     * @param fWorkFeatured CreativeWork value to set.
     */
    void setWorkFeatured(CreativeWork fWorkFeatured);

    /**
     * Associates an [[Event]] with a [[Schedule]]. There are circumstances where it is preferable to share a schedule for a series of
     *       repeating events rather than data on the individual events themselves. For example, a website or application might prefer to publish a schedule for a weekly
     *       gym class rather than provide data on every event. A schedule could be processed by applications to add forthcoming events to a calendar. An [[Event]] that
     *       is associated with a [[Schedule]] using this property should not have [[startDate]] or [[endDate]] properties. These are instead defined within the associated
     *       [[Schedule]], this avoids any ambiguity for clients using the data. The property might have repeated values to specify different schedules, e.g. for different months
     *       or seasons.
     *
     * @return {@link Schedule}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1457">https://github.com/schemaorg/schemaorg/issues/1457</a>
     */
    Schedule getEventSchedule();

    /**
     * Associates an [[Event]] with a [[Schedule]]. There are circumstances where it is preferable to share a schedule for a series of
     *       repeating events rather than data on the individual events themselves. For example, a website or application might prefer to publish a schedule for a weekly
     *       gym class rather than provide data on every event. A schedule could be processed by applications to add forthcoming events to a calendar. An [[Event]] that
     *       is associated with a [[Schedule]] using this property should not have [[startDate]] or [[endDate]] properties. These are instead defined within the associated
     *       [[Schedule]], this avoids any ambiguity for clients using the data. The property might have repeated values to specify different schedules, e.g. for different months
     *       or seasons.
     *
     * @param fEventSchedule Schedule value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1457">https://github.com/schemaorg/schemaorg/issues/1457</a>
     */
    void setEventSchedule(Schedule fEventSchedule);

    /**
     * A secondary contributor to the CreativeWork or Event.
     *
     * @return {@link Organization} or {@link Person}
     */
    <T> T getContributor();

    /**
     * A secondary contributor to the CreativeWork or Event.
     *
     * @param fContributor Organization value to set.
     */
    void setContributor(Organization fContributor);
    /**
     * A secondary contributor to the CreativeWork or Event.
     *
     * @param fContributor Person value to set.
     */
    void setContributor(Person fContributor);

    /**
     * A person attending the event.
     *
     * @return {@link Person} or {@link Organization}
     */
    <T> T getAttendees();

    /**
     * A person attending the event.
     *
     * @param fAttendees Person value to set.
     */
    void setAttendees(Person fAttendees);
    /**
     * A person attending the event.
     *
     * @param fAttendees Organization value to set.
     */
    void setAttendees(Organization fAttendees);
}
