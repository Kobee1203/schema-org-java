/*
 * This class is auto generated by the schema.org code generator program.
 * https://github.com/Kobee1203/schema-org-java
 * Do not edit the class manually.
 */
package org.schema.model;

import java.util.List;
import org.schema.model.Organization;
import org.schema.model.Person;
import org.schema.model.BoardingPolicyType;
import org.schema.model.datatype.DateTime;
import org.schema.model.Airport;
import org.schema.model.Duration;
import org.schema.model.datatype.Text;
import org.schema.model.Distance;
import org.schema.model.Vehicle;

/**
 * An airline flight.
 *
 * @see <a href="https://schema.org/Flight">https://schema.org/Flight</a>
 */
public interface Flight extends Trip {

    /**
     * An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider.
     *
     * @return {@link Organization} or {@link Person}
     */
    <T> List<T> getSellerList();

    /**
     * An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider.
     *
     * @return {@link Organization} or {@link Person}
     */
    <T> T getSeller();

    /**
     * An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider.
     *
     * @param seller Organization value to set.
     */
    void addSeller(Organization seller);
    /**
     * An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider.
     *
     * @param seller Person value to set.
     */
    void addSeller(Person seller);

    /**
     * The type of boarding policy used by the airline (e.g. zone-based or group-based).
     *
     * @return {@link BoardingPolicyType}
     */
    List<BoardingPolicyType> getBoardingPolicyList();

    /**
     * The type of boarding policy used by the airline (e.g. zone-based or group-based).
     *
     * @return {@link BoardingPolicyType}
     */
    BoardingPolicyType getBoardingPolicy();

    /**
     * The type of boarding policy used by the airline (e.g. zone-based or group-based).
     *
     * @param boardingPolicy BoardingPolicyType value to set.
     */
    void addBoardingPolicy(BoardingPolicyType boardingPolicy);

    /**
     * The time when a passenger can check into the flight online.
     *
     * @return {@link DateTime}
     */
    List<DateTime> getWebCheckinTimeList();

    /**
     * The time when a passenger can check into the flight online.
     *
     * @return {@link DateTime}
     */
    DateTime getWebCheckinTime();

    /**
     * The time when a passenger can check into the flight online.
     *
     * @param webCheckinTime DateTime value to set.
     */
    void addWebCheckinTime(DateTime webCheckinTime);

    /**
     * The airport where the flight terminates.
     *
     * @return {@link Airport}
     */
    List<Airport> getArrivalAirportList();

    /**
     * The airport where the flight terminates.
     *
     * @return {@link Airport}
     */
    Airport getArrivalAirport();

    /**
     * The airport where the flight terminates.
     *
     * @param arrivalAirport Airport value to set.
     */
    void addArrivalAirport(Airport arrivalAirport);

    /**
     * The estimated time the flight will take.
     *
     * @return {@link Duration} or {@link Text}
     */
    <T> List<T> getEstimatedFlightDurationList();

    /**
     * The estimated time the flight will take.
     *
     * @return {@link Duration} or {@link Text}
     */
    <T> T getEstimatedFlightDuration();

    /**
     * The estimated time the flight will take.
     *
     * @param estimatedFlightDuration Duration value to set.
     */
    void addEstimatedFlightDuration(Duration estimatedFlightDuration);
    /**
     * The estimated time the flight will take.
     *
     * @param estimatedFlightDuration Text value to set.
     */
    void addEstimatedFlightDuration(Text estimatedFlightDuration);

    /**
     * 'carrier' is an out-dated term indicating the 'provider' for parcel delivery and flights.
     *
     * @return {@link Organization}
     */
    List<Organization> getCarrierList();

    /**
     * 'carrier' is an out-dated term indicating the 'provider' for parcel delivery and flights.
     *
     * @return {@link Organization}
     */
    Organization getCarrier();

    /**
     * 'carrier' is an out-dated term indicating the 'provider' for parcel delivery and flights.
     *
     * @param carrier Organization value to set.
     */
    void addCarrier(Organization carrier);

    /**
     * The airport where the flight originates.
     *
     * @return {@link Airport}
     */
    List<Airport> getDepartureAirportList();

    /**
     * The airport where the flight originates.
     *
     * @return {@link Airport}
     */
    Airport getDepartureAirport();

    /**
     * The airport where the flight originates.
     *
     * @param departureAirport Airport value to set.
     */
    void addDepartureAirport(Airport departureAirport);

    /**
     * Description of the meals that will be provided or available for purchase.
     *
     * @return {@link Text}
     */
    List<Text> getMealServiceList();

    /**
     * Description of the meals that will be provided or available for purchase.
     *
     * @return {@link Text}
     */
    Text getMealService();

    /**
     * Description of the meals that will be provided or available for purchase.
     *
     * @param mealService Text value to set.
     */
    void addMealService(Text mealService);

    /**
     * The distance of the flight.
     *
     * @return {@link Text} or {@link Distance}
     */
    <T> List<T> getFlightDistanceList();

    /**
     * The distance of the flight.
     *
     * @return {@link Text} or {@link Distance}
     */
    <T> T getFlightDistance();

    /**
     * The distance of the flight.
     *
     * @param flightDistance Text value to set.
     */
    void addFlightDistance(Text flightDistance);
    /**
     * The distance of the flight.
     *
     * @param flightDistance Distance value to set.
     */
    void addFlightDistance(Distance flightDistance);

    /**
     * Identifier of the flight's departure gate.
     *
     * @return {@link Text}
     */
    List<Text> getDepartureGateList();

    /**
     * Identifier of the flight's departure gate.
     *
     * @return {@link Text}
     */
    Text getDepartureGate();

    /**
     * Identifier of the flight's departure gate.
     *
     * @param departureGate Text value to set.
     */
    void addDepartureGate(Text departureGate);

    /**
     * Identifier of the flight's departure terminal.
     *
     * @return {@link Text}
     */
    List<Text> getDepartureTerminalList();

    /**
     * Identifier of the flight's departure terminal.
     *
     * @return {@link Text}
     */
    Text getDepartureTerminal();

    /**
     * Identifier of the flight's departure terminal.
     *
     * @param departureTerminal Text value to set.
     */
    void addDepartureTerminal(Text departureTerminal);

    /**
     * Identifier of the flight's arrival terminal.
     *
     * @return {@link Text}
     */
    List<Text> getArrivalTerminalList();

    /**
     * Identifier of the flight's arrival terminal.
     *
     * @return {@link Text}
     */
    Text getArrivalTerminal();

    /**
     * Identifier of the flight's arrival terminal.
     *
     * @param arrivalTerminal Text value to set.
     */
    void addArrivalTerminal(Text arrivalTerminal);

    /**
     * The unique identifier for a flight including the airline IATA code. For example, if describing United flight 110, where the IATA code for United is 'UA', the flightNumber is 'UA110'.
     *
     * @return {@link Text}
     */
    List<Text> getFlightNumberList();

    /**
     * The unique identifier for a flight including the airline IATA code. For example, if describing United flight 110, where the IATA code for United is 'UA', the flightNumber is 'UA110'.
     *
     * @return {@link Text}
     */
    Text getFlightNumber();

    /**
     * The unique identifier for a flight including the airline IATA code. For example, if describing United flight 110, where the IATA code for United is 'UA', the flightNumber is 'UA110'.
     *
     * @param flightNumber Text value to set.
     */
    void addFlightNumber(Text flightNumber);

    /**
     * Identifier of the flight's arrival gate.
     *
     * @return {@link Text}
     */
    List<Text> getArrivalGateList();

    /**
     * Identifier of the flight's arrival gate.
     *
     * @return {@link Text}
     */
    Text getArrivalGate();

    /**
     * Identifier of the flight's arrival gate.
     *
     * @param arrivalGate Text value to set.
     */
    void addArrivalGate(Text arrivalGate);

    /**
     * The kind of aircraft (e.g., "Boeing 747").
     *
     * @return {@link Text} or {@link Vehicle}
     */
    <T> List<T> getAircraftList();

    /**
     * The kind of aircraft (e.g., "Boeing 747").
     *
     * @return {@link Text} or {@link Vehicle}
     */
    <T> T getAircraft();

    /**
     * The kind of aircraft (e.g., "Boeing 747").
     *
     * @param aircraft Text value to set.
     */
    void addAircraft(Text aircraft);
    /**
     * The kind of aircraft (e.g., "Boeing 747").
     *
     * @param aircraft Vehicle value to set.
     */
    void addAircraft(Vehicle aircraft);
}
