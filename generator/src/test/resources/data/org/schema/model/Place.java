/*
 * This class is auto generated by the schema.org code generator program.
 * https://github.com/Kobee1203/schema-org-java
 * Do not edit the class manually.
 */
package org.schema.model;

import java.util.List;
import org.schema.model.GeospatialGeometry;
import org.schema.model.Place;
import org.schema.model.datatype.Text;
import org.schema.model.datatype.Number;
import org.schema.model.datatype.Boolean;
import org.schema.model.LocationFeatureSpecification;
import org.schema.model.PropertyValue;
import org.schema.model.ImageObject;
import org.schema.model.Photograph;
import org.schema.model.datatype.URL;
import org.schema.model.DefinedTerm;
import org.schema.model.Review;
import org.schema.model.Map;
import org.schema.model.Event;
import org.schema.model.PostalAddress;
import org.schema.model.GeoCoordinates;
import org.schema.model.GeoShape;
import org.schema.model.OpeningHoursSpecification;
import org.schema.model.datatype.Integer;
import org.schema.model.AggregateRating;

/**
 * Entities that have a somewhat fixed, physical extension.
 *
 * @see <a href="https://schema.org/Place">https://schema.org/Place</a>
 */
public interface Place extends Thing {

    /**
     * Represents a relationship between two geometries (or the places they represent), relating a covering geometry to a covered geometry. "Every point of b is a point of (the interior or boundary of) a". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
     *
     * @return {@link GeospatialGeometry} or {@link Place}
     */
    <T> List<T> getGeoCoversList();

    /**
     * Represents a relationship between two geometries (or the places they represent), relating a covering geometry to a covered geometry. "Every point of b is a point of (the interior or boundary of) a". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
     *
     * @return {@link GeospatialGeometry} or {@link Place}
     */
    <T> T getGeoCovers();

    /**
     * Represents a relationship between two geometries (or the places they represent), relating a covering geometry to a covered geometry. "Every point of b is a point of (the interior or boundary of) a". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
     *
     * @param geoCovers GeospatialGeometry value to set.
     */
    void addGeoCovers(GeospatialGeometry geoCovers);
    /**
     * Represents a relationship between two geometries (or the places they represent), relating a covering geometry to a covered geometry. "Every point of b is a point of (the interior or boundary of) a". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
     *
     * @param geoCovers Place value to set.
     */
    void addGeoCovers(Place geoCovers);

    /**
     * The longitude of a location. For example ```-122.08585``` ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).
     *
     * @return {@link Text} or {@link Number}
     */
    <T> List<T> getLongitudeList();

    /**
     * The longitude of a location. For example ```-122.08585``` ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).
     *
     * @return {@link Text} or {@link Number}
     */
    <T> T getLongitude();

    /**
     * The longitude of a location. For example ```-122.08585``` ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).
     *
     * @param longitude Text value to set.
     */
    void addLongitude(Text longitude);
    /**
     * The longitude of a location. For example ```-122.08585``` ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).
     *
     * @param longitude Number value to set.
     */
    void addLongitude(Number longitude);

    /**
     * Indicates whether it is allowed to smoke in the place, e.g. in the restaurant, hotel or hotel room.
     *
     * @return {@link Boolean}
     * @see <a href="https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology">https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology</a>
     */
    List<Boolean> getSmokingAllowedList();

    /**
     * Indicates whether it is allowed to smoke in the place, e.g. in the restaurant, hotel or hotel room.
     *
     * @return {@link Boolean}
     * @see <a href="https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology">https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology</a>
     */
    Boolean getSmokingAllowed();

    /**
     * Indicates whether it is allowed to smoke in the place, e.g. in the restaurant, hotel or hotel room.
     *
     * @param smokingAllowed Boolean value to set.
     * @see <a href="https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology">https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology</a>
     */
    void addSmokingAllowed(Boolean smokingAllowed);

    /**
     * The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place.
     *
     * @return {@link Text}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    List<Text> getIsicV4List();

    /**
     * The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place.
     *
     * @return {@link Text}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    Text getIsicV4();

    /**
     * The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place.
     *
     * @param isicV4 Text value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    void addIsicV4(Text isicV4);

    /**
     * The [Global Location Number](http://www.gs1.org/gln) (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations.
     *
     * @return {@link Text}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     * @see <a href="https://schema.org/identifier">https://schema.org/identifier</a> <i>globalLocationNumber</i> is a sub property of <i>identifier</i>
     */
    List<Text> getGlobalLocationNumberList();

    /**
     * The [Global Location Number](http://www.gs1.org/gln) (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations.
     *
     * @return {@link Text}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     * @see <a href="https://schema.org/identifier">https://schema.org/identifier</a> <i>globalLocationNumber</i> is a sub property of <i>identifier</i>
     */
    Text getGlobalLocationNumber();

    /**
     * The [Global Location Number](http://www.gs1.org/gln) (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations.
     *
     * @param globalLocationNumber Text value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     * @see <a href="https://schema.org/identifier">https://schema.org/identifier</a> <i>globalLocationNumber</i> is a sub property of <i>identifier</i>
     */
    void addGlobalLocationNumber(Text globalLocationNumber);

    /**
     * An amenity feature (e.g. a characteristic or service) of the Accommodation. This generic property does not make a statement about whether the feature is included in an offer for the main accommodation or available at extra costs.
     *
     * @return {@link LocationFeatureSpecification}
     * @see <a href="https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology">https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology</a>
     */
    List<LocationFeatureSpecification> getAmenityFeatureList();

    /**
     * An amenity feature (e.g. a characteristic or service) of the Accommodation. This generic property does not make a statement about whether the feature is included in an offer for the main accommodation or available at extra costs.
     *
     * @return {@link LocationFeatureSpecification}
     * @see <a href="https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology">https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology</a>
     */
    LocationFeatureSpecification getAmenityFeature();

    /**
     * An amenity feature (e.g. a characteristic or service) of the Accommodation. This generic property does not make a statement about whether the feature is included in an offer for the main accommodation or available at extra costs.
     *
     * @param amenityFeature LocationFeatureSpecification value to set.
     * @see <a href="https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology">https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology</a>
     */
    void addAmenityFeature(LocationFeatureSpecification amenityFeature);

    /**
     * A property-value pair representing an additional characteristic of the entity, e.g. a product feature or another characteristic for which there is no matching property in schema.org.<br/><br/>Note: Publishers should be aware that applications designed to use specific schema.org properties (e.g. https://schema.org/width, https://schema.org/color, https://schema.org/gtin13, ...) will typically expect such data to be provided using those properties, rather than using the generic property/value mechanism.
     *
     * @return {@link PropertyValue}
     */
    List<PropertyValue> getAdditionalPropertyList();

    /**
     * A property-value pair representing an additional characteristic of the entity, e.g. a product feature or another characteristic for which there is no matching property in schema.org.<br/><br/>Note: Publishers should be aware that applications designed to use specific schema.org properties (e.g. https://schema.org/width, https://schema.org/color, https://schema.org/gtin13, ...) will typically expect such data to be provided using those properties, rather than using the generic property/value mechanism.
     *
     * @return {@link PropertyValue}
     */
    PropertyValue getAdditionalProperty();

    /**
     * A property-value pair representing an additional characteristic of the entity, e.g. a product feature or another characteristic for which there is no matching property in schema.org.<br/><br/>Note: Publishers should be aware that applications designed to use specific schema.org properties (e.g. https://schema.org/width, https://schema.org/color, https://schema.org/gtin13, ...) will typically expect such data to be provided using those properties, rather than using the generic property/value mechanism.
     *
     * @param additionalProperty PropertyValue value to set.
     */
    void addAdditionalProperty(PropertyValue additionalProperty);

    /**
     * A slogan or motto associated with the item.
     *
     * @return {@link Text}
     */
    List<Text> getSloganList();

    /**
     * A slogan or motto associated with the item.
     *
     * @return {@link Text}
     */
    Text getSlogan();

    /**
     * A slogan or motto associated with the item.
     *
     * @param slogan Text value to set.
     */
    void addSlogan(Text slogan);

    /**
     * Photographs of this place.
     *
     * @return {@link ImageObject} or {@link Photograph}
     */
    <T> List<T> getPhotosList();

    /**
     * Photographs of this place.
     *
     * @return {@link ImageObject} or {@link Photograph}
     */
    <T> T getPhotos();

    /**
     * Photographs of this place.
     *
     * @param photos ImageObject value to set.
     */
    void addPhotos(ImageObject photos);
    /**
     * Photographs of this place.
     *
     * @param photos Photograph value to set.
     */
    void addPhotos(Photograph photos);

    /**
     * Keywords or tags used to describe some item. Multiple textual entries in a keywords list are typically delimited by commas, or by repeating the property.
     *
     * @return {@link URL} or {@link DefinedTerm} or {@link Text}
     */
    <T> List<T> getKeywordsList();

    /**
     * Keywords or tags used to describe some item. Multiple textual entries in a keywords list are typically delimited by commas, or by repeating the property.
     *
     * @return {@link URL} or {@link DefinedTerm} or {@link Text}
     */
    <T> T getKeywords();

    /**
     * Keywords or tags used to describe some item. Multiple textual entries in a keywords list are typically delimited by commas, or by repeating the property.
     *
     * @param keywords URL value to set.
     */
    void addKeywords(URL keywords);
    /**
     * Keywords or tags used to describe some item. Multiple textual entries in a keywords list are typically delimited by commas, or by repeating the property.
     *
     * @param keywords DefinedTerm value to set.
     */
    void addKeywords(DefinedTerm keywords);
    /**
     * Keywords or tags used to describe some item. Multiple textual entries in a keywords list are typically delimited by commas, or by repeating the property.
     *
     * @param keywords Text value to set.
     */
    void addKeywords(Text keywords);

    /**
     * Review of the item.
     *
     * @return {@link Review}
     */
    List<Review> getReviewsList();

    /**
     * Review of the item.
     *
     * @return {@link Review}
     */
    Review getReviews();

    /**
     * Review of the item.
     *
     * @param reviews Review value to set.
     */
    void addReviews(Review reviews);

    /**
     * A page providing information on how to book a tour of some [[Place]], such as an [[Accommodation]] or [[ApartmentComplex]] in a real estate setting, as well as other kinds of tours as appropriate.
     *
     * @return {@link URL}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2373">https://github.com/schemaorg/schemaorg/issues/2373</a>
     */
    List<URL> getTourBookingPageList();

    /**
     * A page providing information on how to book a tour of some [[Place]], such as an [[Accommodation]] or [[ApartmentComplex]] in a real estate setting, as well as other kinds of tours as appropriate.
     *
     * @return {@link URL}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2373">https://github.com/schemaorg/schemaorg/issues/2373</a>
     */
    URL getTourBookingPage();

    /**
     * A page providing information on how to book a tour of some [[Place]], such as an [[Accommodation]] or [[ApartmentComplex]] in a real estate setting, as well as other kinds of tours as appropriate.
     *
     * @param tourBookingPage URL value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2373">https://github.com/schemaorg/schemaorg/issues/2373</a>
     */
    void addTourBookingPage(URL tourBookingPage);

    /**
     * Represents a relationship between two geometries (or the places they represent), relating a geometry to one that contains it, i.e. it is inside (i.e. within) its interior. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
     *
     * @return {@link GeospatialGeometry} or {@link Place}
     */
    <T> List<T> getGeoWithinList();

    /**
     * Represents a relationship between two geometries (or the places they represent), relating a geometry to one that contains it, i.e. it is inside (i.e. within) its interior. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
     *
     * @return {@link GeospatialGeometry} or {@link Place}
     */
    <T> T getGeoWithin();

    /**
     * Represents a relationship between two geometries (or the places they represent), relating a geometry to one that contains it, i.e. it is inside (i.e. within) its interior. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
     *
     * @param geoWithin GeospatialGeometry value to set.
     */
    void addGeoWithin(GeospatialGeometry geoWithin);
    /**
     * Represents a relationship between two geometries (or the places they represent), relating a geometry to one that contains it, i.e. it is inside (i.e. within) its interior. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
     *
     * @param geoWithin Place value to set.
     */
    void addGeoWithin(Place geoWithin);

    /**
     * The basic containment relation between a place and another that it contains.
     *
     * @return {@link Place}
     */
    List<Place> getContainsPlaceList();

    /**
     * The basic containment relation between a place and another that it contains.
     *
     * @return {@link Place}
     */
    Place getContainsPlace();

    /**
     * The basic containment relation between a place and another that it contains.
     *
     * @param containsPlace Place value to set.
     */
    void addContainsPlace(Place containsPlace);

    /**
     * A review of the item.
     *
     * @return {@link Review}
     */
    List<Review> getReviewList();

    /**
     * A review of the item.
     *
     * @return {@link Review}
     */
    Review getReview();

    /**
     * A review of the item.
     *
     * @param review Review value to set.
     */
    void addReview(Review review);

    /**
     * A URL to a map of the place.
     *
     * @return {@link URL} or {@link Map}
     */
    <T> List<T> getHasMapList();

    /**
     * A URL to a map of the place.
     *
     * @return {@link URL} or {@link Map}
     */
    <T> T getHasMap();

    /**
     * A URL to a map of the place.
     *
     * @param hasMap URL value to set.
     */
    void addHasMap(URL hasMap);
    /**
     * A URL to a map of the place.
     *
     * @param hasMap Map value to set.
     */
    void addHasMap(Map hasMap);

    /**
     * The basic containment relation between a place and one that contains it.
     *
     * @return {@link Place}
     */
    List<Place> getContainedInList();

    /**
     * The basic containment relation between a place and one that contains it.
     *
     * @return {@link Place}
     */
    Place getContainedIn();

    /**
     * The basic containment relation between a place and one that contains it.
     *
     * @param containedIn Place value to set.
     */
    void addContainedIn(Place containedIn);

    /**
     * Upcoming or past events associated with this place or organization.
     *
     * @return {@link Event}
     */
    List<Event> getEventsList();

    /**
     * Upcoming or past events associated with this place or organization.
     *
     * @return {@link Event}
     */
    Event getEvents();

    /**
     * Upcoming or past events associated with this place or organization.
     *
     * @param events Event value to set.
     */
    void addEvents(Event events);

    /**
     * Represents a relationship between two geometries (or the places they represent), relating a geometry to another that geospatially overlaps it, i.e. they have some but not all points in common. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
     *
     * @return {@link GeospatialGeometry} or {@link Place}
     */
    <T> List<T> getGeoOverlapsList();

    /**
     * Represents a relationship between two geometries (or the places they represent), relating a geometry to another that geospatially overlaps it, i.e. they have some but not all points in common. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
     *
     * @return {@link GeospatialGeometry} or {@link Place}
     */
    <T> T getGeoOverlaps();

    /**
     * Represents a relationship between two geometries (or the places they represent), relating a geometry to another that geospatially overlaps it, i.e. they have some but not all points in common. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
     *
     * @param geoOverlaps GeospatialGeometry value to set.
     */
    void addGeoOverlaps(GeospatialGeometry geoOverlaps);
    /**
     * Represents a relationship between two geometries (or the places they represent), relating a geometry to another that geospatially overlaps it, i.e. they have some but not all points in common. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
     *
     * @param geoOverlaps Place value to set.
     */
    void addGeoOverlaps(Place geoOverlaps);

    /**
     * Represents spatial relations in which two geometries (or the places they represent) are topologically equal, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM). "Two geometries are topologically equal if their interiors intersect and no part of the interior or boundary of one geometry intersects the exterior of the other" (a symmetric relationship).
     *
     * @return {@link GeospatialGeometry} or {@link Place}
     */
    <T> List<T> getGeoEqualsList();

    /**
     * Represents spatial relations in which two geometries (or the places they represent) are topologically equal, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM). "Two geometries are topologically equal if their interiors intersect and no part of the interior or boundary of one geometry intersects the exterior of the other" (a symmetric relationship).
     *
     * @return {@link GeospatialGeometry} or {@link Place}
     */
    <T> T getGeoEquals();

    /**
     * Represents spatial relations in which two geometries (or the places they represent) are topologically equal, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM). "Two geometries are topologically equal if their interiors intersect and no part of the interior or boundary of one geometry intersects the exterior of the other" (a symmetric relationship).
     *
     * @param geoEquals GeospatialGeometry value to set.
     */
    void addGeoEquals(GeospatialGeometry geoEquals);
    /**
     * Represents spatial relations in which two geometries (or the places they represent) are topologically equal, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM). "Two geometries are topologically equal if their interiors intersect and no part of the interior or boundary of one geometry intersects the exterior of the other" (a symmetric relationship).
     *
     * @param geoEquals Place value to set.
     */
    void addGeoEquals(Place geoEquals);

    /**
     * A URL to a map of the place.
     *
     * @return {@link URL}
     */
    List<URL> getMapsList();

    /**
     * A URL to a map of the place.
     *
     * @return {@link URL}
     */
    URL getMaps();

    /**
     * A URL to a map of the place.
     *
     * @param maps URL value to set.
     */
    void addMaps(URL maps);

    /**
     * A flag to signal that the item, event, or place is accessible for free.
     *
     * @return {@link Boolean}
     */
    List<Boolean> getIsAccessibleForFreeList();

    /**
     * A flag to signal that the item, event, or place is accessible for free.
     *
     * @return {@link Boolean}
     */
    Boolean getIsAccessibleForFree();

    /**
     * A flag to signal that the item, event, or place is accessible for free.
     *
     * @param isAccessibleForFree Boolean value to set.
     */
    void addIsAccessibleForFree(Boolean isAccessibleForFree);

    /**
     * Upcoming or past event associated with this place, organization, or action.
     *
     * @return {@link Event}
     */
    List<Event> getEventList();

    /**
     * Upcoming or past event associated with this place, organization, or action.
     *
     * @return {@link Event}
     */
    Event getEvent();

    /**
     * Upcoming or past event associated with this place, organization, or action.
     *
     * @param event Event value to set.
     */
    void addEvent(Event event);

    /**
     * A photograph of this place.
     *
     * @return {@link Photograph} or {@link ImageObject}
     * @see <a href="https://schema.org/image">https://schema.org/image</a> <i>photo</i> is a sub property of <i>image</i>
     */
    <T> List<T> getPhotoList();

    /**
     * A photograph of this place.
     *
     * @return {@link Photograph} or {@link ImageObject}
     * @see <a href="https://schema.org/image">https://schema.org/image</a> <i>photo</i> is a sub property of <i>image</i>
     */
    <T> T getPhoto();

    /**
     * A photograph of this place.
     *
     * @param photo Photograph value to set.
     * @see <a href="https://schema.org/image">https://schema.org/image</a> <i>photo</i> is a sub property of <i>image</i>
     */
    void addPhoto(Photograph photo);
    /**
     * A photograph of this place.
     *
     * @param photo ImageObject value to set.
     * @see <a href="https://schema.org/image">https://schema.org/image</a> <i>photo</i> is a sub property of <i>image</i>
     */
    void addPhoto(ImageObject photo);

    /**
     * The basic containment relation between a place and one that contains it.
     *
     * @return {@link Place}
     */
    List<Place> getContainedInPlaceList();

    /**
     * The basic containment relation between a place and one that contains it.
     *
     * @return {@link Place}
     */
    Place getContainedInPlace();

    /**
     * The basic containment relation between a place and one that contains it.
     *
     * @param containedInPlace Place value to set.
     */
    void addContainedInPlace(Place containedInPlace);

    /**
     * An associated logo.
     *
     * @return {@link ImageObject} or {@link URL}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     * @see <a href="https://schema.org/image">https://schema.org/image</a> <i>logo</i> is a sub property of <i>image</i>
     */
    <T> List<T> getLogoList();

    /**
     * An associated logo.
     *
     * @return {@link ImageObject} or {@link URL}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     * @see <a href="https://schema.org/image">https://schema.org/image</a> <i>logo</i> is a sub property of <i>image</i>
     */
    <T> T getLogo();

    /**
     * An associated logo.
     *
     * @param logo ImageObject value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     * @see <a href="https://schema.org/image">https://schema.org/image</a> <i>logo</i> is a sub property of <i>image</i>
     */
    void addLogo(ImageObject logo);
    /**
     * An associated logo.
     *
     * @param logo URL value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     * @see <a href="https://schema.org/image">https://schema.org/image</a> <i>logo</i> is a sub property of <i>image</i>
     */
    void addLogo(URL logo);

    /**
     * Represents a relationship between two geometries (or the places they represent), relating a geometry to another that crosses it: "a crosses b: they have some but not all interior points in common, and the dimension of the intersection is less than that of at least one of them". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
     *
     * @return {@link GeospatialGeometry} or {@link Place}
     */
    <T> List<T> getGeoCrossesList();

    /**
     * Represents a relationship between two geometries (or the places they represent), relating a geometry to another that crosses it: "a crosses b: they have some but not all interior points in common, and the dimension of the intersection is less than that of at least one of them". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
     *
     * @return {@link GeospatialGeometry} or {@link Place}
     */
    <T> T getGeoCrosses();

    /**
     * Represents a relationship between two geometries (or the places they represent), relating a geometry to another that crosses it: "a crosses b: they have some but not all interior points in common, and the dimension of the intersection is less than that of at least one of them". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
     *
     * @param geoCrosses GeospatialGeometry value to set.
     */
    void addGeoCrosses(GeospatialGeometry geoCrosses);
    /**
     * Represents a relationship between two geometries (or the places they represent), relating a geometry to another that crosses it: "a crosses b: they have some but not all interior points in common, and the dimension of the intersection is less than that of at least one of them". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
     *
     * @param geoCrosses Place value to set.
     */
    void addGeoCrosses(Place geoCrosses);

    /**
     * Physical address of the item.
     *
     * @return {@link Text} or {@link PostalAddress}
     */
    <T> List<T> getAddressList();

    /**
     * Physical address of the item.
     *
     * @return {@link Text} or {@link PostalAddress}
     */
    <T> T getAddress();

    /**
     * Physical address of the item.
     *
     * @param address Text value to set.
     */
    void addAddress(Text address);
    /**
     * Physical address of the item.
     *
     * @param address PostalAddress value to set.
     */
    void addAddress(PostalAddress address);

    /**
     * The geo coordinates of the place.
     *
     * @return {@link GeoCoordinates} or {@link GeoShape}
     */
    <T> List<T> getGeoList();

    /**
     * The geo coordinates of the place.
     *
     * @return {@link GeoCoordinates} or {@link GeoShape}
     */
    <T> T getGeo();

    /**
     * The geo coordinates of the place.
     *
     * @param geo GeoCoordinates value to set.
     */
    void addGeo(GeoCoordinates geo);
    /**
     * The geo coordinates of the place.
     *
     * @param geo GeoShape value to set.
     */
    void addGeo(GeoShape geo);

    /**
     * The opening hours of a certain place.
     *
     * @return {@link OpeningHoursSpecification}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    List<OpeningHoursSpecification> getOpeningHoursSpecificationList();

    /**
     * The opening hours of a certain place.
     *
     * @return {@link OpeningHoursSpecification}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    OpeningHoursSpecification getOpeningHoursSpecification();

    /**
     * The opening hours of a certain place.
     *
     * @param openingHoursSpecification OpeningHoursSpecification value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    void addOpeningHoursSpecification(OpeningHoursSpecification openingHoursSpecification);

    /**
     * Represents spatial relations in which two geometries (or the places they represent) are topologically disjoint: "they have no point in common. They form a set of disconnected geometries." (A symmetric relationship, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).)
     *
     * @return {@link GeospatialGeometry} or {@link Place}
     */
    <T> List<T> getGeoDisjointList();

    /**
     * Represents spatial relations in which two geometries (or the places they represent) are topologically disjoint: "they have no point in common. They form a set of disconnected geometries." (A symmetric relationship, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).)
     *
     * @return {@link GeospatialGeometry} or {@link Place}
     */
    <T> T getGeoDisjoint();

    /**
     * Represents spatial relations in which two geometries (or the places they represent) are topologically disjoint: "they have no point in common. They form a set of disconnected geometries." (A symmetric relationship, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).)
     *
     * @param geoDisjoint GeospatialGeometry value to set.
     */
    void addGeoDisjoint(GeospatialGeometry geoDisjoint);
    /**
     * Represents spatial relations in which two geometries (or the places they represent) are topologically disjoint: "they have no point in common. They form a set of disconnected geometries." (A symmetric relationship, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).)
     *
     * @param geoDisjoint Place value to set.
     */
    void addGeoDisjoint(Place geoDisjoint);

    /**
     * Represents spatial relations in which two geometries (or the places they represent) have at least one point in common. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
     *
     * @return {@link GeospatialGeometry} or {@link Place}
     */
    <T> List<T> getGeoIntersectsList();

    /**
     * Represents spatial relations in which two geometries (or the places they represent) have at least one point in common. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
     *
     * @return {@link GeospatialGeometry} or {@link Place}
     */
    <T> T getGeoIntersects();

    /**
     * Represents spatial relations in which two geometries (or the places they represent) have at least one point in common. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
     *
     * @param geoIntersects GeospatialGeometry value to set.
     */
    void addGeoIntersects(GeospatialGeometry geoIntersects);
    /**
     * Represents spatial relations in which two geometries (or the places they represent) have at least one point in common. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
     *
     * @param geoIntersects Place value to set.
     */
    void addGeoIntersects(Place geoIntersects);

    /**
     * The latitude of a location. For example ```37.42242``` ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).
     *
     * @return {@link Number} or {@link Text}
     */
    <T> List<T> getLatitudeList();

    /**
     * The latitude of a location. For example ```37.42242``` ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).
     *
     * @return {@link Number} or {@link Text}
     */
    <T> T getLatitude();

    /**
     * The latitude of a location. For example ```37.42242``` ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).
     *
     * @param latitude Number value to set.
     */
    void addLatitude(Number latitude);
    /**
     * The latitude of a location. For example ```37.42242``` ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).
     *
     * @param latitude Text value to set.
     */
    void addLatitude(Text latitude);

    /**
     * The total number of individuals that may attend an event or venue.
     *
     * @return {@link Integer}
     */
    List<Integer> getMaximumAttendeeCapacityList();

    /**
     * The total number of individuals that may attend an event or venue.
     *
     * @return {@link Integer}
     */
    Integer getMaximumAttendeeCapacity();

    /**
     * The total number of individuals that may attend an event or venue.
     *
     * @param maximumAttendeeCapacity Integer value to set.
     */
    void addMaximumAttendeeCapacity(Integer maximumAttendeeCapacity);

    /**
     * The overall rating, based on a collection of reviews or ratings, of the item.
     *
     * @return {@link AggregateRating}
     */
    List<AggregateRating> getAggregateRatingList();

    /**
     * The overall rating, based on a collection of reviews or ratings, of the item.
     *
     * @return {@link AggregateRating}
     */
    AggregateRating getAggregateRating();

    /**
     * The overall rating, based on a collection of reviews or ratings, of the item.
     *
     * @param aggregateRating AggregateRating value to set.
     */
    void addAggregateRating(AggregateRating aggregateRating);

    /**
     * A URL to a map of the place.
     *
     * @return {@link URL}
     */
    List<URL> getMapList();

    /**
     * A URL to a map of the place.
     *
     * @return {@link URL}
     */
    URL getMap();

    /**
     * A URL to a map of the place.
     *
     * @param map URL value to set.
     */
    void addMap(URL map);

    /**
     * A short textual code (also called "store code") that uniquely identifies a place of business. The code is typically assigned by the parentOrganization and used in structured URLs.<br/><br/>For example, in the URL http://www.starbucks.co.uk/store-locator/etc/detail/3047 the code "3047" is a branchCode for a particular branch.
     *       
     *
     * @return {@link Text}
     */
    List<Text> getBranchCodeList();

    /**
     * A short textual code (also called "store code") that uniquely identifies a place of business. The code is typically assigned by the parentOrganization and used in structured URLs.<br/><br/>For example, in the URL http://www.starbucks.co.uk/store-locator/etc/detail/3047 the code "3047" is a branchCode for a particular branch.
     *       
     *
     * @return {@link Text}
     */
    Text getBranchCode();

    /**
     * A short textual code (also called "store code") that uniquely identifies a place of business. The code is typically assigned by the parentOrganization and used in structured URLs.<br/><br/>For example, in the URL http://www.starbucks.co.uk/store-locator/etc/detail/3047 the code "3047" is a branchCode for a particular branch.
     *       
     *
     * @param branchCode Text value to set.
     */
    void addBranchCode(Text branchCode);

    /**
     * The fax number.
     *
     * @return {@link Text}
     */
    List<Text> getFaxNumberList();

    /**
     * The fax number.
     *
     * @return {@link Text}
     */
    Text getFaxNumber();

    /**
     * The fax number.
     *
     * @param faxNumber Text value to set.
     */
    void addFaxNumber(Text faxNumber);

    /**
     * A flag to signal that the [[Place]] is open to public visitors.  If this property is omitted there is no assumed default boolean value
     *
     * @return {@link Boolean}
     */
    List<Boolean> getPublicAccessList();

    /**
     * A flag to signal that the [[Place]] is open to public visitors.  If this property is omitted there is no assumed default boolean value
     *
     * @return {@link Boolean}
     */
    Boolean getPublicAccess();

    /**
     * A flag to signal that the [[Place]] is open to public visitors.  If this property is omitted there is no assumed default boolean value
     *
     * @param publicAccess Boolean value to set.
     */
    void addPublicAccess(Boolean publicAccess);

    /**
     * Represents spatial relations in which two geometries (or the places they represent) touch: "they have at least one boundary point in common, but no interior points." (A symmetric relationship, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).)
     *
     * @return {@link GeospatialGeometry} or {@link Place}
     */
    <T> List<T> getGeoTouchesList();

    /**
     * Represents spatial relations in which two geometries (or the places they represent) touch: "they have at least one boundary point in common, but no interior points." (A symmetric relationship, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).)
     *
     * @return {@link GeospatialGeometry} or {@link Place}
     */
    <T> T getGeoTouches();

    /**
     * Represents spatial relations in which two geometries (or the places they represent) touch: "they have at least one boundary point in common, but no interior points." (A symmetric relationship, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).)
     *
     * @param geoTouches GeospatialGeometry value to set.
     */
    void addGeoTouches(GeospatialGeometry geoTouches);
    /**
     * Represents spatial relations in which two geometries (or the places they represent) touch: "they have at least one boundary point in common, but no interior points." (A symmetric relationship, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).)
     *
     * @param geoTouches Place value to set.
     */
    void addGeoTouches(Place geoTouches);

    /**
     * Represents a relationship between two geometries (or the places they represent), relating a geometry to another that covers it. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
     *
     * @return {@link GeospatialGeometry} or {@link Place}
     */
    <T> List<T> getGeoCoveredByList();

    /**
     * Represents a relationship between two geometries (or the places they represent), relating a geometry to another that covers it. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
     *
     * @return {@link GeospatialGeometry} or {@link Place}
     */
    <T> T getGeoCoveredBy();

    /**
     * Represents a relationship between two geometries (or the places they represent), relating a geometry to another that covers it. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
     *
     * @param geoCoveredBy GeospatialGeometry value to set.
     */
    void addGeoCoveredBy(GeospatialGeometry geoCoveredBy);
    /**
     * Represents a relationship between two geometries (or the places they represent), relating a geometry to another that covers it. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
     *
     * @param geoCoveredBy Place value to set.
     */
    void addGeoCoveredBy(Place geoCoveredBy);

    /**
     * The telephone number.
     *
     * @return {@link Text}
     */
    List<Text> getTelephoneList();

    /**
     * The telephone number.
     *
     * @return {@link Text}
     */
    Text getTelephone();

    /**
     * The telephone number.
     *
     * @param telephone Text value to set.
     */
    void addTelephone(Text telephone);

    /**
     * Indicates whether some facility (e.g. [[FoodEstablishment]], [[CovidTestingFacility]]) offers a service that can be used by driving through in a car. In the case of [[CovidTestingFacility]] such facilities could potentially help with social distancing from other potentially-infected users.
     *
     * @return {@link Boolean}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     */
    List<Boolean> getHasDriveThroughServiceList();

    /**
     * Indicates whether some facility (e.g. [[FoodEstablishment]], [[CovidTestingFacility]]) offers a service that can be used by driving through in a car. In the case of [[CovidTestingFacility]] such facilities could potentially help with social distancing from other potentially-infected users.
     *
     * @return {@link Boolean}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     */
    Boolean getHasDriveThroughService();

    /**
     * Indicates whether some facility (e.g. [[FoodEstablishment]], [[CovidTestingFacility]]) offers a service that can be used by driving through in a car. In the case of [[CovidTestingFacility]] such facilities could potentially help with social distancing from other potentially-infected users.
     *
     * @param hasDriveThroughService Boolean value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     */
    void addHasDriveThroughService(Boolean hasDriveThroughService);

    /**
     * The special opening hours of a certain place.<br/><br/>Use this to explicitly override general opening hours brought in scope by [[openingHoursSpecification]] or [[openingHours]].
     *       
     *
     * @return {@link OpeningHoursSpecification}
     */
    List<OpeningHoursSpecification> getSpecialOpeningHoursSpecificationList();

    /**
     * The special opening hours of a certain place.<br/><br/>Use this to explicitly override general opening hours brought in scope by [[openingHoursSpecification]] or [[openingHours]].
     *       
     *
     * @return {@link OpeningHoursSpecification}
     */
    OpeningHoursSpecification getSpecialOpeningHoursSpecification();

    /**
     * The special opening hours of a certain place.<br/><br/>Use this to explicitly override general opening hours brought in scope by [[openingHoursSpecification]] or [[openingHours]].
     *       
     *
     * @param specialOpeningHoursSpecification OpeningHoursSpecification value to set.
     */
    void addSpecialOpeningHoursSpecification(OpeningHoursSpecification specialOpeningHoursSpecification);

    /**
     * Represents a relationship between two geometries (or the places they represent), relating a containing geometry to a contained geometry. "a contains b iff no points of b lie in the exterior of a, and at least one point of the interior of b lies in the interior of a". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
     *
     * @return {@link Place} or {@link GeospatialGeometry}
     */
    <T> List<T> getGeoContainsList();

    /**
     * Represents a relationship between two geometries (or the places they represent), relating a containing geometry to a contained geometry. "a contains b iff no points of b lie in the exterior of a, and at least one point of the interior of b lies in the interior of a". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
     *
     * @return {@link Place} or {@link GeospatialGeometry}
     */
    <T> T getGeoContains();

    /**
     * Represents a relationship between two geometries (or the places they represent), relating a containing geometry to a contained geometry. "a contains b iff no points of b lie in the exterior of a, and at least one point of the interior of b lies in the interior of a". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
     *
     * @param geoContains Place value to set.
     */
    void addGeoContains(Place geoContains);
    /**
     * Represents a relationship between two geometries (or the places they represent), relating a containing geometry to a contained geometry. "a contains b iff no points of b lie in the exterior of a, and at least one point of the interior of b lies in the interior of a". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
     *
     * @param geoContains GeospatialGeometry value to set.
     */
    void addGeoContains(GeospatialGeometry geoContains);
}
