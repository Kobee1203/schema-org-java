/*
 * This class is auto generated by the schema.org code generator program.
 * https://github.com/Kobee1203/schema-org-java
 * Do not edit the class manually.
 */
package org.schema.model.impl;

import org.schema.model.QualitativeValue;
import org.schema.model.datatype.Text;
import org.schema.model.datatype.DateTime;
import org.schema.model.datatype.Time;
import org.schema.model.datatype.Integer;
import org.schema.model.QuantitativeValue;
import org.schema.model.PriceSpecification;
import org.schema.model.datatype.Number;
import org.schema.model.Ticket;
import org.schema.model.ReservationStatusType;
import org.schema.model.Organization;
import org.schema.model.Person;
import org.schema.model.ProgramMembership;
import org.schema.model.Thing;
import org.schema.model.CreativeWork;
import org.schema.model.datatype.URL;
import org.schema.model.Action;
import org.schema.model.ImageObject;
import org.schema.model.Event;
import org.schema.model.PropertyValue;
import com.weedow.schemaorg.commons.model.JsonLdTypeName;
import org.schema.model.Intangible;
import org.schema.model.Reservation;
import org.schema.model.LodgingReservation;

/**
 * A reservation for lodging at a hotel, motel, inn, etc.<br/><br/>Note: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations.
 *
 * @see <a href="https://schema.org/LodgingReservation">https://schema.org/LodgingReservation</a>
 */
@JsonLdTypeName("LodgingReservation")
public class LodgingReservationImpl extends com.weedow.schemaorg.commons.model.JsonLdNodeImpl implements LodgingReservation {

    private Object lodgingUnitType;

    /**
     * Textual description of the unit type (including suite vs. room, size of bed, etc.).
     *
     * @return {@link QualitativeValue} or {@link Text}
     */
    @Override
    public <T> T getLodgingUnitType() {
        return (T) lodgingUnitType;
    }

    /**
     * Textual description of the unit type (including suite vs. room, size of bed, etc.).
     *
     * @param lodgingUnitType QualitativeValue value to set.
     */
    @Override
    public void setLodgingUnitType(QualitativeValue lodgingUnitType) {
        this.lodgingUnitType = lodgingUnitType;
    }
    /**
     * Textual description of the unit type (including suite vs. room, size of bed, etc.).
     *
     * @param lodgingUnitType Text value to set.
     */
    @Override
    public void setLodgingUnitType(Text lodgingUnitType) {
        this.lodgingUnitType = lodgingUnitType;
    }

    private Text lodgingUnitDescription;

    /**
     * A full description of the lodging unit.
     *
     * @return {@link Text}
     */
    @Override
    public Text getLodgingUnitDescription() {
        return lodgingUnitDescription;
    }

    /**
     * A full description of the lodging unit.
     *
     * @param lodgingUnitDescription Text value to set.
     */
    @Override
    public void setLodgingUnitDescription(Text lodgingUnitDescription) {
        this.lodgingUnitDescription = lodgingUnitDescription;
    }

    private Object checkoutTime;

    /**
     * The latest someone may check out of a lodging establishment.
     *
     * @return {@link DateTime} or {@link Time}
     */
    @Override
    public <T> T getCheckoutTime() {
        return (T) checkoutTime;
    }

    /**
     * The latest someone may check out of a lodging establishment.
     *
     * @param checkoutTime DateTime value to set.
     */
    @Override
    public void setCheckoutTime(DateTime checkoutTime) {
        this.checkoutTime = checkoutTime;
    }
    /**
     * The latest someone may check out of a lodging establishment.
     *
     * @param checkoutTime Time value to set.
     */
    @Override
    public void setCheckoutTime(Time checkoutTime) {
        this.checkoutTime = checkoutTime;
    }

    private Object numAdults;

    /**
     * The number of adults staying in the unit.
     *
     * @return {@link Integer} or {@link QuantitativeValue}
     */
    @Override
    public <T> T getNumAdults() {
        return (T) numAdults;
    }

    /**
     * The number of adults staying in the unit.
     *
     * @param numAdults Integer value to set.
     */
    @Override
    public void setNumAdults(Integer numAdults) {
        this.numAdults = numAdults;
    }
    /**
     * The number of adults staying in the unit.
     *
     * @param numAdults QuantitativeValue value to set.
     */
    @Override
    public void setNumAdults(QuantitativeValue numAdults) {
        this.numAdults = numAdults;
    }

    private Object checkinTime;

    /**
     * The earliest someone may check into a lodging establishment.
     *
     * @return {@link DateTime} or {@link Time}
     */
    @Override
    public <T> T getCheckinTime() {
        return (T) checkinTime;
    }

    /**
     * The earliest someone may check into a lodging establishment.
     *
     * @param checkinTime DateTime value to set.
     */
    @Override
    public void setCheckinTime(DateTime checkinTime) {
        this.checkinTime = checkinTime;
    }
    /**
     * The earliest someone may check into a lodging establishment.
     *
     * @param checkinTime Time value to set.
     */
    @Override
    public void setCheckinTime(Time checkinTime) {
        this.checkinTime = checkinTime;
    }

    private Object numChildren;

    /**
     * The number of children staying in the unit.
     *
     * @return {@link Integer} or {@link QuantitativeValue}
     */
    @Override
    public <T> T getNumChildren() {
        return (T) numChildren;
    }

    /**
     * The number of children staying in the unit.
     *
     * @param numChildren Integer value to set.
     */
    @Override
    public void setNumChildren(Integer numChildren) {
        this.numChildren = numChildren;
    }
    /**
     * The number of children staying in the unit.
     *
     * @param numChildren QuantitativeValue value to set.
     */
    @Override
    public void setNumChildren(QuantitativeValue numChildren) {
        this.numChildren = numChildren;
    }

    private DateTime modifiedTime;

    /**
     * The date and time the reservation was modified.
     *
     * @return {@link DateTime}
     */
    @Override
    public DateTime getModifiedTime() {
        return modifiedTime;
    }

    /**
     * The date and time the reservation was modified.
     *
     * @param modifiedTime DateTime value to set.
     */
    @Override
    public void setModifiedTime(DateTime modifiedTime) {
        this.modifiedTime = modifiedTime;
    }

    private Object totalPrice;

    /**
     * The total price for the reservation or ticket, including applicable taxes, shipping, etc.<br/><br/>Usage guidelines:<br/><br/>* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.<br/>* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
     *
     * @return {@link PriceSpecification} or {@link Number} or {@link Text}
     */
    @Override
    public <T> T getTotalPrice() {
        return (T) totalPrice;
    }

    /**
     * The total price for the reservation or ticket, including applicable taxes, shipping, etc.<br/><br/>Usage guidelines:<br/><br/>* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.<br/>* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
     *
     * @param totalPrice PriceSpecification value to set.
     */
    @Override
    public void setTotalPrice(PriceSpecification totalPrice) {
        this.totalPrice = totalPrice;
    }
    /**
     * The total price for the reservation or ticket, including applicable taxes, shipping, etc.<br/><br/>Usage guidelines:<br/><br/>* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.<br/>* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
     *
     * @param totalPrice Number value to set.
     */
    @Override
    public void setTotalPrice(Number totalPrice) {
        this.totalPrice = totalPrice;
    }
    /**
     * The total price for the reservation or ticket, including applicable taxes, shipping, etc.<br/><br/>Usage guidelines:<br/><br/>* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.<br/>* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
     *
     * @param totalPrice Text value to set.
     */
    @Override
    public void setTotalPrice(Text totalPrice) {
        this.totalPrice = totalPrice;
    }

    private Ticket reservedTicket;

    /**
     * A ticket associated with the reservation.
     *
     * @return {@link Ticket}
     */
    @Override
    public Ticket getReservedTicket() {
        return reservedTicket;
    }

    /**
     * A ticket associated with the reservation.
     *
     * @param reservedTicket Ticket value to set.
     */
    @Override
    public void setReservedTicket(Ticket reservedTicket) {
        this.reservedTicket = reservedTicket;
    }

    private ReservationStatusType reservationStatus;

    /**
     * The current status of the reservation.
     *
     * @return {@link ReservationStatusType}
     */
    @Override
    public ReservationStatusType getReservationStatus() {
        return reservationStatus;
    }

    /**
     * The current status of the reservation.
     *
     * @param reservationStatus ReservationStatusType value to set.
     */
    @Override
    public void setReservationStatus(ReservationStatusType reservationStatus) {
        this.reservationStatus = reservationStatus;
    }

    private Object provider;

    /**
     * The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
     *
     * @return {@link Organization} or {@link Person}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2927">https://github.com/schemaorg/schemaorg/issues/2927</a>
     */
    @Override
    public <T> T getProvider() {
        return (T) provider;
    }

    /**
     * The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
     *
     * @param provider Organization value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2927">https://github.com/schemaorg/schemaorg/issues/2927</a>
     */
    @Override
    public void setProvider(Organization provider) {
        this.provider = provider;
    }
    /**
     * The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
     *
     * @param provider Person value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2927">https://github.com/schemaorg/schemaorg/issues/2927</a>
     */
    @Override
    public void setProvider(Person provider) {
        this.provider = provider;
    }

    private Object broker;

    /**
     * An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
     *
     * @return {@link Person} or {@link Organization}
     */
    @Override
    public <T> T getBroker() {
        return (T) broker;
    }

    /**
     * An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
     *
     * @param broker Person value to set.
     */
    @Override
    public void setBroker(Person broker) {
        this.broker = broker;
    }
    /**
     * An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
     *
     * @param broker Organization value to set.
     */
    @Override
    public void setBroker(Organization broker) {
        this.broker = broker;
    }

    private DateTime bookingTime;

    /**
     * The date and time the reservation was booked.
     *
     * @return {@link DateTime}
     */
    @Override
    public DateTime getBookingTime() {
        return bookingTime;
    }

    /**
     * The date and time the reservation was booked.
     *
     * @param bookingTime DateTime value to set.
     */
    @Override
    public void setBookingTime(DateTime bookingTime) {
        this.bookingTime = bookingTime;
    }

    private ProgramMembership programMembershipUsed;

    /**
     * Any membership in a frequent flyer, hotel loyalty program, etc. being applied to the reservation.
     *
     * @return {@link ProgramMembership}
     */
    @Override
    public ProgramMembership getProgramMembershipUsed() {
        return programMembershipUsed;
    }

    /**
     * Any membership in a frequent flyer, hotel loyalty program, etc. being applied to the reservation.
     *
     * @param programMembershipUsed ProgramMembership value to set.
     */
    @Override
    public void setProgramMembershipUsed(ProgramMembership programMembershipUsed) {
        this.programMembershipUsed = programMembershipUsed;
    }

    private Object bookingAgent;

    /**
     * 'bookingAgent' is an out-dated term indicating a 'broker' that serves as a booking agent.
     *
     * @return {@link Person} or {@link Organization}
     */
    @Override
    public <T> T getBookingAgent() {
        return (T) bookingAgent;
    }

    /**
     * 'bookingAgent' is an out-dated term indicating a 'broker' that serves as a booking agent.
     *
     * @param bookingAgent Person value to set.
     */
    @Override
    public void setBookingAgent(Person bookingAgent) {
        this.bookingAgent = bookingAgent;
    }
    /**
     * 'bookingAgent' is an out-dated term indicating a 'broker' that serves as a booking agent.
     *
     * @param bookingAgent Organization value to set.
     */
    @Override
    public void setBookingAgent(Organization bookingAgent) {
        this.bookingAgent = bookingAgent;
    }

    private Text priceCurrency;

    /**
     * The currency of the price, or a price component when attached to [[PriceSpecification]] and its subtypes.<br/><br/>Use standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
     *
     * @return {@link Text}
     */
    @Override
    public Text getPriceCurrency() {
        return priceCurrency;
    }

    /**
     * The currency of the price, or a price component when attached to [[PriceSpecification]] and its subtypes.<br/><br/>Use standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
     *
     * @param priceCurrency Text value to set.
     */
    @Override
    public void setPriceCurrency(Text priceCurrency) {
        this.priceCurrency = priceCurrency;
    }

    private Text reservationId;

    /**
     * A unique identifier for the reservation.
     *
     * @return {@link Text}
     */
    @Override
    public Text getReservationId() {
        return reservationId;
    }

    /**
     * A unique identifier for the reservation.
     *
     * @param reservationId Text value to set.
     */
    @Override
    public void setReservationId(Text reservationId) {
        this.reservationId = reservationId;
    }

    private Object underName;

    /**
     * The person or organization the reservation or ticket is for.
     *
     * @return {@link Organization} or {@link Person}
     */
    @Override
    public <T> T getUnderName() {
        return (T) underName;
    }

    /**
     * The person or organization the reservation or ticket is for.
     *
     * @param underName Organization value to set.
     */
    @Override
    public void setUnderName(Organization underName) {
        this.underName = underName;
    }
    /**
     * The person or organization the reservation or ticket is for.
     *
     * @param underName Person value to set.
     */
    @Override
    public void setUnderName(Person underName) {
        this.underName = underName;
    }

    private Thing reservationFor;

    /**
     * The thing -- flight, event, restaurant,etc. being reserved.
     *
     * @return {@link Thing}
     */
    @Override
    public Thing getReservationFor() {
        return reservationFor;
    }

    /**
     * The thing -- flight, event, restaurant,etc. being reserved.
     *
     * @param reservationFor Thing value to set.
     */
    @Override
    public void setReservationFor(Thing reservationFor) {
        this.reservationFor = reservationFor;
    }

    private Object mainEntityOfPage;

    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     * @return {@link CreativeWork} or {@link URL}
     */
    @Override
    public <T> T getMainEntityOfPage() {
        return (T) mainEntityOfPage;
    }

    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     * @param mainEntityOfPage CreativeWork value to set.
     */
    @Override
    public void setMainEntityOfPage(CreativeWork mainEntityOfPage) {
        this.mainEntityOfPage = mainEntityOfPage;
    }
    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     * @param mainEntityOfPage URL value to set.
     */
    @Override
    public void setMainEntityOfPage(URL mainEntityOfPage) {
        this.mainEntityOfPage = mainEntityOfPage;
    }

    private Text alternateName;

    /**
     * An alias for the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getAlternateName() {
        return alternateName;
    }

    /**
     * An alias for the item.
     *
     * @param alternateName Text value to set.
     */
    @Override
    public void setAlternateName(Text alternateName) {
        this.alternateName = alternateName;
    }

    private Text name;

    /**
     * The name of the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getName() {
        return name;
    }

    /**
     * The name of the item.
     *
     * @param name Text value to set.
     */
    @Override
    public void setName(Text name) {
        this.name = name;
    }

    private Action potentialAction;

    /**
     * Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
     *
     * @return {@link Action}
     */
    @Override
    public Action getPotentialAction() {
        return potentialAction;
    }

    /**
     * Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
     *
     * @param potentialAction Action value to set.
     */
    @Override
    public void setPotentialAction(Action potentialAction) {
        this.potentialAction = potentialAction;
    }

    private Object image;

    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * @return {@link URL} or {@link ImageObject}
     */
    @Override
    public <T> T getImage() {
        return (T) image;
    }

    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * @param image URL value to set.
     */
    @Override
    public void setImage(URL image) {
        this.image = image;
    }
    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * @param image ImageObject value to set.
     */
    @Override
    public void setImage(ImageObject image) {
        this.image = image;
    }

    private URL url;

    /**
     * URL of the item.
     *
     * @return {@link URL}
     */
    @Override
    public URL getUrl() {
        return url;
    }

    /**
     * URL of the item.
     *
     * @param url URL value to set.
     */
    @Override
    public void setUrl(URL url) {
        this.url = url;
    }

    private Text description;

    /**
     * A description of the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getDescription() {
        return description;
    }

    /**
     * A description of the item.
     *
     * @param description Text value to set.
     */
    @Override
    public void setDescription(Text description) {
        this.description = description;
    }

    private Object subjectOf;

    /**
     * A CreativeWork or Event about this Thing.
     *
     * @return {@link Event} or {@link CreativeWork}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public <T> T getSubjectOf() {
        return (T) subjectOf;
    }

    /**
     * A CreativeWork or Event about this Thing.
     *
     * @param subjectOf Event value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public void setSubjectOf(Event subjectOf) {
        this.subjectOf = subjectOf;
    }
    /**
     * A CreativeWork or Event about this Thing.
     *
     * @param subjectOf CreativeWork value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public void setSubjectOf(CreativeWork subjectOf) {
        this.subjectOf = subjectOf;
    }

    private URL additionalType;

    /**
     * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
     *
     * @return {@link URL}
     */
    @Override
    public URL getAdditionalType() {
        return additionalType;
    }

    /**
     * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
     *
     * @param additionalType URL value to set.
     */
    @Override
    public void setAdditionalType(URL additionalType) {
        this.additionalType = additionalType;
    }

    private Text disambiguatingDescription;

    /**
     * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
     *
     * @return {@link Text}
     */
    @Override
    public Text getDisambiguatingDescription() {
        return disambiguatingDescription;
    }

    /**
     * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
     *
     * @param disambiguatingDescription Text value to set.
     */
    @Override
    public void setDisambiguatingDescription(Text disambiguatingDescription) {
        this.disambiguatingDescription = disambiguatingDescription;
    }

    private URL sameAs;

    /**
     * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
     *
     * @return {@link URL}
     */
    @Override
    public URL getSameAs() {
        return sameAs;
    }

    /**
     * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
     *
     * @param sameAs URL value to set.
     */
    @Override
    public void setSameAs(URL sameAs) {
        this.sameAs = sameAs;
    }

    private Object identifier;

    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @return {@link URL} or {@link Text} or {@link PropertyValue}
     */
    @Override
    public <T> T getIdentifier() {
        return (T) identifier;
    }

    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @param identifier URL value to set.
     */
    @Override
    public void setIdentifier(URL identifier) {
        this.identifier = identifier;
    }
    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @param identifier Text value to set.
     */
    @Override
    public void setIdentifier(Text identifier) {
        this.identifier = identifier;
    }
    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @param identifier PropertyValue value to set.
     */
    @Override
    public void setIdentifier(PropertyValue identifier) {
        this.identifier = identifier;
    }
}
