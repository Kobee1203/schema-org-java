/*
 * This class is auto generated by the schema.org code generator program.
 * https://github.com/Kobee1203/schema-org-java
 * Do not edit the class manually.
 */
package org.schema.model.impl;

import org.schema.model.ParcelDelivery;
import org.schema.model.PostalAddress;
import org.schema.model.Offer;
import org.schema.model.Organization;
import org.schema.model.Person;
import org.schema.model.OrderStatus;
import org.schema.model.datatype.Text;
import org.schema.model.Invoice;
import org.schema.model.datatype.DateTime;
import org.schema.model.datatype.Date;
import org.schema.model.datatype.Number;
import org.schema.model.datatype.URL;
import org.schema.model.datatype.Boolean;
import org.schema.model.Service;
import org.schema.model.OrderItem;
import org.schema.model.Product;
import org.schema.model.PaymentMethod;
import org.schema.model.CreativeWork;
import org.schema.model.Action;
import org.schema.model.ImageObject;
import org.schema.model.Event;
import org.schema.model.PropertyValue;
import org.schema.model.Thing;
import com.weedow.schemaorg.commons.model.JsonLdTypeName;
import org.schema.model.Intangible;
import org.schema.model.Order;

/**
 * An order is a confirmation of a transaction (a receipt), which can contain multiple line items, each represented by an Offer that has been accepted by the customer.
 *
 * @see <a href="https://schema.org/Order">https://schema.org/Order</a>
 */
@JsonLdTypeName("Order")
public class OrderImpl extends com.weedow.schemaorg.commons.model.JsonLdNodeImpl implements Order {

    private ParcelDelivery orderDelivery;

    /**
     * The delivery of the parcel related to this order or order item.
     *
     * @return {@link ParcelDelivery}
     */
    @Override
    public ParcelDelivery getOrderDelivery() {
        return orderDelivery;
    }

    /**
     * The delivery of the parcel related to this order or order item.
     *
     * @param orderDelivery ParcelDelivery value to set.
     */
    @Override
    public void setOrderDelivery(ParcelDelivery orderDelivery) {
        this.orderDelivery = orderDelivery;
    }

    private PostalAddress billingAddress;

    /**
     * The billing address for the order.
     *
     * @return {@link PostalAddress}
     */
    @Override
    public PostalAddress getBillingAddress() {
        return billingAddress;
    }

    /**
     * The billing address for the order.
     *
     * @param billingAddress PostalAddress value to set.
     */
    @Override
    public void setBillingAddress(PostalAddress billingAddress) {
        this.billingAddress = billingAddress;
    }

    private Offer acceptedOffer;

    /**
     * The offer(s) -- e.g., product, quantity and price combinations -- included in the order.
     *
     * @return {@link Offer}
     */
    @Override
    public Offer getAcceptedOffer() {
        return acceptedOffer;
    }

    /**
     * The offer(s) -- e.g., product, quantity and price combinations -- included in the order.
     *
     * @param acceptedOffer Offer value to set.
     */
    @Override
    public void setAcceptedOffer(Offer acceptedOffer) {
        this.acceptedOffer = acceptedOffer;
    }

    private Object merchant;

    /**
     * 'merchant' is an out-dated term for 'seller'.
     *
     * @return {@link Organization} or {@link Person}
     */
    @Override
    public <T> T getMerchant() {
        return (T) merchant;
    }

    /**
     * 'merchant' is an out-dated term for 'seller'.
     *
     * @param merchant Organization value to set.
     */
    @Override
    public void setMerchant(Organization merchant) {
        this.merchant = merchant;
    }
    /**
     * 'merchant' is an out-dated term for 'seller'.
     *
     * @param merchant Person value to set.
     */
    @Override
    public void setMerchant(Person merchant) {
        this.merchant = merchant;
    }

    private OrderStatus orderStatus;

    /**
     * The current status of the order.
     *
     * @return {@link OrderStatus}
     */
    @Override
    public OrderStatus getOrderStatus() {
        return orderStatus;
    }

    /**
     * The current status of the order.
     *
     * @param orderStatus OrderStatus value to set.
     */
    @Override
    public void setOrderStatus(OrderStatus orderStatus) {
        this.orderStatus = orderStatus;
    }

    private Text confirmationNumber;

    /**
     * A number that confirms the given order or payment has been received.
     *
     * @return {@link Text}
     */
    @Override
    public Text getConfirmationNumber() {
        return confirmationNumber;
    }

    /**
     * A number that confirms the given order or payment has been received.
     *
     * @param confirmationNumber Text value to set.
     */
    @Override
    public void setConfirmationNumber(Text confirmationNumber) {
        this.confirmationNumber = confirmationNumber;
    }

    private Invoice partOfInvoice;

    /**
     * The order is being paid as part of the referenced Invoice.
     *
     * @return {@link Invoice}
     */
    @Override
    public Invoice getPartOfInvoice() {
        return partOfInvoice;
    }

    /**
     * The order is being paid as part of the referenced Invoice.
     *
     * @param partOfInvoice Invoice value to set.
     */
    @Override
    public void setPartOfInvoice(Invoice partOfInvoice) {
        this.partOfInvoice = partOfInvoice;
    }

    private Text orderNumber;

    /**
     * The identifier of the transaction.
     *
     * @return {@link Text}
     */
    @Override
    public Text getOrderNumber() {
        return orderNumber;
    }

    /**
     * The identifier of the transaction.
     *
     * @param orderNumber Text value to set.
     */
    @Override
    public void setOrderNumber(Text orderNumber) {
        this.orderNumber = orderNumber;
    }

    private Object seller;

    /**
     * An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider.
     *
     * @return {@link Organization} or {@link Person}
     */
    @Override
    public <T> T getSeller() {
        return (T) seller;
    }

    /**
     * An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider.
     *
     * @param seller Organization value to set.
     */
    @Override
    public void setSeller(Organization seller) {
        this.seller = seller;
    }
    /**
     * An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider.
     *
     * @param seller Person value to set.
     */
    @Override
    public void setSeller(Person seller) {
        this.seller = seller;
    }

    private Object customer;

    /**
     * Party placing the order or paying the invoice.
     *
     * @return {@link Organization} or {@link Person}
     */
    @Override
    public <T> T getCustomer() {
        return (T) customer;
    }

    /**
     * Party placing the order or paying the invoice.
     *
     * @param customer Organization value to set.
     */
    @Override
    public void setCustomer(Organization customer) {
        this.customer = customer;
    }
    /**
     * Party placing the order or paying the invoice.
     *
     * @param customer Person value to set.
     */
    @Override
    public void setCustomer(Person customer) {
        this.customer = customer;
    }

    private Object paymentDueDate;

    /**
     * The date that payment is due.
     *
     * @return {@link DateTime} or {@link Date}
     */
    @Override
    public <T> T getPaymentDueDate() {
        return (T) paymentDueDate;
    }

    /**
     * The date that payment is due.
     *
     * @param paymentDueDate DateTime value to set.
     */
    @Override
    public void setPaymentDueDate(DateTime paymentDueDate) {
        this.paymentDueDate = paymentDueDate;
    }
    /**
     * The date that payment is due.
     *
     * @param paymentDueDate Date value to set.
     */
    @Override
    public void setPaymentDueDate(Date paymentDueDate) {
        this.paymentDueDate = paymentDueDate;
    }

    private Object broker;

    /**
     * An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
     *
     * @return {@link Person} or {@link Organization}
     */
    @Override
    public <T> T getBroker() {
        return (T) broker;
    }

    /**
     * An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
     *
     * @param broker Person value to set.
     */
    @Override
    public void setBroker(Person broker) {
        this.broker = broker;
    }
    /**
     * An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
     *
     * @param broker Organization value to set.
     */
    @Override
    public void setBroker(Organization broker) {
        this.broker = broker;
    }

    private Text discountCode;

    /**
     * Code used to redeem a discount.
     *
     * @return {@link Text}
     */
    @Override
    public Text getDiscountCode() {
        return discountCode;
    }

    /**
     * Code used to redeem a discount.
     *
     * @param discountCode Text value to set.
     */
    @Override
    public void setDiscountCode(Text discountCode) {
        this.discountCode = discountCode;
    }

    private Object discount;

    /**
     * Any discount applied (to an Order).
     *
     * @return {@link Text} or {@link Number}
     */
    @Override
    public <T> T getDiscount() {
        return (T) discount;
    }

    /**
     * Any discount applied (to an Order).
     *
     * @param discount Text value to set.
     */
    @Override
    public void setDiscount(Text discount) {
        this.discount = discount;
    }
    /**
     * Any discount applied (to an Order).
     *
     * @param discount Number value to set.
     */
    @Override
    public void setDiscount(Number discount) {
        this.discount = discount;
    }

    private Text paymentMethodId;

    /**
     * An identifier for the method of payment used (e.g. the last 4 digits of the credit card).
     *
     * @return {@link Text}
     */
    @Override
    public Text getPaymentMethodId() {
        return paymentMethodId;
    }

    /**
     * An identifier for the method of payment used (e.g. the last 4 digits of the credit card).
     *
     * @param paymentMethodId Text value to set.
     */
    @Override
    public void setPaymentMethodId(Text paymentMethodId) {
        this.paymentMethodId = paymentMethodId;
    }

    private URL paymentUrl;

    /**
     * The URL for sending a payment.
     *
     * @return {@link URL}
     */
    @Override
    public URL getPaymentUrl() {
        return paymentUrl;
    }

    /**
     * The URL for sending a payment.
     *
     * @param paymentUrl URL value to set.
     */
    @Override
    public void setPaymentUrl(URL paymentUrl) {
        this.paymentUrl = paymentUrl;
    }

    private Text discountCurrency;

    /**
     * The currency of the discount.<br/><br/>Use standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
     *
     * @return {@link Text}
     */
    @Override
    public Text getDiscountCurrency() {
        return discountCurrency;
    }

    /**
     * The currency of the discount.<br/><br/>Use standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
     *
     * @param discountCurrency Text value to set.
     */
    @Override
    public void setDiscountCurrency(Text discountCurrency) {
        this.discountCurrency = discountCurrency;
    }

    private DateTime paymentDue;

    /**
     * The date that payment is due.
     *
     * @return {@link DateTime}
     */
    @Override
    public DateTime getPaymentDue() {
        return paymentDue;
    }

    /**
     * The date that payment is due.
     *
     * @param paymentDue DateTime value to set.
     */
    @Override
    public void setPaymentDue(DateTime paymentDue) {
        this.paymentDue = paymentDue;
    }

    private Object orderDate;

    /**
     * Date order was placed.
     *
     * @return {@link Date} or {@link DateTime}
     */
    @Override
    public <T> T getOrderDate() {
        return (T) orderDate;
    }

    /**
     * Date order was placed.
     *
     * @param orderDate Date value to set.
     */
    @Override
    public void setOrderDate(Date orderDate) {
        this.orderDate = orderDate;
    }
    /**
     * Date order was placed.
     *
     * @param orderDate DateTime value to set.
     */
    @Override
    public void setOrderDate(DateTime orderDate) {
        this.orderDate = orderDate;
    }

    private Boolean isGift;

    /**
     * Was the offer accepted as a gift for someone other than the buyer.
     *
     * @return {@link Boolean}
     */
    @Override
    public Boolean getIsGift() {
        return isGift;
    }

    /**
     * Was the offer accepted as a gift for someone other than the buyer.
     *
     * @param isGift Boolean value to set.
     */
    @Override
    public void setIsGift(Boolean isGift) {
        this.isGift = isGift;
    }

    private Object orderedItem;

    /**
     * The item ordered.
     *
     * @return {@link Service} or {@link OrderItem} or {@link Product}
     */
    @Override
    public <T> T getOrderedItem() {
        return (T) orderedItem;
    }

    /**
     * The item ordered.
     *
     * @param orderedItem Service value to set.
     */
    @Override
    public void setOrderedItem(Service orderedItem) {
        this.orderedItem = orderedItem;
    }
    /**
     * The item ordered.
     *
     * @param orderedItem OrderItem value to set.
     */
    @Override
    public void setOrderedItem(OrderItem orderedItem) {
        this.orderedItem = orderedItem;
    }
    /**
     * The item ordered.
     *
     * @param orderedItem Product value to set.
     */
    @Override
    public void setOrderedItem(Product orderedItem) {
        this.orderedItem = orderedItem;
    }

    private PaymentMethod paymentMethod;

    /**
     * The name of the credit card or other method of payment for the order.
     *
     * @return {@link PaymentMethod}
     */
    @Override
    public PaymentMethod getPaymentMethod() {
        return paymentMethod;
    }

    /**
     * The name of the credit card or other method of payment for the order.
     *
     * @param paymentMethod PaymentMethod value to set.
     */
    @Override
    public void setPaymentMethod(PaymentMethod paymentMethod) {
        this.paymentMethod = paymentMethod;
    }

    private Object mainEntityOfPage;

    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     * @return {@link CreativeWork} or {@link URL}
     */
    @Override
    public <T> T getMainEntityOfPage() {
        return (T) mainEntityOfPage;
    }

    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     * @param mainEntityOfPage CreativeWork value to set.
     */
    @Override
    public void setMainEntityOfPage(CreativeWork mainEntityOfPage) {
        this.mainEntityOfPage = mainEntityOfPage;
    }
    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     * @param mainEntityOfPage URL value to set.
     */
    @Override
    public void setMainEntityOfPage(URL mainEntityOfPage) {
        this.mainEntityOfPage = mainEntityOfPage;
    }

    private Text alternateName;

    /**
     * An alias for the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getAlternateName() {
        return alternateName;
    }

    /**
     * An alias for the item.
     *
     * @param alternateName Text value to set.
     */
    @Override
    public void setAlternateName(Text alternateName) {
        this.alternateName = alternateName;
    }

    private Text name;

    /**
     * The name of the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getName() {
        return name;
    }

    /**
     * The name of the item.
     *
     * @param name Text value to set.
     */
    @Override
    public void setName(Text name) {
        this.name = name;
    }

    private Action potentialAction;

    /**
     * Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
     *
     * @return {@link Action}
     */
    @Override
    public Action getPotentialAction() {
        return potentialAction;
    }

    /**
     * Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
     *
     * @param potentialAction Action value to set.
     */
    @Override
    public void setPotentialAction(Action potentialAction) {
        this.potentialAction = potentialAction;
    }

    private Object image;

    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * @return {@link URL} or {@link ImageObject}
     */
    @Override
    public <T> T getImage() {
        return (T) image;
    }

    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * @param image URL value to set.
     */
    @Override
    public void setImage(URL image) {
        this.image = image;
    }
    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * @param image ImageObject value to set.
     */
    @Override
    public void setImage(ImageObject image) {
        this.image = image;
    }

    private URL url;

    /**
     * URL of the item.
     *
     * @return {@link URL}
     */
    @Override
    public URL getUrl() {
        return url;
    }

    /**
     * URL of the item.
     *
     * @param url URL value to set.
     */
    @Override
    public void setUrl(URL url) {
        this.url = url;
    }

    private Text description;

    /**
     * A description of the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getDescription() {
        return description;
    }

    /**
     * A description of the item.
     *
     * @param description Text value to set.
     */
    @Override
    public void setDescription(Text description) {
        this.description = description;
    }

    private Object subjectOf;

    /**
     * A CreativeWork or Event about this Thing.
     *
     * @return {@link Event} or {@link CreativeWork}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public <T> T getSubjectOf() {
        return (T) subjectOf;
    }

    /**
     * A CreativeWork or Event about this Thing.
     *
     * @param subjectOf Event value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public void setSubjectOf(Event subjectOf) {
        this.subjectOf = subjectOf;
    }
    /**
     * A CreativeWork or Event about this Thing.
     *
     * @param subjectOf CreativeWork value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public void setSubjectOf(CreativeWork subjectOf) {
        this.subjectOf = subjectOf;
    }

    private URL additionalType;

    /**
     * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
     *
     * @return {@link URL}
     */
    @Override
    public URL getAdditionalType() {
        return additionalType;
    }

    /**
     * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
     *
     * @param additionalType URL value to set.
     */
    @Override
    public void setAdditionalType(URL additionalType) {
        this.additionalType = additionalType;
    }

    private Text disambiguatingDescription;

    /**
     * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
     *
     * @return {@link Text}
     */
    @Override
    public Text getDisambiguatingDescription() {
        return disambiguatingDescription;
    }

    /**
     * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
     *
     * @param disambiguatingDescription Text value to set.
     */
    @Override
    public void setDisambiguatingDescription(Text disambiguatingDescription) {
        this.disambiguatingDescription = disambiguatingDescription;
    }

    private URL sameAs;

    /**
     * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
     *
     * @return {@link URL}
     */
    @Override
    public URL getSameAs() {
        return sameAs;
    }

    /**
     * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
     *
     * @param sameAs URL value to set.
     */
    @Override
    public void setSameAs(URL sameAs) {
        this.sameAs = sameAs;
    }

    private Object identifier;

    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @return {@link URL} or {@link Text} or {@link PropertyValue}
     */
    @Override
    public <T> T getIdentifier() {
        return (T) identifier;
    }

    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @param identifier URL value to set.
     */
    @Override
    public void setIdentifier(URL identifier) {
        this.identifier = identifier;
    }
    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @param identifier Text value to set.
     */
    @Override
    public void setIdentifier(Text identifier) {
        this.identifier = identifier;
    }
    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @param identifier PropertyValue value to set.
     */
    @Override
    public void setIdentifier(PropertyValue identifier) {
        this.identifier = identifier;
    }
}
