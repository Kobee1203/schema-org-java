/*
 * This class is auto generated by the schema.org code generator program.
 * https://github.com/Kobee1203/schema-org-java
 * Do not edit the class manually.
 */
package org.schema.model;

import org.schema.model.datatype.DateTime;
import org.schema.model.datatype.Time;
import org.schema.model.datatype.Integer;
import org.schema.model.PostalAddress;
import org.schema.model.datatype.Text;
import org.schema.model.Place;
import org.schema.model.VirtualLocation;
import org.schema.model.Action;
import org.schema.model.SoftwareApplication;
import org.schema.model.WebSite;

/**
 * A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
 *
 * @see <a href="https://schema.org/InteractionCounter">https://schema.org/InteractionCounter</a>
 */
public interface InteractionCounter extends StructuredValue {

    /**
     * The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from *January* to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.<br/><br/>Note that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
     *
     * @return {@link DateTime} or {@link Time}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2493">https://github.com/schemaorg/schemaorg/issues/2493</a>
     */
    <T> T getStartTime();

    /**
     * The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from *January* to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.<br/><br/>Note that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
     *
     * @param fStartTime DateTime value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2493">https://github.com/schemaorg/schemaorg/issues/2493</a>
     */
    void setStartTime(DateTime fStartTime);
    /**
     * The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from *January* to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.<br/><br/>Note that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
     *
     * @param fStartTime java.time.LocalDateTime value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2493">https://github.com/schemaorg/schemaorg/issues/2493</a>
     */
    void setStartTime(java.time.LocalDateTime fStartTime);
    /**
     * The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from *January* to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.<br/><br/>Note that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
     *
     * @param fStartTime Time value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2493">https://github.com/schemaorg/schemaorg/issues/2493</a>
     */
    void setStartTime(Time fStartTime);
    /**
     * The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from *January* to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.<br/><br/>Note that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
     *
     * @param fStartTime java.time.LocalTime value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2493">https://github.com/schemaorg/schemaorg/issues/2493</a>
     */
    void setStartTime(java.time.LocalTime fStartTime);

    /**
     * The number of interactions for the CreativeWork using the WebSite or SoftwareApplication.
     *
     * @return {@link Integer}
     */
    Integer getUserInteractionCount();

    /**
     * The number of interactions for the CreativeWork using the WebSite or SoftwareApplication.
     *
     * @param fUserInteractionCount Integer value to set.
     */
    void setUserInteractionCount(Integer fUserInteractionCount);
    /**
     * The number of interactions for the CreativeWork using the WebSite or SoftwareApplication.
     *
     * @param fUserInteractionCount java.lang.Integer value to set.
     */
    void setUserInteractionCount(java.lang.Integer fUserInteractionCount);

    /**
     * The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
     *
     * @return {@link PostalAddress} or {@link Text} or {@link Place} or {@link VirtualLocation}
     */
    <T> T getLocation();

    /**
     * The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
     *
     * @param fLocation PostalAddress value to set.
     */
    void setLocation(PostalAddress fLocation);
    /**
     * The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
     *
     * @param fLocation Text value to set.
     */
    void setLocation(Text fLocation);
    /**
     * The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
     *
     * @param fLocation java.lang.String value to set.
     */
    void setLocation(java.lang.String fLocation);
    /**
     * The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
     *
     * @param fLocation Place value to set.
     */
    void setLocation(Place fLocation);
    /**
     * The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
     *
     * @param fLocation VirtualLocation value to set.
     */
    void setLocation(VirtualLocation fLocation);

    /**
     * The Action representing the type of interaction. For up votes, +1s, etc. use [[LikeAction]]. For down votes use [[DislikeAction]]. Otherwise, use the most specific Action.
     *
     * @return {@link Action}
     */
    Action getInteractionType();

    /**
     * The Action representing the type of interaction. For up votes, +1s, etc. use [[LikeAction]]. For down votes use [[DislikeAction]]. Otherwise, use the most specific Action.
     *
     * @param fInteractionType Action value to set.
     */
    void setInteractionType(Action fInteractionType);

    /**
     * The WebSite or SoftwareApplication where the interactions took place.
     *
     * @return {@link SoftwareApplication} or {@link WebSite}
     */
    <T> T getInteractionService();

    /**
     * The WebSite or SoftwareApplication where the interactions took place.
     *
     * @param fInteractionService SoftwareApplication value to set.
     */
    void setInteractionService(SoftwareApplication fInteractionService);
    /**
     * The WebSite or SoftwareApplication where the interactions took place.
     *
     * @param fInteractionService WebSite value to set.
     */
    void setInteractionService(WebSite fInteractionService);

    /**
     * The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to *December*. For media, including audio and video, it's the time offset of the end of a clip within a larger file.<br/><br/>Note that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
     *
     * @return {@link DateTime} or {@link Time}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2493">https://github.com/schemaorg/schemaorg/issues/2493</a>
     */
    <T> T getEndTime();

    /**
     * The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to *December*. For media, including audio and video, it's the time offset of the end of a clip within a larger file.<br/><br/>Note that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
     *
     * @param fEndTime DateTime value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2493">https://github.com/schemaorg/schemaorg/issues/2493</a>
     */
    void setEndTime(DateTime fEndTime);
    /**
     * The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to *December*. For media, including audio and video, it's the time offset of the end of a clip within a larger file.<br/><br/>Note that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
     *
     * @param fEndTime java.time.LocalDateTime value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2493">https://github.com/schemaorg/schemaorg/issues/2493</a>
     */
    void setEndTime(java.time.LocalDateTime fEndTime);
    /**
     * The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to *December*. For media, including audio and video, it's the time offset of the end of a clip within a larger file.<br/><br/>Note that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
     *
     * @param fEndTime Time value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2493">https://github.com/schemaorg/schemaorg/issues/2493</a>
     */
    void setEndTime(Time fEndTime);
    /**
     * The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to *December*. For media, including audio and video, it's the time offset of the end of a clip within a larger file.<br/><br/>Note that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
     *
     * @param fEndTime java.time.LocalTime value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2493">https://github.com/schemaorg/schemaorg/issues/2493</a>
     */
    void setEndTime(java.time.LocalTime fEndTime);
}
