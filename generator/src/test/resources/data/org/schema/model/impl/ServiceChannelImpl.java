/*
 * This class is auto generated by the schema.org code generator program.
 * https://github.com/Kobee1203/schema-org-java
 * Do not edit the class manually.
 */
package org.schema.model.impl;

import org.schema.model.Service;
import org.schema.model.ContactPoint;
import org.schema.model.PostalAddress;
import org.schema.model.datatype.URL;
import org.schema.model.datatype.Text;
import org.schema.model.Language;
import org.schema.model.Duration;
import org.schema.model.Place;
import org.schema.model.CreativeWork;
import org.schema.model.Action;
import org.schema.model.ImageObject;
import org.schema.model.Event;
import org.schema.model.PropertyValue;
import org.schema.model.Thing;
import org.schema.model.JsonLdTypeName;
import org.schema.model.Intangible;
import org.schema.model.ServiceChannel;

/**
 * A means for accessing a service, e.g. a government office location, web site, or phone number.
 *
 * @see <a href="https://schema.org/ServiceChannel">https://schema.org/ServiceChannel</a>
 */
@JsonLdTypeName("schema:ServiceChannel")
public class ServiceChannelImpl implements ServiceChannel {

    private URL fServiceUrl;

    /**
     * The website to access the service.
     *
     * @return {@link URL}
     */
    @Override
    public URL getServiceUrl() {
        return fServiceUrl;
    }

    /**
     * The website to access the service.
     *
     */
    @Override
    public void setServiceUrl(URL fServiceUrl) {
        this.fServiceUrl = fServiceUrl;
    }

    private Object fSubjectOf;

    /**
     * A CreativeWork or Event about this Thing.
     *
     * @return {@link Event} or {@link CreativeWork}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public <T> T getSubjectOf() {
        return (T) fSubjectOf;
    }

    /**
     * A CreativeWork or Event about this Thing.
     *
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public void setSubjectOf(Object fSubjectOf) {
        if(!(fSubjectOf instanceof Event) && !(fSubjectOf instanceof CreativeWork)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'subjectOf': " + fSubjectOf);
        }
        this.fSubjectOf = fSubjectOf;
    }

    private Text fName;

    /**
     * The name of the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getName() {
        return fName;
    }

    /**
     * The name of the item.
     *
     */
    @Override
    public void setName(Text fName) {
        this.fName = fName;
    }

    private Text fDisambiguatingDescription;

    /**
     * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
     *
     * @return {@link Text}
     */
    @Override
    public Text getDisambiguatingDescription() {
        return fDisambiguatingDescription;
    }

    /**
     * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
     *
     */
    @Override
    public void setDisambiguatingDescription(Text fDisambiguatingDescription) {
        this.fDisambiguatingDescription = fDisambiguatingDescription;
    }

    private Object fImage;

    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * @return {@link URL} or {@link ImageObject}
     */
    @Override
    public <T> T getImage() {
        return (T) fImage;
    }

    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     */
    @Override
    public void setImage(Object fImage) {
        if(!(fImage instanceof URL) && !(fImage instanceof ImageObject)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'image': " + fImage);
        }
        this.fImage = fImage;
    }

    private URL fSameAs;

    /**
     * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
     *
     * @return {@link URL}
     */
    @Override
    public URL getSameAs() {
        return fSameAs;
    }

    /**
     * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
     *
     */
    @Override
    public void setSameAs(URL fSameAs) {
        this.fSameAs = fSameAs;
    }

    private PostalAddress fServicePostalAddress;

    /**
     * The address for accessing the service by mail.
     *
     * @return {@link PostalAddress}
     */
    @Override
    public PostalAddress getServicePostalAddress() {
        return fServicePostalAddress;
    }

    /**
     * The address for accessing the service by mail.
     *
     */
    @Override
    public void setServicePostalAddress(PostalAddress fServicePostalAddress) {
        this.fServicePostalAddress = fServicePostalAddress;
    }

    private Duration fProcessingTime;

    /**
     * Estimated processing time for the service using this channel.
     *
     * @return {@link Duration}
     */
    @Override
    public Duration getProcessingTime() {
        return fProcessingTime;
    }

    /**
     * Estimated processing time for the service using this channel.
     *
     */
    @Override
    public void setProcessingTime(Duration fProcessingTime) {
        this.fProcessingTime = fProcessingTime;
    }

    private Object fIdentifier;

    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @return {@link URL} or {@link Text} or {@link PropertyValue}
     */
    @Override
    public <T> T getIdentifier() {
        return (T) fIdentifier;
    }

    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     */
    @Override
    public void setIdentifier(Object fIdentifier) {
        if(!(fIdentifier instanceof URL) && !(fIdentifier instanceof Text) && !(fIdentifier instanceof PropertyValue)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'identifier': " + fIdentifier);
        }
        this.fIdentifier = fIdentifier;
    }

    private Text fAlternateName;

    /**
     * An alias for the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getAlternateName() {
        return fAlternateName;
    }

    /**
     * An alias for the item.
     *
     */
    @Override
    public void setAlternateName(Text fAlternateName) {
        this.fAlternateName = fAlternateName;
    }

    private Object fAvailableLanguage;

    /**
     * A language someone may use with or at the item, service or place. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[inLanguage]]
     *
     * @return {@link Text} or {@link Language}
     */
    @Override
    public <T> T getAvailableLanguage() {
        return (T) fAvailableLanguage;
    }

    /**
     * A language someone may use with or at the item, service or place. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[inLanguage]]
     *
     */
    @Override
    public void setAvailableLanguage(Object fAvailableLanguage) {
        if(!(fAvailableLanguage instanceof Text) && !(fAvailableLanguage instanceof Language)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'availableLanguage': " + fAvailableLanguage);
        }
        this.fAvailableLanguage = fAvailableLanguage;
    }

    private Object fMainEntityOfPage;

    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     * @return {@link CreativeWork} or {@link URL}
     */
    @Override
    public <T> T getMainEntityOfPage() {
        return (T) fMainEntityOfPage;
    }

    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     */
    @Override
    public void setMainEntityOfPage(Object fMainEntityOfPage) {
        if(!(fMainEntityOfPage instanceof CreativeWork) && !(fMainEntityOfPage instanceof URL)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'mainEntityOfPage': " + fMainEntityOfPage);
        }
        this.fMainEntityOfPage = fMainEntityOfPage;
    }

    private URL fUrl;

    /**
     * URL of the item.
     *
     * @return {@link URL}
     */
    @Override
    public URL getUrl() {
        return fUrl;
    }

    /**
     * URL of the item.
     *
     */
    @Override
    public void setUrl(URL fUrl) {
        this.fUrl = fUrl;
    }

    private Service fProvidesService;

    /**
     * The service provided by this channel.
     *
     * @return {@link Service}
     */
    @Override
    public Service getProvidesService() {
        return fProvidesService;
    }

    /**
     * The service provided by this channel.
     *
     */
    @Override
    public void setProvidesService(Service fProvidesService) {
        this.fProvidesService = fProvidesService;
    }

    private ContactPoint fServicePhone;

    /**
     * The phone number to use to access the service.
     *
     * @return {@link ContactPoint}
     */
    @Override
    public ContactPoint getServicePhone() {
        return fServicePhone;
    }

    /**
     * The phone number to use to access the service.
     *
     */
    @Override
    public void setServicePhone(ContactPoint fServicePhone) {
        this.fServicePhone = fServicePhone;
    }

    private ContactPoint fServiceSmsNumber;

    /**
     * The number to access the service by text message.
     *
     * @return {@link ContactPoint}
     */
    @Override
    public ContactPoint getServiceSmsNumber() {
        return fServiceSmsNumber;
    }

    /**
     * The number to access the service by text message.
     *
     */
    @Override
    public void setServiceSmsNumber(ContactPoint fServiceSmsNumber) {
        this.fServiceSmsNumber = fServiceSmsNumber;
    }

    private URL fAdditionalType;

    /**
     * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
     *
     * @return {@link URL}
     */
    @Override
    public URL getAdditionalType() {
        return fAdditionalType;
    }

    /**
     * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
     *
     */
    @Override
    public void setAdditionalType(URL fAdditionalType) {
        this.fAdditionalType = fAdditionalType;
    }

    private Text fDescription;

    /**
     * A description of the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getDescription() {
        return fDescription;
    }

    /**
     * A description of the item.
     *
     */
    @Override
    public void setDescription(Text fDescription) {
        this.fDescription = fDescription;
    }

    private Place fServiceLocation;

    /**
     * The location (e.g. civic structure, local business, etc.) where a person can go to access the service.
     *
     * @return {@link Place}
     */
    @Override
    public Place getServiceLocation() {
        return fServiceLocation;
    }

    /**
     * The location (e.g. civic structure, local business, etc.) where a person can go to access the service.
     *
     */
    @Override
    public void setServiceLocation(Place fServiceLocation) {
        this.fServiceLocation = fServiceLocation;
    }

    private Action fPotentialAction;

    /**
     * Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
     *
     * @return {@link Action}
     */
    @Override
    public Action getPotentialAction() {
        return fPotentialAction;
    }

    /**
     * Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
     *
     */
    @Override
    public void setPotentialAction(Action fPotentialAction) {
        this.fPotentialAction = fPotentialAction;
    }
}
