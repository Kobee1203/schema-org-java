/*
 * This class is auto generated by the schema.org code generator program.
 * https://github.com/Kobee1203/schema-org-java
 * Do not edit the class manually.
 */
package org.schema.model;

import org.schema.model.QuantitativeValue;
import org.schema.model.Distance;
import org.schema.model.Person;
import org.schema.model.datatype.URL;
import org.schema.model.datatype.Text;
import org.schema.model.datatype.Integer;

/**
 * A work of art that is primarily visual in character.
 *
 * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_VisualArtworkClass">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_VisualArtworkClass</a>
 * @see <a href="https://schema.org/VisualArtwork">https://schema.org/VisualArtwork</a>
 */
public interface VisualArtwork extends CreativeWork {

    /**
     * The width of the item.
     *
     * @return {@link QuantitativeValue} or {@link Distance}
     */
    <T> T getWidth();

    /**
     * The width of the item.
     *
     * @param fWidth QuantitativeValue value to set.
     */
    void setWidth(QuantitativeValue fWidth);
    /**
     * The width of the item.
     *
     * @param fWidth Distance value to set.
     */
    void setWidth(Distance fWidth);

    /**
     * The individual who adds lettering, including speech balloons and sound effects, to artwork.
     *
     * @return {@link Person}
     * @see <a href="https://bib.schema.org">https://bib.schema.org</a>
     */
    Person getLetterer();

    /**
     * The individual who adds lettering, including speech balloons and sound effects, to artwork.
     *
     * @param fLetterer Person value to set.
     * @see <a href="https://bib.schema.org">https://bib.schema.org</a>
     */
    void setLetterer(Person fLetterer);

    /**
     * The height of the item.
     *
     * @return {@link Distance} or {@link QuantitativeValue}
     */
    <T> T getHeight();

    /**
     * The height of the item.
     *
     * @param fHeight Distance value to set.
     */
    void setHeight(Distance fHeight);
    /**
     * The height of the item.
     *
     * @param fHeight QuantitativeValue value to set.
     */
    void setHeight(QuantitativeValue fHeight);

    /**
     * A material used as a surface in some artwork, e.g. Canvas, Paper, Wood, Board, etc.
     *
     * @return {@link URL} or {@link Text}
     */
    <T> T getSurface();

    /**
     * A material used as a surface in some artwork, e.g. Canvas, Paper, Wood, Board, etc.
     *
     * @param fSurface URL value to set.
     */
    void setSurface(URL fSurface);
    /**
     * A material used as a surface in some artwork, e.g. Canvas, Paper, Wood, Board, etc.
     *
     * @param fSurface java.net.URL value to set.
     */
    void setSurface(java.net.URL fSurface);
    /**
     * A material used as a surface in some artwork, e.g. Canvas, Paper, Wood, Board, etc.
     *
     * @param fSurface Text value to set.
     */
    void setSurface(Text fSurface);
    /**
     * A material used as a surface in some artwork, e.g. Canvas, Paper, Wood, Board, etc.
     *
     * @param fSurface java.lang.String value to set.
     */
    void setSurface(java.lang.String fSurface);

    /**
     * The individual who adds color to inked drawings.
     *
     * @return {@link Person}
     * @see <a href="https://bib.schema.org">https://bib.schema.org</a>
     */
    Person getColorist();

    /**
     * The individual who adds color to inked drawings.
     *
     * @param fColorist Person value to set.
     * @see <a href="https://bib.schema.org">https://bib.schema.org</a>
     */
    void setColorist(Person fColorist);

    /**
     * The individual who traces over the pencil drawings in ink after pencils are complete.
     *
     * @return {@link Person}
     * @see <a href="https://bib.schema.org">https://bib.schema.org</a>
     */
    Person getInker();

    /**
     * The individual who traces over the pencil drawings in ink after pencils are complete.
     *
     * @param fInker Person value to set.
     * @see <a href="https://bib.schema.org">https://bib.schema.org</a>
     */
    void setInker(Person fInker);

    /**
     * e.g. Painting, Drawing, Sculpture, Print, Photograph, Assemblage, Collage, etc.
     *
     * @return {@link Text} or {@link URL}
     */
    <T> T getArtform();

    /**
     * e.g. Painting, Drawing, Sculpture, Print, Photograph, Assemblage, Collage, etc.
     *
     * @param fArtform Text value to set.
     */
    void setArtform(Text fArtform);
    /**
     * e.g. Painting, Drawing, Sculpture, Print, Photograph, Assemblage, Collage, etc.
     *
     * @param fArtform java.lang.String value to set.
     */
    void setArtform(java.lang.String fArtform);
    /**
     * e.g. Painting, Drawing, Sculpture, Print, Photograph, Assemblage, Collage, etc.
     *
     * @param fArtform URL value to set.
     */
    void setArtform(URL fArtform);
    /**
     * e.g. Painting, Drawing, Sculpture, Print, Photograph, Assemblage, Collage, etc.
     *
     * @param fArtform java.net.URL value to set.
     */
    void setArtform(java.net.URL fArtform);

    /**
     * The supporting materials for the artwork, e.g. Canvas, Paper, Wood, Board, etc.
     *
     * @return {@link URL} or {@link Text}
     */
    <T> T getArtworkSurface();

    /**
     * The supporting materials for the artwork, e.g. Canvas, Paper, Wood, Board, etc.
     *
     * @param fArtworkSurface URL value to set.
     */
    void setArtworkSurface(URL fArtworkSurface);
    /**
     * The supporting materials for the artwork, e.g. Canvas, Paper, Wood, Board, etc.
     *
     * @param fArtworkSurface java.net.URL value to set.
     */
    void setArtworkSurface(java.net.URL fArtworkSurface);
    /**
     * The supporting materials for the artwork, e.g. Canvas, Paper, Wood, Board, etc.
     *
     * @param fArtworkSurface Text value to set.
     */
    void setArtworkSurface(Text fArtworkSurface);
    /**
     * The supporting materials for the artwork, e.g. Canvas, Paper, Wood, Board, etc.
     *
     * @param fArtworkSurface java.lang.String value to set.
     */
    void setArtworkSurface(java.lang.String fArtworkSurface);

    /**
     * The number of copies when multiple copies of a piece of artwork are produced - e.g. for a limited edition of 20 prints, 'artEdition' refers to the total number of copies (in this example "20").
     *
     * @return {@link Integer} or {@link Text}
     */
    <T> T getArtEdition();

    /**
     * The number of copies when multiple copies of a piece of artwork are produced - e.g. for a limited edition of 20 prints, 'artEdition' refers to the total number of copies (in this example "20").
     *
     * @param fArtEdition Integer value to set.
     */
    void setArtEdition(Integer fArtEdition);
    /**
     * The number of copies when multiple copies of a piece of artwork are produced - e.g. for a limited edition of 20 prints, 'artEdition' refers to the total number of copies (in this example "20").
     *
     * @param fArtEdition java.lang.Integer value to set.
     */
    void setArtEdition(java.lang.Integer fArtEdition);
    /**
     * The number of copies when multiple copies of a piece of artwork are produced - e.g. for a limited edition of 20 prints, 'artEdition' refers to the total number of copies (in this example "20").
     *
     * @param fArtEdition Text value to set.
     */
    void setArtEdition(Text fArtEdition);
    /**
     * The number of copies when multiple copies of a piece of artwork are produced - e.g. for a limited edition of 20 prints, 'artEdition' refers to the total number of copies (in this example "20").
     *
     * @param fArtEdition java.lang.String value to set.
     */
    void setArtEdition(java.lang.String fArtEdition);

    /**
     * The depth of the item.
     *
     * @return {@link Distance} or {@link QuantitativeValue}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    <T> T getDepth();

    /**
     * The depth of the item.
     *
     * @param fDepth Distance value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    void setDepth(Distance fDepth);
    /**
     * The depth of the item.
     *
     * @param fDepth QuantitativeValue value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    void setDepth(QuantitativeValue fDepth);

    /**
     * The individual who draws the primary narrative artwork.
     *
     * @return {@link Person}
     * @see <a href="https://bib.schema.org">https://bib.schema.org</a>
     */
    Person getPenciler();

    /**
     * The individual who draws the primary narrative artwork.
     *
     * @param fPenciler Person value to set.
     * @see <a href="https://bib.schema.org">https://bib.schema.org</a>
     */
    void setPenciler(Person fPenciler);

    /**
     * The primary artist for a work
     *     	in a medium other than pencils or digital line art--for example, if the
     *     	primary artwork is done in watercolors or digital paints.
     *
     * @return {@link Person}
     * @see <a href="https://bib.schema.org">https://bib.schema.org</a>
     */
    Person getArtist();

    /**
     * The primary artist for a work
     *     	in a medium other than pencils or digital line art--for example, if the
     *     	primary artwork is done in watercolors or digital paints.
     *
     * @param fArtist Person value to set.
     * @see <a href="https://bib.schema.org">https://bib.schema.org</a>
     */
    void setArtist(Person fArtist);

    /**
     * The material used. (e.g. Oil, Watercolour, Acrylic, Linoprint, Marble, Cyanotype, Digital, Lithograph, DryPoint, Intaglio, Pastel, Woodcut, Pencil, Mixed Media, etc.)
     *
     * @return {@link URL} or {@link Text}
     */
    <T> T getArtMedium();

    /**
     * The material used. (e.g. Oil, Watercolour, Acrylic, Linoprint, Marble, Cyanotype, Digital, Lithograph, DryPoint, Intaglio, Pastel, Woodcut, Pencil, Mixed Media, etc.)
     *
     * @param fArtMedium URL value to set.
     */
    void setArtMedium(URL fArtMedium);
    /**
     * The material used. (e.g. Oil, Watercolour, Acrylic, Linoprint, Marble, Cyanotype, Digital, Lithograph, DryPoint, Intaglio, Pastel, Woodcut, Pencil, Mixed Media, etc.)
     *
     * @param fArtMedium java.net.URL value to set.
     */
    void setArtMedium(java.net.URL fArtMedium);
    /**
     * The material used. (e.g. Oil, Watercolour, Acrylic, Linoprint, Marble, Cyanotype, Digital, Lithograph, DryPoint, Intaglio, Pastel, Woodcut, Pencil, Mixed Media, etc.)
     *
     * @param fArtMedium Text value to set.
     */
    void setArtMedium(Text fArtMedium);
    /**
     * The material used. (e.g. Oil, Watercolour, Acrylic, Linoprint, Marble, Cyanotype, Digital, Lithograph, DryPoint, Intaglio, Pastel, Woodcut, Pencil, Mixed Media, etc.)
     *
     * @param fArtMedium java.lang.String value to set.
     */
    void setArtMedium(java.lang.String fArtMedium);
}
