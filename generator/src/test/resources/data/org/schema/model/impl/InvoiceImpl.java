/*
 * This class is auto generated by the schema.org code generator program.
 * https://github.com/Kobee1203/schema-org-java
 * Do not edit the class manually.
 */
package org.schema.model.impl;

import org.schema.model.MonetaryAmount;
import org.schema.model.PriceSpecification;
import org.schema.model.Duration;
import org.schema.model.Order;
import org.schema.model.datatype.Text;
import org.schema.model.datatype.URL;
import org.schema.model.PhysicalActivityCategory;
import org.schema.model.Thing;
import org.schema.model.CategoryCode;
import org.schema.model.datatype.Date;
import org.schema.model.Organization;
import org.schema.model.Person;
import org.schema.model.datatype.DateTime;
import org.schema.model.PaymentStatusType;
import org.schema.model.PaymentMethod;
import org.schema.model.CreativeWork;
import org.schema.model.Action;
import org.schema.model.ImageObject;
import org.schema.model.Event;
import org.schema.model.PropertyValue;
import com.weedow.schemaorg.commons.model.JsonLdTypeName;
import org.schema.model.Intangible;
import org.schema.model.Invoice;

/**
 * A statement of the money due for goods or services; a bill.
 *
 * @see <a href="https://schema.org/Invoice">https://schema.org/Invoice</a>
 */
@JsonLdTypeName("Invoice")
public class InvoiceImpl extends com.weedow.schemaorg.commons.model.JsonLdNodeImpl implements Invoice {

    private Object fTotalPaymentDue;

    /**
     * The total amount due.
     *
     * @return {@link MonetaryAmount} or {@link PriceSpecification}
     */
    @Override
    public <T> T getTotalPaymentDue() {
        return (T) fTotalPaymentDue;
    }

    /**
     * The total amount due.
     *
     * @param fTotalPaymentDue MonetaryAmount value to set.
     */
    @Override
    public void setTotalPaymentDue(MonetaryAmount fTotalPaymentDue) {
        this.fTotalPaymentDue = fTotalPaymentDue;
    }
    /**
     * The total amount due.
     *
     * @param fTotalPaymentDue PriceSpecification value to set.
     */
    @Override
    public void setTotalPaymentDue(PriceSpecification fTotalPaymentDue) {
        this.fTotalPaymentDue = fTotalPaymentDue;
    }

    private Duration fBillingPeriod;

    /**
     * The time interval used to compute the invoice.
     *
     * @return {@link Duration}
     */
    @Override
    public Duration getBillingPeriod() {
        return fBillingPeriod;
    }

    /**
     * The time interval used to compute the invoice.
     *
     * @param fBillingPeriod Duration value to set.
     */
    @Override
    public void setBillingPeriod(Duration fBillingPeriod) {
        this.fBillingPeriod = fBillingPeriod;
    }

    private Order fReferencesOrder;

    /**
     * The Order(s) related to this Invoice. One or more Orders may be combined into a single Invoice.
     *
     * @return {@link Order}
     */
    @Override
    public Order getReferencesOrder() {
        return fReferencesOrder;
    }

    /**
     * The Order(s) related to this Invoice. One or more Orders may be combined into a single Invoice.
     *
     * @param fReferencesOrder Order value to set.
     */
    @Override
    public void setReferencesOrder(Order fReferencesOrder) {
        this.fReferencesOrder = fReferencesOrder;
    }

    private Text fAccountId;

    /**
     * The identifier for the account the payment will be applied to.
     *
     * @return {@link Text}
     */
    @Override
    public Text getAccountId() {
        return fAccountId;
    }

    /**
     * The identifier for the account the payment will be applied to.
     *
     * @param fAccountId Text value to set.
     */
    @Override
    public void setAccountId(Text fAccountId) {
        this.fAccountId = fAccountId;
    }
    /**
     * The identifier for the account the payment will be applied to.
     *
     * @param fAccountId java.lang.String value to set.
     */
    @Override
    public void setAccountId(java.lang.String fAccountId) {
        this.fAccountId = Text.of(fAccountId);
    }

    private Object fCategory;

    /**
     * A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
     *
     * @return {@link URL} or {@link Text} or {@link PhysicalActivityCategory} or {@link Thing} or {@link CategoryCode}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1741">https://github.com/schemaorg/schemaorg/issues/1741</a>
     */
    @Override
    public <T> T getCategory() {
        return (T) fCategory;
    }

    /**
     * A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
     *
     * @param fCategory URL value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1741">https://github.com/schemaorg/schemaorg/issues/1741</a>
     */
    @Override
    public void setCategory(URL fCategory) {
        this.fCategory = fCategory;
    }
    /**
     * A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
     *
     * @param fCategory java.net.URL value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1741">https://github.com/schemaorg/schemaorg/issues/1741</a>
     */
    @Override
    public void setCategory(java.net.URL fCategory) {
        this.fCategory = URL.of(fCategory);
    }
    /**
     * A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
     *
     * @param fCategory Text value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1741">https://github.com/schemaorg/schemaorg/issues/1741</a>
     */
    @Override
    public void setCategory(Text fCategory) {
        this.fCategory = fCategory;
    }
    /**
     * A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
     *
     * @param fCategory java.lang.String value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1741">https://github.com/schemaorg/schemaorg/issues/1741</a>
     */
    @Override
    public void setCategory(java.lang.String fCategory) {
        this.fCategory = Text.of(fCategory);
    }
    /**
     * A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
     *
     * @param fCategory PhysicalActivityCategory value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1741">https://github.com/schemaorg/schemaorg/issues/1741</a>
     */
    @Override
    public void setCategory(PhysicalActivityCategory fCategory) {
        this.fCategory = fCategory;
    }
    /**
     * A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
     *
     * @param fCategory Thing value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1741">https://github.com/schemaorg/schemaorg/issues/1741</a>
     */
    @Override
    public void setCategory(Thing fCategory) {
        this.fCategory = fCategory;
    }
    /**
     * A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
     *
     * @param fCategory CategoryCode value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1741">https://github.com/schemaorg/schemaorg/issues/1741</a>
     */
    @Override
    public void setCategory(CategoryCode fCategory) {
        this.fCategory = fCategory;
    }

    private Date fScheduledPaymentDate;

    /**
     * The date the invoice is scheduled to be paid.
     *
     * @return {@link Date}
     */
    @Override
    public Date getScheduledPaymentDate() {
        return fScheduledPaymentDate;
    }

    /**
     * The date the invoice is scheduled to be paid.
     *
     * @param fScheduledPaymentDate Date value to set.
     */
    @Override
    public void setScheduledPaymentDate(Date fScheduledPaymentDate) {
        this.fScheduledPaymentDate = fScheduledPaymentDate;
    }
    /**
     * The date the invoice is scheduled to be paid.
     *
     * @param fScheduledPaymentDate java.time.LocalDate value to set.
     */
    @Override
    public void setScheduledPaymentDate(java.time.LocalDate fScheduledPaymentDate) {
        this.fScheduledPaymentDate = Date.of(fScheduledPaymentDate);
    }

    private Text fConfirmationNumber;

    /**
     * A number that confirms the given order or payment has been received.
     *
     * @return {@link Text}
     */
    @Override
    public Text getConfirmationNumber() {
        return fConfirmationNumber;
    }

    /**
     * A number that confirms the given order or payment has been received.
     *
     * @param fConfirmationNumber Text value to set.
     */
    @Override
    public void setConfirmationNumber(Text fConfirmationNumber) {
        this.fConfirmationNumber = fConfirmationNumber;
    }
    /**
     * A number that confirms the given order or payment has been received.
     *
     * @param fConfirmationNumber java.lang.String value to set.
     */
    @Override
    public void setConfirmationNumber(java.lang.String fConfirmationNumber) {
        this.fConfirmationNumber = Text.of(fConfirmationNumber);
    }

    private Object fCustomer;

    /**
     * Party placing the order or paying the invoice.
     *
     * @return {@link Organization} or {@link Person}
     */
    @Override
    public <T> T getCustomer() {
        return (T) fCustomer;
    }

    /**
     * Party placing the order or paying the invoice.
     *
     * @param fCustomer Organization value to set.
     */
    @Override
    public void setCustomer(Organization fCustomer) {
        this.fCustomer = fCustomer;
    }
    /**
     * Party placing the order or paying the invoice.
     *
     * @param fCustomer Person value to set.
     */
    @Override
    public void setCustomer(Person fCustomer) {
        this.fCustomer = fCustomer;
    }

    private Object fProvider;

    /**
     * The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
     *
     * @return {@link Organization} or {@link Person}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2927">https://github.com/schemaorg/schemaorg/issues/2927</a>
     */
    @Override
    public <T> T getProvider() {
        return (T) fProvider;
    }

    /**
     * The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
     *
     * @param fProvider Organization value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2927">https://github.com/schemaorg/schemaorg/issues/2927</a>
     */
    @Override
    public void setProvider(Organization fProvider) {
        this.fProvider = fProvider;
    }
    /**
     * The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
     *
     * @param fProvider Person value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2927">https://github.com/schemaorg/schemaorg/issues/2927</a>
     */
    @Override
    public void setProvider(Person fProvider) {
        this.fProvider = fProvider;
    }

    private Object fMinimumPaymentDue;

    /**
     * The minimum payment required at this time.
     *
     * @return {@link MonetaryAmount} or {@link PriceSpecification}
     */
    @Override
    public <T> T getMinimumPaymentDue() {
        return (T) fMinimumPaymentDue;
    }

    /**
     * The minimum payment required at this time.
     *
     * @param fMinimumPaymentDue MonetaryAmount value to set.
     */
    @Override
    public void setMinimumPaymentDue(MonetaryAmount fMinimumPaymentDue) {
        this.fMinimumPaymentDue = fMinimumPaymentDue;
    }
    /**
     * The minimum payment required at this time.
     *
     * @param fMinimumPaymentDue PriceSpecification value to set.
     */
    @Override
    public void setMinimumPaymentDue(PriceSpecification fMinimumPaymentDue) {
        this.fMinimumPaymentDue = fMinimumPaymentDue;
    }

    private Object fPaymentDueDate;

    /**
     * The date that payment is due.
     *
     * @return {@link DateTime} or {@link Date}
     */
    @Override
    public <T> T getPaymentDueDate() {
        return (T) fPaymentDueDate;
    }

    /**
     * The date that payment is due.
     *
     * @param fPaymentDueDate DateTime value to set.
     */
    @Override
    public void setPaymentDueDate(DateTime fPaymentDueDate) {
        this.fPaymentDueDate = fPaymentDueDate;
    }
    /**
     * The date that payment is due.
     *
     * @param fPaymentDueDate java.time.LocalDateTime value to set.
     */
    @Override
    public void setPaymentDueDate(java.time.LocalDateTime fPaymentDueDate) {
        this.fPaymentDueDate = DateTime.of(fPaymentDueDate);
    }
    /**
     * The date that payment is due.
     *
     * @param fPaymentDueDate Date value to set.
     */
    @Override
    public void setPaymentDueDate(Date fPaymentDueDate) {
        this.fPaymentDueDate = fPaymentDueDate;
    }
    /**
     * The date that payment is due.
     *
     * @param fPaymentDueDate java.time.LocalDate value to set.
     */
    @Override
    public void setPaymentDueDate(java.time.LocalDate fPaymentDueDate) {
        this.fPaymentDueDate = Date.of(fPaymentDueDate);
    }

    private Object fBroker;

    /**
     * An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
     *
     * @return {@link Person} or {@link Organization}
     */
    @Override
    public <T> T getBroker() {
        return (T) fBroker;
    }

    /**
     * An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
     *
     * @param fBroker Person value to set.
     */
    @Override
    public void setBroker(Person fBroker) {
        this.fBroker = fBroker;
    }
    /**
     * An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
     *
     * @param fBroker Organization value to set.
     */
    @Override
    public void setBroker(Organization fBroker) {
        this.fBroker = fBroker;
    }

    private Object fPaymentStatus;

    /**
     * The status of payment; whether the invoice has been paid or not.
     *
     * @return {@link PaymentStatusType} or {@link Text}
     */
    @Override
    public <T> T getPaymentStatus() {
        return (T) fPaymentStatus;
    }

    /**
     * The status of payment; whether the invoice has been paid or not.
     *
     * @param fPaymentStatus PaymentStatusType value to set.
     */
    @Override
    public void setPaymentStatus(PaymentStatusType fPaymentStatus) {
        this.fPaymentStatus = fPaymentStatus;
    }
    /**
     * The status of payment; whether the invoice has been paid or not.
     *
     * @param fPaymentStatus Text value to set.
     */
    @Override
    public void setPaymentStatus(Text fPaymentStatus) {
        this.fPaymentStatus = fPaymentStatus;
    }
    /**
     * The status of payment; whether the invoice has been paid or not.
     *
     * @param fPaymentStatus java.lang.String value to set.
     */
    @Override
    public void setPaymentStatus(java.lang.String fPaymentStatus) {
        this.fPaymentStatus = Text.of(fPaymentStatus);
    }

    private Text fPaymentMethodId;

    /**
     * An identifier for the method of payment used (e.g. the last 4 digits of the credit card).
     *
     * @return {@link Text}
     */
    @Override
    public Text getPaymentMethodId() {
        return fPaymentMethodId;
    }

    /**
     * An identifier for the method of payment used (e.g. the last 4 digits of the credit card).
     *
     * @param fPaymentMethodId Text value to set.
     */
    @Override
    public void setPaymentMethodId(Text fPaymentMethodId) {
        this.fPaymentMethodId = fPaymentMethodId;
    }
    /**
     * An identifier for the method of payment used (e.g. the last 4 digits of the credit card).
     *
     * @param fPaymentMethodId java.lang.String value to set.
     */
    @Override
    public void setPaymentMethodId(java.lang.String fPaymentMethodId) {
        this.fPaymentMethodId = Text.of(fPaymentMethodId);
    }

    private DateTime fPaymentDue;

    /**
     * The date that payment is due.
     *
     * @return {@link DateTime}
     */
    @Override
    public DateTime getPaymentDue() {
        return fPaymentDue;
    }

    /**
     * The date that payment is due.
     *
     * @param fPaymentDue DateTime value to set.
     */
    @Override
    public void setPaymentDue(DateTime fPaymentDue) {
        this.fPaymentDue = fPaymentDue;
    }
    /**
     * The date that payment is due.
     *
     * @param fPaymentDue java.time.LocalDateTime value to set.
     */
    @Override
    public void setPaymentDue(java.time.LocalDateTime fPaymentDue) {
        this.fPaymentDue = DateTime.of(fPaymentDue);
    }

    private PaymentMethod fPaymentMethod;

    /**
     * The name of the credit card or other method of payment for the order.
     *
     * @return {@link PaymentMethod}
     */
    @Override
    public PaymentMethod getPaymentMethod() {
        return fPaymentMethod;
    }

    /**
     * The name of the credit card or other method of payment for the order.
     *
     * @param fPaymentMethod PaymentMethod value to set.
     */
    @Override
    public void setPaymentMethod(PaymentMethod fPaymentMethod) {
        this.fPaymentMethod = fPaymentMethod;
    }

    private Object fMainEntityOfPage;

    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     * @return {@link CreativeWork} or {@link URL}
     */
    @Override
    public <T> T getMainEntityOfPage() {
        return (T) fMainEntityOfPage;
    }

    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     * @param fMainEntityOfPage CreativeWork value to set.
     */
    @Override
    public void setMainEntityOfPage(CreativeWork fMainEntityOfPage) {
        this.fMainEntityOfPage = fMainEntityOfPage;
    }
    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     * @param fMainEntityOfPage URL value to set.
     */
    @Override
    public void setMainEntityOfPage(URL fMainEntityOfPage) {
        this.fMainEntityOfPage = fMainEntityOfPage;
    }
    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     * @param fMainEntityOfPage java.net.URL value to set.
     */
    @Override
    public void setMainEntityOfPage(java.net.URL fMainEntityOfPage) {
        this.fMainEntityOfPage = URL.of(fMainEntityOfPage);
    }

    private Text fAlternateName;

    /**
     * An alias for the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getAlternateName() {
        return fAlternateName;
    }

    /**
     * An alias for the item.
     *
     * @param fAlternateName Text value to set.
     */
    @Override
    public void setAlternateName(Text fAlternateName) {
        this.fAlternateName = fAlternateName;
    }
    /**
     * An alias for the item.
     *
     * @param fAlternateName java.lang.String value to set.
     */
    @Override
    public void setAlternateName(java.lang.String fAlternateName) {
        this.fAlternateName = Text.of(fAlternateName);
    }

    private Text fName;

    /**
     * The name of the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getName() {
        return fName;
    }

    /**
     * The name of the item.
     *
     * @param fName Text value to set.
     */
    @Override
    public void setName(Text fName) {
        this.fName = fName;
    }
    /**
     * The name of the item.
     *
     * @param fName java.lang.String value to set.
     */
    @Override
    public void setName(java.lang.String fName) {
        this.fName = Text.of(fName);
    }

    private Action fPotentialAction;

    /**
     * Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
     *
     * @return {@link Action}
     */
    @Override
    public Action getPotentialAction() {
        return fPotentialAction;
    }

    /**
     * Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
     *
     * @param fPotentialAction Action value to set.
     */
    @Override
    public void setPotentialAction(Action fPotentialAction) {
        this.fPotentialAction = fPotentialAction;
    }

    private Object fImage;

    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * @return {@link URL} or {@link ImageObject}
     */
    @Override
    public <T> T getImage() {
        return (T) fImage;
    }

    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * @param fImage URL value to set.
     */
    @Override
    public void setImage(URL fImage) {
        this.fImage = fImage;
    }
    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * @param fImage java.net.URL value to set.
     */
    @Override
    public void setImage(java.net.URL fImage) {
        this.fImage = URL.of(fImage);
    }
    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * @param fImage ImageObject value to set.
     */
    @Override
    public void setImage(ImageObject fImage) {
        this.fImage = fImage;
    }

    private URL fUrl;

    /**
     * URL of the item.
     *
     * @return {@link URL}
     */
    @Override
    public URL getUrl() {
        return fUrl;
    }

    /**
     * URL of the item.
     *
     * @param fUrl URL value to set.
     */
    @Override
    public void setUrl(URL fUrl) {
        this.fUrl = fUrl;
    }
    /**
     * URL of the item.
     *
     * @param fUrl java.net.URL value to set.
     */
    @Override
    public void setUrl(java.net.URL fUrl) {
        this.fUrl = URL.of(fUrl);
    }

    private Text fDescription;

    /**
     * A description of the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getDescription() {
        return fDescription;
    }

    /**
     * A description of the item.
     *
     * @param fDescription Text value to set.
     */
    @Override
    public void setDescription(Text fDescription) {
        this.fDescription = fDescription;
    }
    /**
     * A description of the item.
     *
     * @param fDescription java.lang.String value to set.
     */
    @Override
    public void setDescription(java.lang.String fDescription) {
        this.fDescription = Text.of(fDescription);
    }

    private Object fSubjectOf;

    /**
     * A CreativeWork or Event about this Thing.
     *
     * @return {@link Event} or {@link CreativeWork}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public <T> T getSubjectOf() {
        return (T) fSubjectOf;
    }

    /**
     * A CreativeWork or Event about this Thing.
     *
     * @param fSubjectOf Event value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public void setSubjectOf(Event fSubjectOf) {
        this.fSubjectOf = fSubjectOf;
    }
    /**
     * A CreativeWork or Event about this Thing.
     *
     * @param fSubjectOf CreativeWork value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public void setSubjectOf(CreativeWork fSubjectOf) {
        this.fSubjectOf = fSubjectOf;
    }

    private URL fAdditionalType;

    /**
     * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
     *
     * @return {@link URL}
     */
    @Override
    public URL getAdditionalType() {
        return fAdditionalType;
    }

    /**
     * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
     *
     * @param fAdditionalType URL value to set.
     */
    @Override
    public void setAdditionalType(URL fAdditionalType) {
        this.fAdditionalType = fAdditionalType;
    }
    /**
     * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
     *
     * @param fAdditionalType java.net.URL value to set.
     */
    @Override
    public void setAdditionalType(java.net.URL fAdditionalType) {
        this.fAdditionalType = URL.of(fAdditionalType);
    }

    private Text fDisambiguatingDescription;

    /**
     * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
     *
     * @return {@link Text}
     */
    @Override
    public Text getDisambiguatingDescription() {
        return fDisambiguatingDescription;
    }

    /**
     * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
     *
     * @param fDisambiguatingDescription Text value to set.
     */
    @Override
    public void setDisambiguatingDescription(Text fDisambiguatingDescription) {
        this.fDisambiguatingDescription = fDisambiguatingDescription;
    }
    /**
     * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
     *
     * @param fDisambiguatingDescription java.lang.String value to set.
     */
    @Override
    public void setDisambiguatingDescription(java.lang.String fDisambiguatingDescription) {
        this.fDisambiguatingDescription = Text.of(fDisambiguatingDescription);
    }

    private URL fSameAs;

    /**
     * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
     *
     * @return {@link URL}
     */
    @Override
    public URL getSameAs() {
        return fSameAs;
    }

    /**
     * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
     *
     * @param fSameAs URL value to set.
     */
    @Override
    public void setSameAs(URL fSameAs) {
        this.fSameAs = fSameAs;
    }
    /**
     * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
     *
     * @param fSameAs java.net.URL value to set.
     */
    @Override
    public void setSameAs(java.net.URL fSameAs) {
        this.fSameAs = URL.of(fSameAs);
    }

    private Object fIdentifier;

    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @return {@link URL} or {@link Text} or {@link PropertyValue}
     */
    @Override
    public <T> T getIdentifier() {
        return (T) fIdentifier;
    }

    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @param fIdentifier URL value to set.
     */
    @Override
    public void setIdentifier(URL fIdentifier) {
        this.fIdentifier = fIdentifier;
    }
    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @param fIdentifier java.net.URL value to set.
     */
    @Override
    public void setIdentifier(java.net.URL fIdentifier) {
        this.fIdentifier = URL.of(fIdentifier);
    }
    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @param fIdentifier Text value to set.
     */
    @Override
    public void setIdentifier(Text fIdentifier) {
        this.fIdentifier = fIdentifier;
    }
    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @param fIdentifier java.lang.String value to set.
     */
    @Override
    public void setIdentifier(java.lang.String fIdentifier) {
        this.fIdentifier = Text.of(fIdentifier);
    }
    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @param fIdentifier PropertyValue value to set.
     */
    @Override
    public void setIdentifier(PropertyValue fIdentifier) {
        this.fIdentifier = fIdentifier;
    }
}
