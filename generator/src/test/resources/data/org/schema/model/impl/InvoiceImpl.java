/*
 * This class is auto generated by the schema.org code generator program.
 * https://github.com/Kobee1203/schema-org-java
 * Do not edit the class manually.
 */
package org.schema.model.impl;

import org.schema.model.datatype.Text;
import org.schema.model.Person;
import org.schema.model.Organization;
import org.schema.model.datatype.Date;
import org.schema.model.datatype.DateTime;
import org.schema.model.MonetaryAmount;
import org.schema.model.PriceSpecification;
import org.schema.model.Duration;
import org.schema.model.PaymentStatusType;
import org.schema.model.PaymentMethod;
import org.schema.model.Order;
import org.schema.model.datatype.URL;
import org.schema.model.CategoryCode;
import org.schema.model.Thing;
import org.schema.model.PhysicalActivityCategory;
import org.schema.model.Action;
import org.schema.model.CreativeWork;
import org.schema.model.Event;
import org.schema.model.PropertyValue;
import org.schema.model.ImageObject;
import com.weedow.schemaorg.commons.model.JsonLdTypeName;
import com.weedow.schemaorg.commons.model.JsonLdFieldTypes;
import java.util.List;
import org.schema.model.Intangible;
import org.schema.model.Invoice;

/**
 * A statement of the money due for goods or services; a bill.
 *
 * @see <a href="https://schema.org/Invoice">https://schema.org/Invoice</a>
 */
@JsonLdTypeName("Invoice")
public class InvoiceImpl extends com.weedow.schemaorg.commons.model.JsonLdNodeImpl implements Invoice {

    private List<Text> confirmationNumber;

    /**
     * A number that confirms the given order or payment has been received.
     *
     * @return {@link Text}
     */
    @Override
    public List<Text> getConfirmationNumberList() {
        return confirmationNumber;
    }

    /**
     * A number that confirms the given order or payment has been received.
     *
     * @return {@link Text}
     */
    @Override
    public Text getConfirmationNumber() {
        return getFirst(confirmationNumber);
    }

    /**
     * A number that confirms the given order or payment has been received.
     *
     * @param confirmationNumber Text value to set.
     */
    @Override
    public void addConfirmationNumber(Text confirmationNumber) {
        this.confirmationNumber = add(this.confirmationNumber, confirmationNumber);
    }

    @JsonLdFieldTypes({ Person.class, Organization.class })
    private List<Object> broker;

    /**
     * An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
     *
     * @return {@link Person} or {@link Organization}
     */
    @Override
    public <T> List<T> getBrokerList() {
        return (List<T>) broker;
    }

    /**
     * An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
     *
     * @return {@link Person} or {@link Organization}
     */
    @Override
    public <T> T getBroker() {
        return (T) getFirst(broker);
    }

    /**
     * An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
     *
     * @param broker Person value to set.
     */
    @Override
    public void addBroker(Person broker) {
        this.broker = add(this.broker, broker);
    }
    /**
     * An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
     *
     * @param broker Organization value to set.
     */
    @Override
    public void addBroker(Organization broker) {
        this.broker = add(this.broker, broker);
    }

    @JsonLdFieldTypes({ Date.class, DateTime.class })
    private List<Object> paymentDueDate;

    /**
     * The date that payment is due.
     *
     * @return {@link Date} or {@link DateTime}
     */
    @Override
    public <T> List<T> getPaymentDueDateList() {
        return (List<T>) paymentDueDate;
    }

    /**
     * The date that payment is due.
     *
     * @return {@link Date} or {@link DateTime}
     */
    @Override
    public <T> T getPaymentDueDate() {
        return (T) getFirst(paymentDueDate);
    }

    /**
     * The date that payment is due.
     *
     * @param paymentDueDate Date value to set.
     */
    @Override
    public void addPaymentDueDate(Date paymentDueDate) {
        this.paymentDueDate = add(this.paymentDueDate, paymentDueDate);
    }
    /**
     * The date that payment is due.
     *
     * @param paymentDueDate DateTime value to set.
     */
    @Override
    public void addPaymentDueDate(DateTime paymentDueDate) {
        this.paymentDueDate = add(this.paymentDueDate, paymentDueDate);
    }

    @JsonLdFieldTypes({ Organization.class, Person.class })
    private List<Object> provider;

    /**
     * The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
     *
     * @return {@link Organization} or {@link Person}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2927">https://github.com/schemaorg/schemaorg/issues/2927</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     */
    @Override
    public <T> List<T> getProviderList() {
        return (List<T>) provider;
    }

    /**
     * The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
     *
     * @return {@link Organization} or {@link Person}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2927">https://github.com/schemaorg/schemaorg/issues/2927</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     */
    @Override
    public <T> T getProvider() {
        return (T) getFirst(provider);
    }

    /**
     * The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
     *
     * @param provider Organization value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2927">https://github.com/schemaorg/schemaorg/issues/2927</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     */
    @Override
    public void addProvider(Organization provider) {
        this.provider = add(this.provider, provider);
    }
    /**
     * The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
     *
     * @param provider Person value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2927">https://github.com/schemaorg/schemaorg/issues/2927</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     */
    @Override
    public void addProvider(Person provider) {
        this.provider = add(this.provider, provider);
    }

    @JsonLdFieldTypes({ MonetaryAmount.class, PriceSpecification.class })
    private List<Object> totalPaymentDue;

    /**
     * The total amount due.
     *
     * @return {@link MonetaryAmount} or {@link PriceSpecification}
     */
    @Override
    public <T> List<T> getTotalPaymentDueList() {
        return (List<T>) totalPaymentDue;
    }

    /**
     * The total amount due.
     *
     * @return {@link MonetaryAmount} or {@link PriceSpecification}
     */
    @Override
    public <T> T getTotalPaymentDue() {
        return (T) getFirst(totalPaymentDue);
    }

    /**
     * The total amount due.
     *
     * @param totalPaymentDue MonetaryAmount value to set.
     */
    @Override
    public void addTotalPaymentDue(MonetaryAmount totalPaymentDue) {
        this.totalPaymentDue = add(this.totalPaymentDue, totalPaymentDue);
    }
    /**
     * The total amount due.
     *
     * @param totalPaymentDue PriceSpecification value to set.
     */
    @Override
    public void addTotalPaymentDue(PriceSpecification totalPaymentDue) {
        this.totalPaymentDue = add(this.totalPaymentDue, totalPaymentDue);
    }

    private List<Text> accountId;

    /**
     * The identifier for the account the payment will be applied to.
     *
     * @return {@link Text}
     */
    @Override
    public List<Text> getAccountIdList() {
        return accountId;
    }

    /**
     * The identifier for the account the payment will be applied to.
     *
     * @return {@link Text}
     */
    @Override
    public Text getAccountId() {
        return getFirst(accountId);
    }

    /**
     * The identifier for the account the payment will be applied to.
     *
     * @param accountId Text value to set.
     */
    @Override
    public void addAccountId(Text accountId) {
        this.accountId = add(this.accountId, accountId);
    }

    @JsonLdFieldTypes({ Organization.class, Person.class })
    private List<Object> customer;

    /**
     * Party placing the order or paying the invoice.
     *
     * @return {@link Organization} or {@link Person}
     */
    @Override
    public <T> List<T> getCustomerList() {
        return (List<T>) customer;
    }

    /**
     * Party placing the order or paying the invoice.
     *
     * @return {@link Organization} or {@link Person}
     */
    @Override
    public <T> T getCustomer() {
        return (T) getFirst(customer);
    }

    /**
     * Party placing the order or paying the invoice.
     *
     * @param customer Organization value to set.
     */
    @Override
    public void addCustomer(Organization customer) {
        this.customer = add(this.customer, customer);
    }
    /**
     * Party placing the order or paying the invoice.
     *
     * @param customer Person value to set.
     */
    @Override
    public void addCustomer(Person customer) {
        this.customer = add(this.customer, customer);
    }

    private List<DateTime> paymentDue;

    /**
     * The date that payment is due.
     *
     * @return {@link DateTime}
     */
    @Override
    public List<DateTime> getPaymentDueList() {
        return paymentDue;
    }

    /**
     * The date that payment is due.
     *
     * @return {@link DateTime}
     */
    @Override
    public DateTime getPaymentDue() {
        return getFirst(paymentDue);
    }

    /**
     * The date that payment is due.
     *
     * @param paymentDue DateTime value to set.
     */
    @Override
    public void addPaymentDue(DateTime paymentDue) {
        this.paymentDue = add(this.paymentDue, paymentDue);
    }

    private List<Duration> billingPeriod;

    /**
     * The time interval used to compute the invoice.
     *
     * @return {@link Duration}
     */
    @Override
    public List<Duration> getBillingPeriodList() {
        return billingPeriod;
    }

    /**
     * The time interval used to compute the invoice.
     *
     * @return {@link Duration}
     */
    @Override
    public Duration getBillingPeriod() {
        return getFirst(billingPeriod);
    }

    /**
     * The time interval used to compute the invoice.
     *
     * @param billingPeriod Duration value to set.
     */
    @Override
    public void addBillingPeriod(Duration billingPeriod) {
        this.billingPeriod = add(this.billingPeriod, billingPeriod);
    }

    private List<Text> paymentMethodId;

    /**
     * An identifier for the method of payment used (e.g. the last 4 digits of the credit card).
     *
     * @return {@link Text}
     */
    @Override
    public List<Text> getPaymentMethodIdList() {
        return paymentMethodId;
    }

    /**
     * An identifier for the method of payment used (e.g. the last 4 digits of the credit card).
     *
     * @return {@link Text}
     */
    @Override
    public Text getPaymentMethodId() {
        return getFirst(paymentMethodId);
    }

    /**
     * An identifier for the method of payment used (e.g. the last 4 digits of the credit card).
     *
     * @param paymentMethodId Text value to set.
     */
    @Override
    public void addPaymentMethodId(Text paymentMethodId) {
        this.paymentMethodId = add(this.paymentMethodId, paymentMethodId);
    }

    @JsonLdFieldTypes({ Text.class, PaymentStatusType.class })
    private List<Object> paymentStatus;

    /**
     * The status of payment; whether the invoice has been paid or not.
     *
     * @return {@link Text} or {@link PaymentStatusType}
     */
    @Override
    public <T> List<T> getPaymentStatusList() {
        return (List<T>) paymentStatus;
    }

    /**
     * The status of payment; whether the invoice has been paid or not.
     *
     * @return {@link Text} or {@link PaymentStatusType}
     */
    @Override
    public <T> T getPaymentStatus() {
        return (T) getFirst(paymentStatus);
    }

    /**
     * The status of payment; whether the invoice has been paid or not.
     *
     * @param paymentStatus Text value to set.
     */
    @Override
    public void addPaymentStatus(Text paymentStatus) {
        this.paymentStatus = add(this.paymentStatus, paymentStatus);
    }
    /**
     * The status of payment; whether the invoice has been paid or not.
     *
     * @param paymentStatus PaymentStatusType value to set.
     */
    @Override
    public void addPaymentStatus(PaymentStatusType paymentStatus) {
        this.paymentStatus = add(this.paymentStatus, paymentStatus);
    }

    private List<PaymentMethod> paymentMethod;

    /**
     * The name of the credit card or other method of payment for the order.
     *
     * @return {@link PaymentMethod}
     */
    @Override
    public List<PaymentMethod> getPaymentMethodList() {
        return paymentMethod;
    }

    /**
     * The name of the credit card or other method of payment for the order.
     *
     * @return {@link PaymentMethod}
     */
    @Override
    public PaymentMethod getPaymentMethod() {
        return getFirst(paymentMethod);
    }

    /**
     * The name of the credit card or other method of payment for the order.
     *
     * @param paymentMethod PaymentMethod value to set.
     */
    @Override
    public void addPaymentMethod(PaymentMethod paymentMethod) {
        this.paymentMethod = add(this.paymentMethod, paymentMethod);
    }

    private List<Date> scheduledPaymentDate;

    /**
     * The date the invoice is scheduled to be paid.
     *
     * @return {@link Date}
     */
    @Override
    public List<Date> getScheduledPaymentDateList() {
        return scheduledPaymentDate;
    }

    /**
     * The date the invoice is scheduled to be paid.
     *
     * @return {@link Date}
     */
    @Override
    public Date getScheduledPaymentDate() {
        return getFirst(scheduledPaymentDate);
    }

    /**
     * The date the invoice is scheduled to be paid.
     *
     * @param scheduledPaymentDate Date value to set.
     */
    @Override
    public void addScheduledPaymentDate(Date scheduledPaymentDate) {
        this.scheduledPaymentDate = add(this.scheduledPaymentDate, scheduledPaymentDate);
    }

    private List<Order> referencesOrder;

    /**
     * The Order(s) related to this Invoice. One or more Orders may be combined into a single Invoice.
     *
     * @return {@link Order}
     */
    @Override
    public List<Order> getReferencesOrderList() {
        return referencesOrder;
    }

    /**
     * The Order(s) related to this Invoice. One or more Orders may be combined into a single Invoice.
     *
     * @return {@link Order}
     */
    @Override
    public Order getReferencesOrder() {
        return getFirst(referencesOrder);
    }

    /**
     * The Order(s) related to this Invoice. One or more Orders may be combined into a single Invoice.
     *
     * @param referencesOrder Order value to set.
     */
    @Override
    public void addReferencesOrder(Order referencesOrder) {
        this.referencesOrder = add(this.referencesOrder, referencesOrder);
    }

    @JsonLdFieldTypes({ URL.class, CategoryCode.class, Text.class, Thing.class, PhysicalActivityCategory.class })
    private List<Object> category;

    /**
     * A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
     *
     * @return {@link URL} or {@link CategoryCode} or {@link Text} or {@link Thing} or {@link PhysicalActivityCategory}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1741">https://github.com/schemaorg/schemaorg/issues/1741</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     */
    @Override
    public <T> List<T> getCategoryList() {
        return (List<T>) category;
    }

    /**
     * A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
     *
     * @return {@link URL} or {@link CategoryCode} or {@link Text} or {@link Thing} or {@link PhysicalActivityCategory}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1741">https://github.com/schemaorg/schemaorg/issues/1741</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     */
    @Override
    public <T> T getCategory() {
        return (T) getFirst(category);
    }

    /**
     * A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
     *
     * @param category URL value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1741">https://github.com/schemaorg/schemaorg/issues/1741</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     */
    @Override
    public void addCategory(URL category) {
        this.category = add(this.category, category);
    }
    /**
     * A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
     *
     * @param category CategoryCode value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1741">https://github.com/schemaorg/schemaorg/issues/1741</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     */
    @Override
    public void addCategory(CategoryCode category) {
        this.category = add(this.category, category);
    }
    /**
     * A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
     *
     * @param category Text value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1741">https://github.com/schemaorg/schemaorg/issues/1741</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     */
    @Override
    public void addCategory(Text category) {
        this.category = add(this.category, category);
    }
    /**
     * A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
     *
     * @param category Thing value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1741">https://github.com/schemaorg/schemaorg/issues/1741</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     */
    @Override
    public void addCategory(Thing category) {
        this.category = add(this.category, category);
    }
    /**
     * A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
     *
     * @param category PhysicalActivityCategory value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1741">https://github.com/schemaorg/schemaorg/issues/1741</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     */
    @Override
    public void addCategory(PhysicalActivityCategory category) {
        this.category = add(this.category, category);
    }

    @JsonLdFieldTypes({ MonetaryAmount.class, PriceSpecification.class })
    private List<Object> minimumPaymentDue;

    /**
     * The minimum payment required at this time.
     *
     * @return {@link MonetaryAmount} or {@link PriceSpecification}
     */
    @Override
    public <T> List<T> getMinimumPaymentDueList() {
        return (List<T>) minimumPaymentDue;
    }

    /**
     * The minimum payment required at this time.
     *
     * @return {@link MonetaryAmount} or {@link PriceSpecification}
     */
    @Override
    public <T> T getMinimumPaymentDue() {
        return (T) getFirst(minimumPaymentDue);
    }

    /**
     * The minimum payment required at this time.
     *
     * @param minimumPaymentDue MonetaryAmount value to set.
     */
    @Override
    public void addMinimumPaymentDue(MonetaryAmount minimumPaymentDue) {
        this.minimumPaymentDue = add(this.minimumPaymentDue, minimumPaymentDue);
    }
    /**
     * The minimum payment required at this time.
     *
     * @param minimumPaymentDue PriceSpecification value to set.
     */
    @Override
    public void addMinimumPaymentDue(PriceSpecification minimumPaymentDue) {
        this.minimumPaymentDue = add(this.minimumPaymentDue, minimumPaymentDue);
    }

    private List<Action> potentialAction;

    /**
     * Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
     *
     * @return {@link Action}
     */
    @Override
    public List<Action> getPotentialActionList() {
        return potentialAction;
    }

    /**
     * Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
     *
     * @return {@link Action}
     */
    @Override
    public Action getPotentialAction() {
        return getFirst(potentialAction);
    }

    /**
     * Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
     *
     * @param potentialAction Action value to set.
     */
    @Override
    public void addPotentialAction(Action potentialAction) {
        this.potentialAction = add(this.potentialAction, potentialAction);
    }

    @JsonLdFieldTypes({ URL.class, CreativeWork.class })
    private List<Object> mainEntityOfPage;

    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     * @return {@link URL} or {@link CreativeWork}
     */
    @Override
    public <T> List<T> getMainEntityOfPageList() {
        return (List<T>) mainEntityOfPage;
    }

    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     * @return {@link URL} or {@link CreativeWork}
     */
    @Override
    public <T> T getMainEntityOfPage() {
        return (T) getFirst(mainEntityOfPage);
    }

    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     * @param mainEntityOfPage URL value to set.
     */
    @Override
    public void addMainEntityOfPage(URL mainEntityOfPage) {
        this.mainEntityOfPage = add(this.mainEntityOfPage, mainEntityOfPage);
    }
    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     * @param mainEntityOfPage CreativeWork value to set.
     */
    @Override
    public void addMainEntityOfPage(CreativeWork mainEntityOfPage) {
        this.mainEntityOfPage = add(this.mainEntityOfPage, mainEntityOfPage);
    }

    @JsonLdFieldTypes({ Event.class, CreativeWork.class })
    private List<Object> subjectOf;

    /**
     * A CreativeWork or Event about this Thing.
     *
     * @return {@link Event} or {@link CreativeWork}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public <T> List<T> getSubjectOfList() {
        return (List<T>) subjectOf;
    }

    /**
     * A CreativeWork or Event about this Thing.
     *
     * @return {@link Event} or {@link CreativeWork}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public <T> T getSubjectOf() {
        return (T) getFirst(subjectOf);
    }

    /**
     * A CreativeWork or Event about this Thing.
     *
     * @param subjectOf Event value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public void addSubjectOf(Event subjectOf) {
        this.subjectOf = add(this.subjectOf, subjectOf);
    }
    /**
     * A CreativeWork or Event about this Thing.
     *
     * @param subjectOf CreativeWork value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public void addSubjectOf(CreativeWork subjectOf) {
        this.subjectOf = add(this.subjectOf, subjectOf);
    }

    private List<URL> url;

    /**
     * URL of the item.
     *
     * @return {@link URL}
     */
    @Override
    public List<URL> getUrlList() {
        return url;
    }

    /**
     * URL of the item.
     *
     * @return {@link URL}
     */
    @Override
    public URL getUrl() {
        return getFirst(url);
    }

    /**
     * URL of the item.
     *
     * @param url URL value to set.
     */
    @Override
    public void addUrl(URL url) {
        this.url = add(this.url, url);
    }

    private List<Text> alternateName;

    /**
     * An alias for the item.
     *
     * @return {@link Text}
     */
    @Override
    public List<Text> getAlternateNameList() {
        return alternateName;
    }

    /**
     * An alias for the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getAlternateName() {
        return getFirst(alternateName);
    }

    /**
     * An alias for the item.
     *
     * @param alternateName Text value to set.
     */
    @Override
    public void addAlternateName(Text alternateName) {
        this.alternateName = add(this.alternateName, alternateName);
    }

    private List<URL> sameAs;

    /**
     * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
     *
     * @return {@link URL}
     */
    @Override
    public List<URL> getSameAsList() {
        return sameAs;
    }

    /**
     * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
     *
     * @return {@link URL}
     */
    @Override
    public URL getSameAs() {
        return getFirst(sameAs);
    }

    /**
     * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
     *
     * @param sameAs URL value to set.
     */
    @Override
    public void addSameAs(URL sameAs) {
        this.sameAs = add(this.sameAs, sameAs);
    }

    private List<Text> description;

    /**
     * A description of the item.
     *
     * @return {@link Text}
     */
    @Override
    public List<Text> getDescriptionList() {
        return description;
    }

    /**
     * A description of the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getDescription() {
        return getFirst(description);
    }

    /**
     * A description of the item.
     *
     * @param description Text value to set.
     */
    @Override
    public void addDescription(Text description) {
        this.description = add(this.description, description);
    }

    private List<Text> disambiguatingDescription;

    /**
     * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
     *
     * @return {@link Text}
     */
    @Override
    public List<Text> getDisambiguatingDescriptionList() {
        return disambiguatingDescription;
    }

    /**
     * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
     *
     * @return {@link Text}
     */
    @Override
    public Text getDisambiguatingDescription() {
        return getFirst(disambiguatingDescription);
    }

    /**
     * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
     *
     * @param disambiguatingDescription Text value to set.
     */
    @Override
    public void addDisambiguatingDescription(Text disambiguatingDescription) {
        this.disambiguatingDescription = add(this.disambiguatingDescription, disambiguatingDescription);
    }

    @JsonLdFieldTypes({ PropertyValue.class, URL.class, Text.class })
    private List<Object> identifier;

    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @return {@link PropertyValue} or {@link URL} or {@link Text}
     */
    @Override
    public <T> List<T> getIdentifierList() {
        return (List<T>) identifier;
    }

    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @return {@link PropertyValue} or {@link URL} or {@link Text}
     */
    @Override
    public <T> T getIdentifier() {
        return (T) getFirst(identifier);
    }

    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @param identifier PropertyValue value to set.
     */
    @Override
    public void addIdentifier(PropertyValue identifier) {
        this.identifier = add(this.identifier, identifier);
    }
    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @param identifier URL value to set.
     */
    @Override
    public void addIdentifier(URL identifier) {
        this.identifier = add(this.identifier, identifier);
    }
    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @param identifier Text value to set.
     */
    @Override
    public void addIdentifier(Text identifier) {
        this.identifier = add(this.identifier, identifier);
    }

    @JsonLdFieldTypes({ URL.class, ImageObject.class })
    private List<Object> image;

    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * @return {@link URL} or {@link ImageObject}
     */
    @Override
    public <T> List<T> getImageList() {
        return (List<T>) image;
    }

    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * @return {@link URL} or {@link ImageObject}
     */
    @Override
    public <T> T getImage() {
        return (T) getFirst(image);
    }

    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * @param image URL value to set.
     */
    @Override
    public void addImage(URL image) {
        this.image = add(this.image, image);
    }
    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * @param image ImageObject value to set.
     */
    @Override
    public void addImage(ImageObject image) {
        this.image = add(this.image, image);
    }

    private List<Text> name;

    /**
     * The name of the item.
     *
     * @return {@link Text}
     */
    @Override
    public List<Text> getNameList() {
        return name;
    }

    /**
     * The name of the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getName() {
        return getFirst(name);
    }

    /**
     * The name of the item.
     *
     * @param name Text value to set.
     */
    @Override
    public void addName(Text name) {
        this.name = add(this.name, name);
    }

    private List<URL> additionalType;

    /**
     * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
     *
     * @return {@link URL}
     */
    @Override
    public List<URL> getAdditionalTypeList() {
        return additionalType;
    }

    /**
     * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
     *
     * @return {@link URL}
     */
    @Override
    public URL getAdditionalType() {
        return getFirst(additionalType);
    }

    /**
     * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
     *
     * @param additionalType URL value to set.
     */
    @Override
    public void addAdditionalType(URL additionalType) {
        this.additionalType = add(this.additionalType, additionalType);
    }
}
