/*
 * This class is auto generated by the schema.org code generator program.
 * https://github.com/Kobee1203/schema-org-java
 * Do not edit the class manually.
 */
package org.schema.model.impl;

import org.schema.model.MonetaryAmount;
import org.schema.model.PriceSpecification;
import org.schema.model.Duration;
import org.schema.model.Order;
import org.schema.model.datatype.Text;
import org.schema.model.datatype.URL;
import org.schema.model.PhysicalActivityCategory;
import org.schema.model.Thing;
import org.schema.model.CategoryCode;
import org.schema.model.datatype.Date;
import org.schema.model.Organization;
import org.schema.model.Person;
import org.schema.model.datatype.DateTime;
import org.schema.model.PaymentStatusType;
import org.schema.model.PaymentMethod;
import org.schema.model.CreativeWork;
import org.schema.model.Action;
import org.schema.model.ImageObject;
import org.schema.model.Event;
import org.schema.model.PropertyValue;
import org.schema.model.JsonLdTypeName;
import org.schema.model.Intangible;
import org.schema.model.Invoice;

/**
 * A statement of the money due for goods or services; a bill.
 *
 * @see <a href="https://schema.org/Invoice">https://schema.org/Invoice</a>
 */
@JsonLdTypeName("schema:Invoice")
public class InvoiceImpl implements Invoice {

    private Object fTotalPaymentDue;

    /**
     * The total amount due.
     *
     * @return {@link MonetaryAmount} or {@link PriceSpecification}
     */
    @Override
    public <T> T getTotalPaymentDue() {
        return (T) fTotalPaymentDue;
    }

    /**
     * The total amount due.
     *
     */
    @Override
    public void setTotalPaymentDue(Object fTotalPaymentDue) {
        if(!(fTotalPaymentDue instanceof MonetaryAmount) && !(fTotalPaymentDue instanceof PriceSpecification)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'totalPaymentDue': " + fTotalPaymentDue);
        }
        this.fTotalPaymentDue = fTotalPaymentDue;
    }

    private Duration fBillingPeriod;

    /**
     * The time interval used to compute the invoice.
     *
     * @return {@link Duration}
     */
    @Override
    public Duration getBillingPeriod() {
        return fBillingPeriod;
    }

    /**
     * The time interval used to compute the invoice.
     *
     */
    @Override
    public void setBillingPeriod(Duration fBillingPeriod) {
        this.fBillingPeriod = fBillingPeriod;
    }

    private Order fReferencesOrder;

    /**
     * The Order(s) related to this Invoice. One or more Orders may be combined into a single Invoice.
     *
     * @return {@link Order}
     */
    @Override
    public Order getReferencesOrder() {
        return fReferencesOrder;
    }

    /**
     * The Order(s) related to this Invoice. One or more Orders may be combined into a single Invoice.
     *
     */
    @Override
    public void setReferencesOrder(Order fReferencesOrder) {
        this.fReferencesOrder = fReferencesOrder;
    }

    private Text fAccountId;

    /**
     * The identifier for the account the payment will be applied to.
     *
     * @return {@link Text}
     */
    @Override
    public Text getAccountId() {
        return fAccountId;
    }

    /**
     * The identifier for the account the payment will be applied to.
     *
     */
    @Override
    public void setAccountId(Text fAccountId) {
        this.fAccountId = fAccountId;
    }

    private Object fCategory;

    /**
     * A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
     *
     * @return {@link URL} or {@link Text} or {@link PhysicalActivityCategory} or {@link Thing} or {@link CategoryCode}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1741">https://github.com/schemaorg/schemaorg/issues/1741</a>
     */
    @Override
    public <T> T getCategory() {
        return (T) fCategory;
    }

    /**
     * A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
     *
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1741">https://github.com/schemaorg/schemaorg/issues/1741</a>
     */
    @Override
    public void setCategory(Object fCategory) {
        if(!(fCategory instanceof URL) && !(fCategory instanceof Text) && !(fCategory instanceof PhysicalActivityCategory) && !(fCategory instanceof Thing) && !(fCategory instanceof CategoryCode)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'category': " + fCategory);
        }
        this.fCategory = fCategory;
    }

    private Date fScheduledPaymentDate;

    /**
     * The date the invoice is scheduled to be paid.
     *
     * @return {@link Date}
     */
    @Override
    public Date getScheduledPaymentDate() {
        return fScheduledPaymentDate;
    }

    /**
     * The date the invoice is scheduled to be paid.
     *
     */
    @Override
    public void setScheduledPaymentDate(Date fScheduledPaymentDate) {
        this.fScheduledPaymentDate = fScheduledPaymentDate;
    }

    private Text fConfirmationNumber;

    /**
     * A number that confirms the given order or payment has been received.
     *
     * @return {@link Text}
     */
    @Override
    public Text getConfirmationNumber() {
        return fConfirmationNumber;
    }

    /**
     * A number that confirms the given order or payment has been received.
     *
     */
    @Override
    public void setConfirmationNumber(Text fConfirmationNumber) {
        this.fConfirmationNumber = fConfirmationNumber;
    }

    private Object fCustomer;

    /**
     * Party placing the order or paying the invoice.
     *
     * @return {@link Organization} or {@link Person}
     */
    @Override
    public <T> T getCustomer() {
        return (T) fCustomer;
    }

    /**
     * Party placing the order or paying the invoice.
     *
     */
    @Override
    public void setCustomer(Object fCustomer) {
        if(!(fCustomer instanceof Organization) && !(fCustomer instanceof Person)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'customer': " + fCustomer);
        }
        this.fCustomer = fCustomer;
    }

    private Object fProvider;

    /**
     * The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
     *
     * @return {@link Organization} or {@link Person}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2927">https://github.com/schemaorg/schemaorg/issues/2927</a>
     */
    @Override
    public <T> T getProvider() {
        return (T) fProvider;
    }

    /**
     * The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2927">https://github.com/schemaorg/schemaorg/issues/2927</a>
     */
    @Override
    public void setProvider(Object fProvider) {
        if(!(fProvider instanceof Organization) && !(fProvider instanceof Person)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'provider': " + fProvider);
        }
        this.fProvider = fProvider;
    }

    private Object fMinimumPaymentDue;

    /**
     * The minimum payment required at this time.
     *
     * @return {@link MonetaryAmount} or {@link PriceSpecification}
     */
    @Override
    public <T> T getMinimumPaymentDue() {
        return (T) fMinimumPaymentDue;
    }

    /**
     * The minimum payment required at this time.
     *
     */
    @Override
    public void setMinimumPaymentDue(Object fMinimumPaymentDue) {
        if(!(fMinimumPaymentDue instanceof MonetaryAmount) && !(fMinimumPaymentDue instanceof PriceSpecification)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'minimumPaymentDue': " + fMinimumPaymentDue);
        }
        this.fMinimumPaymentDue = fMinimumPaymentDue;
    }

    private Object fPaymentDueDate;

    /**
     * The date that payment is due.
     *
     * @return {@link DateTime} or {@link Date}
     */
    @Override
    public <T> T getPaymentDueDate() {
        return (T) fPaymentDueDate;
    }

    /**
     * The date that payment is due.
     *
     */
    @Override
    public void setPaymentDueDate(Object fPaymentDueDate) {
        if(!(fPaymentDueDate instanceof DateTime) && !(fPaymentDueDate instanceof Date)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'paymentDueDate': " + fPaymentDueDate);
        }
        this.fPaymentDueDate = fPaymentDueDate;
    }

    private Object fBroker;

    /**
     * An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
     *
     * @return {@link Person} or {@link Organization}
     */
    @Override
    public <T> T getBroker() {
        return (T) fBroker;
    }

    /**
     * An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
     *
     */
    @Override
    public void setBroker(Object fBroker) {
        if(!(fBroker instanceof Person) && !(fBroker instanceof Organization)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'broker': " + fBroker);
        }
        this.fBroker = fBroker;
    }

    private Object fPaymentStatus;

    /**
     * The status of payment; whether the invoice has been paid or not.
     *
     * @return {@link PaymentStatusType} or {@link Text}
     */
    @Override
    public <T> T getPaymentStatus() {
        return (T) fPaymentStatus;
    }

    /**
     * The status of payment; whether the invoice has been paid or not.
     *
     */
    @Override
    public void setPaymentStatus(Object fPaymentStatus) {
        if(!(fPaymentStatus instanceof PaymentStatusType) && !(fPaymentStatus instanceof Text)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'paymentStatus': " + fPaymentStatus);
        }
        this.fPaymentStatus = fPaymentStatus;
    }

    private Text fPaymentMethodId;

    /**
     * An identifier for the method of payment used (e.g. the last 4 digits of the credit card).
     *
     * @return {@link Text}
     */
    @Override
    public Text getPaymentMethodId() {
        return fPaymentMethodId;
    }

    /**
     * An identifier for the method of payment used (e.g. the last 4 digits of the credit card).
     *
     */
    @Override
    public void setPaymentMethodId(Text fPaymentMethodId) {
        this.fPaymentMethodId = fPaymentMethodId;
    }

    private DateTime fPaymentDue;

    /**
     * The date that payment is due.
     *
     * @return {@link DateTime}
     */
    @Override
    public DateTime getPaymentDue() {
        return fPaymentDue;
    }

    /**
     * The date that payment is due.
     *
     */
    @Override
    public void setPaymentDue(DateTime fPaymentDue) {
        this.fPaymentDue = fPaymentDue;
    }

    private PaymentMethod fPaymentMethod;

    /**
     * The name of the credit card or other method of payment for the order.
     *
     * @return {@link PaymentMethod}
     */
    @Override
    public PaymentMethod getPaymentMethod() {
        return fPaymentMethod;
    }

    /**
     * The name of the credit card or other method of payment for the order.
     *
     */
    @Override
    public void setPaymentMethod(PaymentMethod fPaymentMethod) {
        this.fPaymentMethod = fPaymentMethod;
    }

    private Object fMainEntityOfPage;

    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     * @return {@link CreativeWork} or {@link URL}
     */
    @Override
    public <T> T getMainEntityOfPage() {
        return (T) fMainEntityOfPage;
    }

    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     */
    @Override
    public void setMainEntityOfPage(Object fMainEntityOfPage) {
        if(!(fMainEntityOfPage instanceof CreativeWork) && !(fMainEntityOfPage instanceof URL)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'mainEntityOfPage': " + fMainEntityOfPage);
        }
        this.fMainEntityOfPage = fMainEntityOfPage;
    }

    private Text fAlternateName;

    /**
     * An alias for the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getAlternateName() {
        return fAlternateName;
    }

    /**
     * An alias for the item.
     *
     */
    @Override
    public void setAlternateName(Text fAlternateName) {
        this.fAlternateName = fAlternateName;
    }

    private Text fName;

    /**
     * The name of the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getName() {
        return fName;
    }

    /**
     * The name of the item.
     *
     */
    @Override
    public void setName(Text fName) {
        this.fName = fName;
    }

    private Action fPotentialAction;

    /**
     * Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
     *
     * @return {@link Action}
     */
    @Override
    public Action getPotentialAction() {
        return fPotentialAction;
    }

    /**
     * Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
     *
     */
    @Override
    public void setPotentialAction(Action fPotentialAction) {
        this.fPotentialAction = fPotentialAction;
    }

    private Object fImage;

    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * @return {@link URL} or {@link ImageObject}
     */
    @Override
    public <T> T getImage() {
        return (T) fImage;
    }

    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     */
    @Override
    public void setImage(Object fImage) {
        if(!(fImage instanceof URL) && !(fImage instanceof ImageObject)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'image': " + fImage);
        }
        this.fImage = fImage;
    }

    private URL fUrl;

    /**
     * URL of the item.
     *
     * @return {@link URL}
     */
    @Override
    public URL getUrl() {
        return fUrl;
    }

    /**
     * URL of the item.
     *
     */
    @Override
    public void setUrl(URL fUrl) {
        this.fUrl = fUrl;
    }

    private Text fDescription;

    /**
     * A description of the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getDescription() {
        return fDescription;
    }

    /**
     * A description of the item.
     *
     */
    @Override
    public void setDescription(Text fDescription) {
        this.fDescription = fDescription;
    }

    private Object fSubjectOf;

    /**
     * A CreativeWork or Event about this Thing.
     *
     * @return {@link Event} or {@link CreativeWork}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public <T> T getSubjectOf() {
        return (T) fSubjectOf;
    }

    /**
     * A CreativeWork or Event about this Thing.
     *
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public void setSubjectOf(Object fSubjectOf) {
        if(!(fSubjectOf instanceof Event) && !(fSubjectOf instanceof CreativeWork)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'subjectOf': " + fSubjectOf);
        }
        this.fSubjectOf = fSubjectOf;
    }

    private URL fAdditionalType;

    /**
     * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
     *
     * @return {@link URL}
     */
    @Override
    public URL getAdditionalType() {
        return fAdditionalType;
    }

    /**
     * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
     *
     */
    @Override
    public void setAdditionalType(URL fAdditionalType) {
        this.fAdditionalType = fAdditionalType;
    }

    private Text fDisambiguatingDescription;

    /**
     * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
     *
     * @return {@link Text}
     */
    @Override
    public Text getDisambiguatingDescription() {
        return fDisambiguatingDescription;
    }

    /**
     * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
     *
     */
    @Override
    public void setDisambiguatingDescription(Text fDisambiguatingDescription) {
        this.fDisambiguatingDescription = fDisambiguatingDescription;
    }

    private URL fSameAs;

    /**
     * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
     *
     * @return {@link URL}
     */
    @Override
    public URL getSameAs() {
        return fSameAs;
    }

    /**
     * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
     *
     */
    @Override
    public void setSameAs(URL fSameAs) {
        this.fSameAs = fSameAs;
    }

    private Object fIdentifier;

    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @return {@link URL} or {@link Text} or {@link PropertyValue}
     */
    @Override
    public <T> T getIdentifier() {
        return (T) fIdentifier;
    }

    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     */
    @Override
    public void setIdentifier(Object fIdentifier) {
        if(!(fIdentifier instanceof URL) && !(fIdentifier instanceof Text) && !(fIdentifier instanceof PropertyValue)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'identifier': " + fIdentifier);
        }
        this.fIdentifier = fIdentifier;
    }
}
