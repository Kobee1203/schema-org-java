/*
 * This class is auto generated by the schema.org code generator program.
 * https://github.com/Kobee1203/schema-org-java
 * Do not edit the class manually.
 */
package org.schema.model.impl;

import org.schema.model.AlignmentObject;
import org.schema.model.Course;
import org.schema.model.EducationalOccupationalCredential;
import org.schema.model.datatype.Text;
import org.schema.model.datatype.DateTime;
import org.schema.model.datatype.Date;
import org.schema.model.MonetaryAmountDistribution;
import org.schema.model.datatype.Number;
import org.schema.model.DayOfWeek;
import org.schema.model.Offer;
import org.schema.model.Demand;
import org.schema.model.datatype.Integer;
import org.schema.model.StructuredValue;
import org.schema.model.Organization;
import org.schema.model.Person;
import org.schema.model.datatype.URL;
import org.schema.model.Duration;
import org.schema.model.DefinedTerm;
import org.schema.model.CategoryCode;
import org.schema.model.CreativeWork;
import org.schema.model.Action;
import org.schema.model.ImageObject;
import org.schema.model.Event;
import org.schema.model.PropertyValue;
import org.schema.model.Thing;
import org.schema.model.JsonLdTypeName;
import org.schema.model.Intangible;
import org.schema.model.EducationalOccupationalProgram;

/**
 * A program offered by an institution which determines the learning progress to achieve an outcome, usually a credential like a degree or certificate. This would define a discrete set of opportunities (e.g., job, courses) that together constitute a program with a clear start, end, set of requirements, and transition to a new occupational opportunity (e.g., a job), or sometimes a higher educational opportunity (e.g., an advanced degree).
 *
 * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
 * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
 * @see <a href="https://schema.org/EducationalOccupationalProgram">https://schema.org/EducationalOccupationalProgram</a>
 */
@JsonLdTypeName("schema:EducationalOccupationalProgram")
public class EducationalOccupationalProgramImpl implements EducationalOccupationalProgram {

    private Object fProgramPrerequisites;

    /**
     * Prerequisites for enrolling in the program.
     *
     * @return {@link AlignmentObject} or {@link Course} or {@link EducationalOccupationalCredential} or {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     */
    @Override
    public <T> T getProgramPrerequisites() {
        return (T) fProgramPrerequisites;
    }

    /**
     * Prerequisites for enrolling in the program.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     */
    @Override
    public void setProgramPrerequisites(Object fProgramPrerequisites) {
        if(!(fProgramPrerequisites instanceof AlignmentObject) && !(fProgramPrerequisites instanceof Course) && !(fProgramPrerequisites instanceof EducationalOccupationalCredential) && !(fProgramPrerequisites instanceof Text)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'programPrerequisites': " + fProgramPrerequisites);
        }
        this.fProgramPrerequisites = fProgramPrerequisites;
    }

    private Course fHasCourse;

    /**
     * A course or class that is one of the learning opportunities that constitute an educational / occupational program. No information is implied about whether the course is mandatory or optional; no guarantee is implied about whether the course will be available to everyone on the program.
     *
     * @return {@link Course}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2483">https://github.com/schemaorg/schemaorg/issues/2483</a>
     */
    @Override
    public Course getHasCourse() {
        return fHasCourse;
    }

    /**
     * A course or class that is one of the learning opportunities that constitute an educational / occupational program. No information is implied about whether the course is mandatory or optional; no guarantee is implied about whether the course will be available to everyone on the program.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2483">https://github.com/schemaorg/schemaorg/issues/2483</a>
     */
    @Override
    public void setHasCourse(Course fHasCourse) {
        this.fHasCourse = fHasCourse;
    }

    private Object fStartDate;

    /**
     * The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
     *
     * @return {@link DateTime} or {@link Date}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2486">https://github.com/schemaorg/schemaorg/issues/2486</a>
     */
    @Override
    public <T> T getStartDate() {
        return (T) fStartDate;
    }

    /**
     * The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
     *
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2486">https://github.com/schemaorg/schemaorg/issues/2486</a>
     */
    @Override
    public void setStartDate(Object fStartDate) {
        if(!(fStartDate instanceof DateTime) && !(fStartDate instanceof Date)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'startDate': " + fStartDate);
        }
        this.fStartDate = fStartDate;
    }

    private MonetaryAmountDistribution fSalaryUponCompletion;

    /**
     * The expected salary upon completing the training.
     *
     * @return {@link MonetaryAmountDistribution}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     */
    @Override
    public MonetaryAmountDistribution getSalaryUponCompletion() {
        return fSalaryUponCompletion;
    }

    /**
     * The expected salary upon completing the training.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     */
    @Override
    public void setSalaryUponCompletion(MonetaryAmountDistribution fSalaryUponCompletion) {
        this.fSalaryUponCompletion = fSalaryUponCompletion;
    }

    private Number fTermsPerYear;

    /**
     * The number of times terms of study are offered per year. Semesters and quarters are common units for term. For example, if the student can only take 2 semesters for the program in one year, then termsPerYear should be 2.
     *
     * @return {@link Number}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2419">https://github.com/schemaorg/schemaorg/issues/2419</a>
     */
    @Override
    public Number getTermsPerYear() {
        return fTermsPerYear;
    }

    /**
     * The number of times terms of study are offered per year. Semesters and quarters are common units for term. For example, if the student can only take 2 semesters for the program in one year, then termsPerYear should be 2.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2419">https://github.com/schemaorg/schemaorg/issues/2419</a>
     */
    @Override
    public void setTermsPerYear(Number fTermsPerYear) {
        this.fTermsPerYear = fTermsPerYear;
    }

    private DayOfWeek fDayOfWeek;

    /**
     * The day of the week for which these opening hours are valid.
     *
     * @return {@link DayOfWeek}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public DayOfWeek getDayOfWeek() {
        return fDayOfWeek;
    }

    /**
     * The day of the week for which these opening hours are valid.
     *
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public void setDayOfWeek(DayOfWeek fDayOfWeek) {
        this.fDayOfWeek = fDayOfWeek;
    }

    private Object fOffers;

    /**
     * An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.
     *       
     *
     * @return {@link Offer} or {@link Demand}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     */
    @Override
    public <T> T getOffers() {
        return (T) fOffers;
    }

    /**
     * An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.
     *       
     *
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     */
    @Override
    public void setOffers(Object fOffers) {
        if(!(fOffers instanceof Offer) && !(fOffers instanceof Demand)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'offers': " + fOffers);
        }
        this.fOffers = fOffers;
    }

    private Object fTypicalCreditsPerTerm;

    /**
     * The number of credits or units a full-time student would be expected to take in 1 term however 'term' is defined by the institution.
     *
     * @return {@link Integer} or {@link StructuredValue}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2419">https://github.com/schemaorg/schemaorg/issues/2419</a>
     */
    @Override
    public <T> T getTypicalCreditsPerTerm() {
        return (T) fTypicalCreditsPerTerm;
    }

    /**
     * The number of credits or units a full-time student would be expected to take in 1 term however 'term' is defined by the institution.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2419">https://github.com/schemaorg/schemaorg/issues/2419</a>
     */
    @Override
    public void setTypicalCreditsPerTerm(Object fTypicalCreditsPerTerm) {
        if(!(fTypicalCreditsPerTerm instanceof Integer) && !(fTypicalCreditsPerTerm instanceof StructuredValue)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'typicalCreditsPerTerm': " + fTypicalCreditsPerTerm);
        }
        this.fTypicalCreditsPerTerm = fTypicalCreditsPerTerm;
    }

    private Date fApplicationStartDate;

    /**
     * The date at which the program begins collecting applications for the next enrollment cycle.
     *
     * @return {@link Date}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2419">https://github.com/schemaorg/schemaorg/issues/2419</a>
     */
    @Override
    public Date getApplicationStartDate() {
        return fApplicationStartDate;
    }

    /**
     * The date at which the program begins collecting applications for the next enrollment cycle.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2419">https://github.com/schemaorg/schemaorg/issues/2419</a>
     */
    @Override
    public void setApplicationStartDate(Date fApplicationStartDate) {
        this.fApplicationStartDate = fApplicationStartDate;
    }

    private Text fTimeOfDay;

    /**
     * The time of day the program normally runs. For example, "evenings".
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2419">https://github.com/schemaorg/schemaorg/issues/2419</a>
     */
    @Override
    public Text getTimeOfDay() {
        return fTimeOfDay;
    }

    /**
     * The time of day the program normally runs. For example, "evenings".
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2419">https://github.com/schemaorg/schemaorg/issues/2419</a>
     */
    @Override
    public void setTimeOfDay(Text fTimeOfDay) {
        this.fTimeOfDay = fTimeOfDay;
    }

    private Object fEndDate;

    /**
     * The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
     *
     * @return {@link Date} or {@link DateTime}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2486">https://github.com/schemaorg/schemaorg/issues/2486</a>
     */
    @Override
    public <T> T getEndDate() {
        return (T) fEndDate;
    }

    /**
     * The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
     *
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2486">https://github.com/schemaorg/schemaorg/issues/2486</a>
     */
    @Override
    public void setEndDate(Object fEndDate) {
        if(!(fEndDate instanceof Date) && !(fEndDate instanceof DateTime)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'endDate': " + fEndDate);
        }
        this.fEndDate = fEndDate;
    }

    private Object fProvider;

    /**
     * The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
     *
     * @return {@link Organization} or {@link Person}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2927">https://github.com/schemaorg/schemaorg/issues/2927</a>
     */
    @Override
    public <T> T getProvider() {
        return (T) fProvider;
    }

    /**
     * The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2927">https://github.com/schemaorg/schemaorg/issues/2927</a>
     */
    @Override
    public void setProvider(Object fProvider) {
        if(!(fProvider instanceof Organization) && !(fProvider instanceof Person)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'provider': " + fProvider);
        }
        this.fProvider = fProvider;
    }

    private MonetaryAmountDistribution fTrainingSalary;

    /**
     * The estimated salary earned while in the program.
     *
     * @return {@link MonetaryAmountDistribution}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2460">https://github.com/schemaorg/schemaorg/issues/2460</a>
     */
    @Override
    public MonetaryAmountDistribution getTrainingSalary() {
        return fTrainingSalary;
    }

    /**
     * The estimated salary earned while in the program.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2460">https://github.com/schemaorg/schemaorg/issues/2460</a>
     */
    @Override
    public void setTrainingSalary(MonetaryAmountDistribution fTrainingSalary) {
        this.fTrainingSalary = fTrainingSalary;
    }

    private Object fEducationalCredentialAwarded;

    /**
     * A description of the qualification, award, certificate, diploma or other educational credential awarded as a consequence of successful completion of this course or program.
     *
     * @return {@link URL} or {@link EducationalOccupationalCredential} or {@link Text}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     */
    @Override
    public <T> T getEducationalCredentialAwarded() {
        return (T) fEducationalCredentialAwarded;
    }

    /**
     * A description of the qualification, award, certificate, diploma or other educational credential awarded as a consequence of successful completion of this course or program.
     *
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     */
    @Override
    public void setEducationalCredentialAwarded(Object fEducationalCredentialAwarded) {
        if(!(fEducationalCredentialAwarded instanceof URL) && !(fEducationalCredentialAwarded instanceof EducationalOccupationalCredential) && !(fEducationalCredentialAwarded instanceof Text)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'educationalCredentialAwarded': " + fEducationalCredentialAwarded);
        }
        this.fEducationalCredentialAwarded = fEducationalCredentialAwarded;
    }

    private Object fNumberOfCredits;

    /**
     * The number of credits or units awarded by a Course or required to complete an EducationalOccupationalProgram.
     *
     * @return {@link Integer} or {@link StructuredValue}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2419">https://github.com/schemaorg/schemaorg/issues/2419</a>
     */
    @Override
    public <T> T getNumberOfCredits() {
        return (T) fNumberOfCredits;
    }

    /**
     * The number of credits or units awarded by a Course or required to complete an EducationalOccupationalProgram.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2419">https://github.com/schemaorg/schemaorg/issues/2419</a>
     */
    @Override
    public void setNumberOfCredits(Object fNumberOfCredits) {
        if(!(fNumberOfCredits instanceof Integer) && !(fNumberOfCredits instanceof StructuredValue)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'numberOfCredits': " + fNumberOfCredits);
        }
        this.fNumberOfCredits = fNumberOfCredits;
    }

    private Duration fTimeToComplete;

    /**
     * The expected length of time to complete the program if attending full-time.
     *
     * @return {@link Duration}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     */
    @Override
    public Duration getTimeToComplete() {
        return fTimeToComplete;
    }

    /**
     * The expected length of time to complete the program if attending full-time.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     */
    @Override
    public void setTimeToComplete(Duration fTimeToComplete) {
        this.fTimeToComplete = fTimeToComplete;
    }

    private Object fOccupationalCredentialAwarded;

    /**
     * A description of the qualification, award, certificate, diploma or other occupational credential awarded as a consequence of successful completion of this course or program.
     *
     * @return {@link EducationalOccupationalCredential} or {@link Text} or {@link URL}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     */
    @Override
    public <T> T getOccupationalCredentialAwarded() {
        return (T) fOccupationalCredentialAwarded;
    }

    /**
     * A description of the qualification, award, certificate, diploma or other occupational credential awarded as a consequence of successful completion of this course or program.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     */
    @Override
    public void setOccupationalCredentialAwarded(Object fOccupationalCredentialAwarded) {
        if(!(fOccupationalCredentialAwarded instanceof EducationalOccupationalCredential) && !(fOccupationalCredentialAwarded instanceof Text) && !(fOccupationalCredentialAwarded instanceof URL)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'occupationalCredentialAwarded': " + fOccupationalCredentialAwarded);
        }
        this.fOccupationalCredentialAwarded = fOccupationalCredentialAwarded;
    }

    private Duration fTermDuration;

    /**
     * The amount of time in a term as defined by the institution. A term is a length of time where students take one or more classes. Semesters and quarters are common units for term.
     *
     * @return {@link Duration}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2419">https://github.com/schemaorg/schemaorg/issues/2419</a>
     */
    @Override
    public Duration getTermDuration() {
        return fTermDuration;
    }

    /**
     * The amount of time in a term as defined by the institution. A term is a length of time where students take one or more classes. Semesters and quarters are common units for term.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2419">https://github.com/schemaorg/schemaorg/issues/2419</a>
     */
    @Override
    public void setTermDuration(Duration fTermDuration) {
        this.fTermDuration = fTermDuration;
    }

    private Object fEducationalProgramMode;

    /**
     * Similar to courseMode, The medium or means of delivery of the program as a whole. The value may either be a text label (e.g. "online", "onsite" or "blended"; "synchronous" or "asynchronous"; "full-time" or "part-time") or a URL reference to a term from a controlled vocabulary (e.g. https://ceds.ed.gov/element/001311#Asynchronous ).
     *
     * @return {@link URL} or {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2419">https://github.com/schemaorg/schemaorg/issues/2419</a>
     */
    @Override
    public <T> T getEducationalProgramMode() {
        return (T) fEducationalProgramMode;
    }

    /**
     * Similar to courseMode, The medium or means of delivery of the program as a whole. The value may either be a text label (e.g. "online", "onsite" or "blended"; "synchronous" or "asynchronous"; "full-time" or "part-time") or a URL reference to a term from a controlled vocabulary (e.g. https://ceds.ed.gov/element/001311#Asynchronous ).
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2419">https://github.com/schemaorg/schemaorg/issues/2419</a>
     */
    @Override
    public void setEducationalProgramMode(Object fEducationalProgramMode) {
        if(!(fEducationalProgramMode instanceof URL) && !(fEducationalProgramMode instanceof Text)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'educationalProgramMode': " + fEducationalProgramMode);
        }
        this.fEducationalProgramMode = fEducationalProgramMode;
    }

    private Object fProgramType;

    /**
     * The type of educational or occupational program. For example, classroom, internship, alternance, etc..
     *
     * @return {@link Text} or {@link DefinedTerm}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2460">https://github.com/schemaorg/schemaorg/issues/2460</a>
     */
    @Override
    public <T> T getProgramType() {
        return (T) fProgramType;
    }

    /**
     * The type of educational or occupational program. For example, classroom, internship, alternance, etc..
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2460">https://github.com/schemaorg/schemaorg/issues/2460</a>
     */
    @Override
    public void setProgramType(Object fProgramType) {
        if(!(fProgramType instanceof Text) && !(fProgramType instanceof DefinedTerm)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'programType': " + fProgramType);
        }
        this.fProgramType = fProgramType;
    }

    private Integer fMaximumEnrollment;

    /**
     * The maximum number of students who may be enrolled in the program.
     *
     * @return {@link Integer}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2419">https://github.com/schemaorg/schemaorg/issues/2419</a>
     */
    @Override
    public Integer getMaximumEnrollment() {
        return fMaximumEnrollment;
    }

    /**
     * The maximum number of students who may be enrolled in the program.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2419">https://github.com/schemaorg/schemaorg/issues/2419</a>
     */
    @Override
    public void setMaximumEnrollment(Integer fMaximumEnrollment) {
        this.fMaximumEnrollment = fMaximumEnrollment;
    }

    private Object fFinancialAidEligible;

    /**
     * A financial aid type or program which students may use to pay for tuition or fees associated with the program.
     *
     * @return {@link Text} or {@link DefinedTerm}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2418">https://github.com/schemaorg/schemaorg/issues/2418</a>
     */
    @Override
    public <T> T getFinancialAidEligible() {
        return (T) fFinancialAidEligible;
    }

    /**
     * A financial aid type or program which students may use to pay for tuition or fees associated with the program.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2418">https://github.com/schemaorg/schemaorg/issues/2418</a>
     */
    @Override
    public void setFinancialAidEligible(Object fFinancialAidEligible) {
        if(!(fFinancialAidEligible instanceof Text) && !(fFinancialAidEligible instanceof DefinedTerm)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'financialAidEligible': " + fFinancialAidEligible);
        }
        this.fFinancialAidEligible = fFinancialAidEligible;
    }

    private Date fApplicationDeadline;

    /**
     * The date at which the program stops collecting applications for the next enrollment cycle.
     *
     * @return {@link Date}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2419">https://github.com/schemaorg/schemaorg/issues/2419</a>
     */
    @Override
    public Date getApplicationDeadline() {
        return fApplicationDeadline;
    }

    /**
     * The date at which the program stops collecting applications for the next enrollment cycle.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2419">https://github.com/schemaorg/schemaorg/issues/2419</a>
     */
    @Override
    public void setApplicationDeadline(Date fApplicationDeadline) {
        this.fApplicationDeadline = fApplicationDeadline;
    }

    private Object fOccupationalCategory;

    /**
     * A category describing the job, preferably using a term from a taxonomy such as [BLS O*NET-SOC](http://www.onetcenter.org/taxonomy.html), [ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.<br/>
     * Note: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC.
     *
     * @return {@link CategoryCode} or {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2460">https://github.com/schemaorg/schemaorg/issues/2460</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2192">https://github.com/schemaorg/schemaorg/issues/2192</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public <T> T getOccupationalCategory() {
        return (T) fOccupationalCategory;
    }

    /**
     * A category describing the job, preferably using a term from a taxonomy such as [BLS O*NET-SOC](http://www.onetcenter.org/taxonomy.html), [ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.<br/>
     * Note: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2460">https://github.com/schemaorg/schemaorg/issues/2460</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2192">https://github.com/schemaorg/schemaorg/issues/2192</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setOccupationalCategory(Object fOccupationalCategory) {
        if(!(fOccupationalCategory instanceof CategoryCode) && !(fOccupationalCategory instanceof Text)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'occupationalCategory': " + fOccupationalCategory);
        }
        this.fOccupationalCategory = fOccupationalCategory;
    }

    private Object fMainEntityOfPage;

    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     * @return {@link CreativeWork} or {@link URL}
     */
    @Override
    public <T> T getMainEntityOfPage() {
        return (T) fMainEntityOfPage;
    }

    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     */
    @Override
    public void setMainEntityOfPage(Object fMainEntityOfPage) {
        if(!(fMainEntityOfPage instanceof CreativeWork) && !(fMainEntityOfPage instanceof URL)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'mainEntityOfPage': " + fMainEntityOfPage);
        }
        this.fMainEntityOfPage = fMainEntityOfPage;
    }

    private Text fAlternateName;

    /**
     * An alias for the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getAlternateName() {
        return fAlternateName;
    }

    /**
     * An alias for the item.
     *
     */
    @Override
    public void setAlternateName(Text fAlternateName) {
        this.fAlternateName = fAlternateName;
    }

    private Text fName;

    /**
     * The name of the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getName() {
        return fName;
    }

    /**
     * The name of the item.
     *
     */
    @Override
    public void setName(Text fName) {
        this.fName = fName;
    }

    private Action fPotentialAction;

    /**
     * Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
     *
     * @return {@link Action}
     */
    @Override
    public Action getPotentialAction() {
        return fPotentialAction;
    }

    /**
     * Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
     *
     */
    @Override
    public void setPotentialAction(Action fPotentialAction) {
        this.fPotentialAction = fPotentialAction;
    }

    private Object fImage;

    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * @return {@link URL} or {@link ImageObject}
     */
    @Override
    public <T> T getImage() {
        return (T) fImage;
    }

    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     */
    @Override
    public void setImage(Object fImage) {
        if(!(fImage instanceof URL) && !(fImage instanceof ImageObject)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'image': " + fImage);
        }
        this.fImage = fImage;
    }

    private URL fUrl;

    /**
     * URL of the item.
     *
     * @return {@link URL}
     */
    @Override
    public URL getUrl() {
        return fUrl;
    }

    /**
     * URL of the item.
     *
     */
    @Override
    public void setUrl(URL fUrl) {
        this.fUrl = fUrl;
    }

    private Text fDescription;

    /**
     * A description of the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getDescription() {
        return fDescription;
    }

    /**
     * A description of the item.
     *
     */
    @Override
    public void setDescription(Text fDescription) {
        this.fDescription = fDescription;
    }

    private Object fSubjectOf;

    /**
     * A CreativeWork or Event about this Thing.
     *
     * @return {@link Event} or {@link CreativeWork}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public <T> T getSubjectOf() {
        return (T) fSubjectOf;
    }

    /**
     * A CreativeWork or Event about this Thing.
     *
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public void setSubjectOf(Object fSubjectOf) {
        if(!(fSubjectOf instanceof Event) && !(fSubjectOf instanceof CreativeWork)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'subjectOf': " + fSubjectOf);
        }
        this.fSubjectOf = fSubjectOf;
    }

    private URL fAdditionalType;

    /**
     * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
     *
     * @return {@link URL}
     */
    @Override
    public URL getAdditionalType() {
        return fAdditionalType;
    }

    /**
     * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
     *
     */
    @Override
    public void setAdditionalType(URL fAdditionalType) {
        this.fAdditionalType = fAdditionalType;
    }

    private Text fDisambiguatingDescription;

    /**
     * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
     *
     * @return {@link Text}
     */
    @Override
    public Text getDisambiguatingDescription() {
        return fDisambiguatingDescription;
    }

    /**
     * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
     *
     */
    @Override
    public void setDisambiguatingDescription(Text fDisambiguatingDescription) {
        this.fDisambiguatingDescription = fDisambiguatingDescription;
    }

    private URL fSameAs;

    /**
     * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
     *
     * @return {@link URL}
     */
    @Override
    public URL getSameAs() {
        return fSameAs;
    }

    /**
     * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
     *
     */
    @Override
    public void setSameAs(URL fSameAs) {
        this.fSameAs = fSameAs;
    }

    private Object fIdentifier;

    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @return {@link URL} or {@link Text} or {@link PropertyValue}
     */
    @Override
    public <T> T getIdentifier() {
        return (T) fIdentifier;
    }

    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     */
    @Override
    public void setIdentifier(Object fIdentifier) {
        if(!(fIdentifier instanceof URL) && !(fIdentifier instanceof Text) && !(fIdentifier instanceof PropertyValue)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'identifier': " + fIdentifier);
        }
        this.fIdentifier = fIdentifier;
    }
}
