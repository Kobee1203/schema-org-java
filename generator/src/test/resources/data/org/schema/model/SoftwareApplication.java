/*
 * This class is auto generated by the schema.org code generator program.
 * https://github.com/Kobee1203/schema-org-java
 * Do not edit the class manually.
 */
package org.schema.model;

import org.schema.model.datatype.Text;
import org.schema.model.datatype.URL;
import org.schema.model.CreativeWork;
import org.schema.model.SoftwareApplication;
import org.schema.model.ImageObject;
import org.schema.model.DataFeed;

/**
 * A software application.
 *
 * @see <a href="https://schema.org/SoftwareApplication">https://schema.org/SoftwareApplication</a>
 */
public interface SoftwareApplication extends CreativeWork {

    /**
     * Countries for which the application is supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
     *
     * @return {@link Text}
     */
    Text getCountriesSupported();

    /**
     * Countries for which the application is supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
     *
     */
    void setCountriesSupported(Text fCountriesSupported);

    /**
     * URL at which the app may be installed, if different from the URL of the item.
     *
     * @return {@link URL}
     */
    URL getInstallUrl();

    /**
     * URL at which the app may be installed, if different from the URL of the item.
     *
     */
    void setInstallUrl(URL fInstallUrl);

    /**
     * Operating systems supported (Windows 7, OSX 10.6, Android 1.6).
     *
     * @return {@link Text}
     */
    Text getOperatingSystem();

    /**
     * Operating systems supported (Windows 7, OSX 10.6, Android 1.6).
     *
     */
    void setOperatingSystem(Text fOperatingSystem);

    /**
     * Minimum memory requirements.
     *
     * @return {@link Text} or {@link URL}
     */
    <T> T getMemoryRequirements();

    /**
     * Minimum memory requirements.
     *
     */
    void setMemoryRequirements(Object fMemoryRequirements);

    /**
     * Version of the software instance.
     *
     * @return {@link Text}
     */
    Text getSoftwareVersion();

    /**
     * Version of the software instance.
     *
     */
    void setSoftwareVersion(Text fSoftwareVersion);

    /**
     * Storage requirements (free space required).
     *
     * @return {@link URL} or {@link Text}
     */
    <T> T getStorageRequirements();

    /**
     * Storage requirements (free space required).
     *
     */
    void setStorageRequirements(Object fStorageRequirements);

    /**
     * Software application help.
     *
     * @return {@link CreativeWork}
     */
    CreativeWork getSoftwareHelp();

    /**
     * Software application help.
     *
     */
    void setSoftwareHelp(CreativeWork fSoftwareHelp);

    /**
     * Subcategory of the application, e.g. 'Arcade Game'.
     *
     * @return {@link URL} or {@link Text}
     */
    <T> T getApplicationSubCategory();

    /**
     * Subcategory of the application, e.g. 'Arcade Game'.
     *
     */
    void setApplicationSubCategory(Object fApplicationSubCategory);

    /**
     * If the file can be downloaded, URL to download the binary.
     *
     * @return {@link URL}
     */
    URL getDownloadUrl();

    /**
     * If the file can be downloaded, URL to download the binary.
     *
     */
    void setDownloadUrl(URL fDownloadUrl);

    /**
     * Type of software application, e.g. 'Game, Multimedia'.
     *
     * @return {@link Text} or {@link URL}
     */
    <T> T getApplicationCategory();

    /**
     * Type of software application, e.g. 'Game, Multimedia'.
     *
     */
    void setApplicationCategory(Object fApplicationCategory);

    /**
     * Countries for which the application is not supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
     *
     * @return {@link Text}
     */
    Text getCountriesNotSupported();

    /**
     * Countries for which the application is not supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
     *
     */
    void setCountriesNotSupported(Text fCountriesNotSupported);

    /**
     * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime).
     *
     * @return {@link URL} or {@link Text}
     */
    <T> T getSoftwareRequirements();

    /**
     * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime).
     *
     */
    void setSoftwareRequirements(Object fSoftwareRequirements);

    /**
     * Additional content for a software application.
     *
     * @return {@link SoftwareApplication}
     */
    SoftwareApplication getSoftwareAddOn();

    /**
     * Additional content for a software application.
     *
     */
    void setSoftwareAddOn(SoftwareApplication fSoftwareAddOn);

    /**
     * The name of the application suite to which the application belongs (e.g. Excel belongs to Office).
     *
     * @return {@link Text}
     */
    Text getApplicationSuite();

    /**
     * The name of the application suite to which the application belongs (e.g. Excel belongs to Office).
     *
     */
    void setApplicationSuite(Text fApplicationSuite);

    /**
     * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime).
     *
     * @return {@link URL} or {@link Text}
     */
    <T> T getRequirements();

    /**
     * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime).
     *
     */
    void setRequirements(Object fRequirements);

    /**
     * Permission(s) required to run the app (for example, a mobile app may require full internet access or may run only on wifi).
     *
     * @return {@link Text}
     */
    Text getPermissions();

    /**
     * Permission(s) required to run the app (for example, a mobile app may require full internet access or may run only on wifi).
     *
     */
    void setPermissions(Text fPermissions);

    /**
     * Processor architecture required to run the application (e.g. IA64).
     *
     * @return {@link Text}
     */
    Text getProcessorRequirements();

    /**
     * Processor architecture required to run the application (e.g. IA64).
     *
     */
    void setProcessorRequirements(Text fProcessorRequirements);

    /**
     * A link to a screenshot image of the app.
     *
     * @return {@link ImageObject} or {@link URL}
     */
    <T> T getScreenshot();

    /**
     * A link to a screenshot image of the app.
     *
     */
    void setScreenshot(Object fScreenshot);

    /**
     * Features or modules provided by this application (and possibly required by other applications).
     *
     * @return {@link Text} or {@link URL}
     */
    <T> T getFeatureList();

    /**
     * Features or modules provided by this application (and possibly required by other applications).
     *
     */
    void setFeatureList(Object fFeatureList);

    /**
     * Description of what changed in this version.
     *
     * @return {@link URL} or {@link Text}
     */
    <T> T getReleaseNotes();

    /**
     * Description of what changed in this version.
     *
     */
    void setReleaseNotes(Object fReleaseNotes);

    /**
     * Supporting data for a SoftwareApplication.
     *
     * @return {@link DataFeed}
     */
    DataFeed getSupportingData();

    /**
     * Supporting data for a SoftwareApplication.
     *
     */
    void setSupportingData(DataFeed fSupportingData);

    /**
     * Size of the application / package (e.g. 18MB). In the absence of a unit (MB, KB etc.), KB will be assumed.
     *
     * @return {@link Text}
     */
    Text getFileSize();

    /**
     * Size of the application / package (e.g. 18MB). In the absence of a unit (MB, KB etc.), KB will be assumed.
     *
     */
    void setFileSize(Text fFileSize);

    /**
     * Device required to run the application. Used in cases where a specific make/model is required to run the application.
     *
     * @return {@link Text}
     */
    Text getDevice();

    /**
     * Device required to run the application. Used in cases where a specific make/model is required to run the application.
     *
     */
    void setDevice(Text fDevice);

    /**
     * Device required to run the application. Used in cases where a specific make/model is required to run the application.
     *
     * @return {@link Text}
     */
    Text getAvailableOnDevice();

    /**
     * Device required to run the application. Used in cases where a specific make/model is required to run the application.
     *
     */
    void setAvailableOnDevice(Text fAvailableOnDevice);
}
