/*
 * This class is auto generated by the schema.org code generator program.
 * https://github.com/Kobee1203/schema-org-java
 * Do not edit the class manually.
 */
package org.schema.model;

import org.schema.model.datatype.Text;
import org.schema.model.datatype.URL;
import org.schema.model.CreativeWork;
import org.schema.model.SoftwareApplication;
import org.schema.model.ImageObject;
import org.schema.model.DataFeed;

/**
 * A software application.
 *
 * @see <a href="https://schema.org/SoftwareApplication">https://schema.org/SoftwareApplication</a>
 */
public interface SoftwareApplication extends CreativeWork {

    /**
     * Countries for which the application is supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
     *
     * @return {@link Text}
     */
    Text getCountriesSupported();

    /**
     * Countries for which the application is supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
     *
     * @param countriesSupported Text value to set.
     */
    void setCountriesSupported(Text countriesSupported);

    /**
     * URL at which the app may be installed, if different from the URL of the item.
     *
     * @return {@link URL}
     */
    URL getInstallUrl();

    /**
     * URL at which the app may be installed, if different from the URL of the item.
     *
     * @param installUrl URL value to set.
     */
    void setInstallUrl(URL installUrl);

    /**
     * Operating systems supported (Windows 7, OSX 10.6, Android 1.6).
     *
     * @return {@link Text}
     */
    Text getOperatingSystem();

    /**
     * Operating systems supported (Windows 7, OSX 10.6, Android 1.6).
     *
     * @param operatingSystem Text value to set.
     */
    void setOperatingSystem(Text operatingSystem);

    /**
     * Minimum memory requirements.
     *
     * @return {@link Text} or {@link URL}
     */
    <T> T getMemoryRequirements();

    /**
     * Minimum memory requirements.
     *
     * @param memoryRequirements Text value to set.
     */
    void setMemoryRequirements(Text memoryRequirements);
    /**
     * Minimum memory requirements.
     *
     * @param memoryRequirements URL value to set.
     */
    void setMemoryRequirements(URL memoryRequirements);

    /**
     * Version of the software instance.
     *
     * @return {@link Text}
     */
    Text getSoftwareVersion();

    /**
     * Version of the software instance.
     *
     * @param softwareVersion Text value to set.
     */
    void setSoftwareVersion(Text softwareVersion);

    /**
     * Storage requirements (free space required).
     *
     * @return {@link URL} or {@link Text}
     */
    <T> T getStorageRequirements();

    /**
     * Storage requirements (free space required).
     *
     * @param storageRequirements URL value to set.
     */
    void setStorageRequirements(URL storageRequirements);
    /**
     * Storage requirements (free space required).
     *
     * @param storageRequirements Text value to set.
     */
    void setStorageRequirements(Text storageRequirements);

    /**
     * Software application help.
     *
     * @return {@link CreativeWork}
     */
    CreativeWork getSoftwareHelp();

    /**
     * Software application help.
     *
     * @param softwareHelp CreativeWork value to set.
     */
    void setSoftwareHelp(CreativeWork softwareHelp);

    /**
     * Subcategory of the application, e.g. 'Arcade Game'.
     *
     * @return {@link URL} or {@link Text}
     */
    <T> T getApplicationSubCategory();

    /**
     * Subcategory of the application, e.g. 'Arcade Game'.
     *
     * @param applicationSubCategory URL value to set.
     */
    void setApplicationSubCategory(URL applicationSubCategory);
    /**
     * Subcategory of the application, e.g. 'Arcade Game'.
     *
     * @param applicationSubCategory Text value to set.
     */
    void setApplicationSubCategory(Text applicationSubCategory);

    /**
     * If the file can be downloaded, URL to download the binary.
     *
     * @return {@link URL}
     */
    URL getDownloadUrl();

    /**
     * If the file can be downloaded, URL to download the binary.
     *
     * @param downloadUrl URL value to set.
     */
    void setDownloadUrl(URL downloadUrl);

    /**
     * Type of software application, e.g. 'Game, Multimedia'.
     *
     * @return {@link Text} or {@link URL}
     */
    <T> T getApplicationCategory();

    /**
     * Type of software application, e.g. 'Game, Multimedia'.
     *
     * @param applicationCategory Text value to set.
     */
    void setApplicationCategory(Text applicationCategory);
    /**
     * Type of software application, e.g. 'Game, Multimedia'.
     *
     * @param applicationCategory URL value to set.
     */
    void setApplicationCategory(URL applicationCategory);

    /**
     * Countries for which the application is not supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
     *
     * @return {@link Text}
     */
    Text getCountriesNotSupported();

    /**
     * Countries for which the application is not supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
     *
     * @param countriesNotSupported Text value to set.
     */
    void setCountriesNotSupported(Text countriesNotSupported);

    /**
     * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime).
     *
     * @return {@link URL} or {@link Text}
     */
    <T> T getSoftwareRequirements();

    /**
     * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime).
     *
     * @param softwareRequirements URL value to set.
     */
    void setSoftwareRequirements(URL softwareRequirements);
    /**
     * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime).
     *
     * @param softwareRequirements Text value to set.
     */
    void setSoftwareRequirements(Text softwareRequirements);

    /**
     * Additional content for a software application.
     *
     * @return {@link SoftwareApplication}
     */
    SoftwareApplication getSoftwareAddOn();

    /**
     * Additional content for a software application.
     *
     * @param softwareAddOn SoftwareApplication value to set.
     */
    void setSoftwareAddOn(SoftwareApplication softwareAddOn);

    /**
     * The name of the application suite to which the application belongs (e.g. Excel belongs to Office).
     *
     * @return {@link Text}
     */
    Text getApplicationSuite();

    /**
     * The name of the application suite to which the application belongs (e.g. Excel belongs to Office).
     *
     * @param applicationSuite Text value to set.
     */
    void setApplicationSuite(Text applicationSuite);

    /**
     * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime).
     *
     * @return {@link URL} or {@link Text}
     */
    <T> T getRequirements();

    /**
     * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime).
     *
     * @param requirements URL value to set.
     */
    void setRequirements(URL requirements);
    /**
     * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime).
     *
     * @param requirements Text value to set.
     */
    void setRequirements(Text requirements);

    /**
     * Permission(s) required to run the app (for example, a mobile app may require full internet access or may run only on wifi).
     *
     * @return {@link Text}
     */
    Text getPermissions();

    /**
     * Permission(s) required to run the app (for example, a mobile app may require full internet access or may run only on wifi).
     *
     * @param permissions Text value to set.
     */
    void setPermissions(Text permissions);

    /**
     * Processor architecture required to run the application (e.g. IA64).
     *
     * @return {@link Text}
     */
    Text getProcessorRequirements();

    /**
     * Processor architecture required to run the application (e.g. IA64).
     *
     * @param processorRequirements Text value to set.
     */
    void setProcessorRequirements(Text processorRequirements);

    /**
     * A link to a screenshot image of the app.
     *
     * @return {@link ImageObject} or {@link URL}
     */
    <T> T getScreenshot();

    /**
     * A link to a screenshot image of the app.
     *
     * @param screenshot ImageObject value to set.
     */
    void setScreenshot(ImageObject screenshot);
    /**
     * A link to a screenshot image of the app.
     *
     * @param screenshot URL value to set.
     */
    void setScreenshot(URL screenshot);

    /**
     * Features or modules provided by this application (and possibly required by other applications).
     *
     * @return {@link Text} or {@link URL}
     */
    <T> T getFeatureList();

    /**
     * Features or modules provided by this application (and possibly required by other applications).
     *
     * @param featureList Text value to set.
     */
    void setFeatureList(Text featureList);
    /**
     * Features or modules provided by this application (and possibly required by other applications).
     *
     * @param featureList URL value to set.
     */
    void setFeatureList(URL featureList);

    /**
     * Description of what changed in this version.
     *
     * @return {@link URL} or {@link Text}
     */
    <T> T getReleaseNotes();

    /**
     * Description of what changed in this version.
     *
     * @param releaseNotes URL value to set.
     */
    void setReleaseNotes(URL releaseNotes);
    /**
     * Description of what changed in this version.
     *
     * @param releaseNotes Text value to set.
     */
    void setReleaseNotes(Text releaseNotes);

    /**
     * Supporting data for a SoftwareApplication.
     *
     * @return {@link DataFeed}
     */
    DataFeed getSupportingData();

    /**
     * Supporting data for a SoftwareApplication.
     *
     * @param supportingData DataFeed value to set.
     */
    void setSupportingData(DataFeed supportingData);

    /**
     * Size of the application / package (e.g. 18MB). In the absence of a unit (MB, KB etc.), KB will be assumed.
     *
     * @return {@link Text}
     */
    Text getFileSize();

    /**
     * Size of the application / package (e.g. 18MB). In the absence of a unit (MB, KB etc.), KB will be assumed.
     *
     * @param fileSize Text value to set.
     */
    void setFileSize(Text fileSize);

    /**
     * Device required to run the application. Used in cases where a specific make/model is required to run the application.
     *
     * @return {@link Text}
     */
    Text getDevice();

    /**
     * Device required to run the application. Used in cases where a specific make/model is required to run the application.
     *
     * @param device Text value to set.
     */
    void setDevice(Text device);

    /**
     * Device required to run the application. Used in cases where a specific make/model is required to run the application.
     *
     * @return {@link Text}
     */
    Text getAvailableOnDevice();

    /**
     * Device required to run the application. Used in cases where a specific make/model is required to run the application.
     *
     * @param availableOnDevice Text value to set.
     */
    void setAvailableOnDevice(Text availableOnDevice);
}
