/*
 * This class is auto generated by the schema.org code generator program.
 * https://github.com/Kobee1203/schema-org-java
 * Do not edit the class manually.
 */
package org.schema.model;

import org.schema.model.datatype.Text;
import org.schema.model.datatype.URL;
import org.schema.model.CreativeWork;
import org.schema.model.SoftwareApplication;
import org.schema.model.ImageObject;
import org.schema.model.DataFeed;

/**
 * A software application.
 *
 * @see <a href="https://schema.org/SoftwareApplication">https://schema.org/SoftwareApplication</a>
 */
public interface SoftwareApplication extends CreativeWork {

    /**
     * Countries for which the application is supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
     *
     * @return {@link Text}
     */
    Text getCountriesSupported();

    /**
     * Countries for which the application is supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
     *
     * @param fCountriesSupported Text value to set.
     */
    void setCountriesSupported(Text fCountriesSupported);
    /**
     * Countries for which the application is supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
     *
     * @param fCountriesSupported java.lang.String value to set.
     */
    void setCountriesSupported(java.lang.String fCountriesSupported);

    /**
     * URL at which the app may be installed, if different from the URL of the item.
     *
     * @return {@link URL}
     */
    URL getInstallUrl();

    /**
     * URL at which the app may be installed, if different from the URL of the item.
     *
     * @param fInstallUrl URL value to set.
     */
    void setInstallUrl(URL fInstallUrl);
    /**
     * URL at which the app may be installed, if different from the URL of the item.
     *
     * @param fInstallUrl java.net.URL value to set.
     */
    void setInstallUrl(java.net.URL fInstallUrl);

    /**
     * Operating systems supported (Windows 7, OSX 10.6, Android 1.6).
     *
     * @return {@link Text}
     */
    Text getOperatingSystem();

    /**
     * Operating systems supported (Windows 7, OSX 10.6, Android 1.6).
     *
     * @param fOperatingSystem Text value to set.
     */
    void setOperatingSystem(Text fOperatingSystem);
    /**
     * Operating systems supported (Windows 7, OSX 10.6, Android 1.6).
     *
     * @param fOperatingSystem java.lang.String value to set.
     */
    void setOperatingSystem(java.lang.String fOperatingSystem);

    /**
     * Minimum memory requirements.
     *
     * @return {@link Text} or {@link URL}
     */
    <T> T getMemoryRequirements();

    /**
     * Minimum memory requirements.
     *
     * @param fMemoryRequirements Text value to set.
     */
    void setMemoryRequirements(Text fMemoryRequirements);
    /**
     * Minimum memory requirements.
     *
     * @param fMemoryRequirements java.lang.String value to set.
     */
    void setMemoryRequirements(java.lang.String fMemoryRequirements);
    /**
     * Minimum memory requirements.
     *
     * @param fMemoryRequirements URL value to set.
     */
    void setMemoryRequirements(URL fMemoryRequirements);
    /**
     * Minimum memory requirements.
     *
     * @param fMemoryRequirements java.net.URL value to set.
     */
    void setMemoryRequirements(java.net.URL fMemoryRequirements);

    /**
     * Version of the software instance.
     *
     * @return {@link Text}
     */
    Text getSoftwareVersion();

    /**
     * Version of the software instance.
     *
     * @param fSoftwareVersion Text value to set.
     */
    void setSoftwareVersion(Text fSoftwareVersion);
    /**
     * Version of the software instance.
     *
     * @param fSoftwareVersion java.lang.String value to set.
     */
    void setSoftwareVersion(java.lang.String fSoftwareVersion);

    /**
     * Storage requirements (free space required).
     *
     * @return {@link URL} or {@link Text}
     */
    <T> T getStorageRequirements();

    /**
     * Storage requirements (free space required).
     *
     * @param fStorageRequirements URL value to set.
     */
    void setStorageRequirements(URL fStorageRequirements);
    /**
     * Storage requirements (free space required).
     *
     * @param fStorageRequirements java.net.URL value to set.
     */
    void setStorageRequirements(java.net.URL fStorageRequirements);
    /**
     * Storage requirements (free space required).
     *
     * @param fStorageRequirements Text value to set.
     */
    void setStorageRequirements(Text fStorageRequirements);
    /**
     * Storage requirements (free space required).
     *
     * @param fStorageRequirements java.lang.String value to set.
     */
    void setStorageRequirements(java.lang.String fStorageRequirements);

    /**
     * Software application help.
     *
     * @return {@link CreativeWork}
     */
    CreativeWork getSoftwareHelp();

    /**
     * Software application help.
     *
     * @param fSoftwareHelp CreativeWork value to set.
     */
    void setSoftwareHelp(CreativeWork fSoftwareHelp);

    /**
     * Subcategory of the application, e.g. 'Arcade Game'.
     *
     * @return {@link URL} or {@link Text}
     */
    <T> T getApplicationSubCategory();

    /**
     * Subcategory of the application, e.g. 'Arcade Game'.
     *
     * @param fApplicationSubCategory URL value to set.
     */
    void setApplicationSubCategory(URL fApplicationSubCategory);
    /**
     * Subcategory of the application, e.g. 'Arcade Game'.
     *
     * @param fApplicationSubCategory java.net.URL value to set.
     */
    void setApplicationSubCategory(java.net.URL fApplicationSubCategory);
    /**
     * Subcategory of the application, e.g. 'Arcade Game'.
     *
     * @param fApplicationSubCategory Text value to set.
     */
    void setApplicationSubCategory(Text fApplicationSubCategory);
    /**
     * Subcategory of the application, e.g. 'Arcade Game'.
     *
     * @param fApplicationSubCategory java.lang.String value to set.
     */
    void setApplicationSubCategory(java.lang.String fApplicationSubCategory);

    /**
     * If the file can be downloaded, URL to download the binary.
     *
     * @return {@link URL}
     */
    URL getDownloadUrl();

    /**
     * If the file can be downloaded, URL to download the binary.
     *
     * @param fDownloadUrl URL value to set.
     */
    void setDownloadUrl(URL fDownloadUrl);
    /**
     * If the file can be downloaded, URL to download the binary.
     *
     * @param fDownloadUrl java.net.URL value to set.
     */
    void setDownloadUrl(java.net.URL fDownloadUrl);

    /**
     * Type of software application, e.g. 'Game, Multimedia'.
     *
     * @return {@link Text} or {@link URL}
     */
    <T> T getApplicationCategory();

    /**
     * Type of software application, e.g. 'Game, Multimedia'.
     *
     * @param fApplicationCategory Text value to set.
     */
    void setApplicationCategory(Text fApplicationCategory);
    /**
     * Type of software application, e.g. 'Game, Multimedia'.
     *
     * @param fApplicationCategory java.lang.String value to set.
     */
    void setApplicationCategory(java.lang.String fApplicationCategory);
    /**
     * Type of software application, e.g. 'Game, Multimedia'.
     *
     * @param fApplicationCategory URL value to set.
     */
    void setApplicationCategory(URL fApplicationCategory);
    /**
     * Type of software application, e.g. 'Game, Multimedia'.
     *
     * @param fApplicationCategory java.net.URL value to set.
     */
    void setApplicationCategory(java.net.URL fApplicationCategory);

    /**
     * Countries for which the application is not supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
     *
     * @return {@link Text}
     */
    Text getCountriesNotSupported();

    /**
     * Countries for which the application is not supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
     *
     * @param fCountriesNotSupported Text value to set.
     */
    void setCountriesNotSupported(Text fCountriesNotSupported);
    /**
     * Countries for which the application is not supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
     *
     * @param fCountriesNotSupported java.lang.String value to set.
     */
    void setCountriesNotSupported(java.lang.String fCountriesNotSupported);

    /**
     * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime).
     *
     * @return {@link URL} or {@link Text}
     */
    <T> T getSoftwareRequirements();

    /**
     * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime).
     *
     * @param fSoftwareRequirements URL value to set.
     */
    void setSoftwareRequirements(URL fSoftwareRequirements);
    /**
     * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime).
     *
     * @param fSoftwareRequirements java.net.URL value to set.
     */
    void setSoftwareRequirements(java.net.URL fSoftwareRequirements);
    /**
     * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime).
     *
     * @param fSoftwareRequirements Text value to set.
     */
    void setSoftwareRequirements(Text fSoftwareRequirements);
    /**
     * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime).
     *
     * @param fSoftwareRequirements java.lang.String value to set.
     */
    void setSoftwareRequirements(java.lang.String fSoftwareRequirements);

    /**
     * Additional content for a software application.
     *
     * @return {@link SoftwareApplication}
     */
    SoftwareApplication getSoftwareAddOn();

    /**
     * Additional content for a software application.
     *
     * @param fSoftwareAddOn SoftwareApplication value to set.
     */
    void setSoftwareAddOn(SoftwareApplication fSoftwareAddOn);

    /**
     * The name of the application suite to which the application belongs (e.g. Excel belongs to Office).
     *
     * @return {@link Text}
     */
    Text getApplicationSuite();

    /**
     * The name of the application suite to which the application belongs (e.g. Excel belongs to Office).
     *
     * @param fApplicationSuite Text value to set.
     */
    void setApplicationSuite(Text fApplicationSuite);
    /**
     * The name of the application suite to which the application belongs (e.g. Excel belongs to Office).
     *
     * @param fApplicationSuite java.lang.String value to set.
     */
    void setApplicationSuite(java.lang.String fApplicationSuite);

    /**
     * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime).
     *
     * @return {@link URL} or {@link Text}
     */
    <T> T getRequirements();

    /**
     * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime).
     *
     * @param fRequirements URL value to set.
     */
    void setRequirements(URL fRequirements);
    /**
     * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime).
     *
     * @param fRequirements java.net.URL value to set.
     */
    void setRequirements(java.net.URL fRequirements);
    /**
     * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime).
     *
     * @param fRequirements Text value to set.
     */
    void setRequirements(Text fRequirements);
    /**
     * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime).
     *
     * @param fRequirements java.lang.String value to set.
     */
    void setRequirements(java.lang.String fRequirements);

    /**
     * Permission(s) required to run the app (for example, a mobile app may require full internet access or may run only on wifi).
     *
     * @return {@link Text}
     */
    Text getPermissions();

    /**
     * Permission(s) required to run the app (for example, a mobile app may require full internet access or may run only on wifi).
     *
     * @param fPermissions Text value to set.
     */
    void setPermissions(Text fPermissions);
    /**
     * Permission(s) required to run the app (for example, a mobile app may require full internet access or may run only on wifi).
     *
     * @param fPermissions java.lang.String value to set.
     */
    void setPermissions(java.lang.String fPermissions);

    /**
     * Processor architecture required to run the application (e.g. IA64).
     *
     * @return {@link Text}
     */
    Text getProcessorRequirements();

    /**
     * Processor architecture required to run the application (e.g. IA64).
     *
     * @param fProcessorRequirements Text value to set.
     */
    void setProcessorRequirements(Text fProcessorRequirements);
    /**
     * Processor architecture required to run the application (e.g. IA64).
     *
     * @param fProcessorRequirements java.lang.String value to set.
     */
    void setProcessorRequirements(java.lang.String fProcessorRequirements);

    /**
     * A link to a screenshot image of the app.
     *
     * @return {@link ImageObject} or {@link URL}
     */
    <T> T getScreenshot();

    /**
     * A link to a screenshot image of the app.
     *
     * @param fScreenshot ImageObject value to set.
     */
    void setScreenshot(ImageObject fScreenshot);
    /**
     * A link to a screenshot image of the app.
     *
     * @param fScreenshot URL value to set.
     */
    void setScreenshot(URL fScreenshot);
    /**
     * A link to a screenshot image of the app.
     *
     * @param fScreenshot java.net.URL value to set.
     */
    void setScreenshot(java.net.URL fScreenshot);

    /**
     * Features or modules provided by this application (and possibly required by other applications).
     *
     * @return {@link Text} or {@link URL}
     */
    <T> T getFeatureList();

    /**
     * Features or modules provided by this application (and possibly required by other applications).
     *
     * @param fFeatureList Text value to set.
     */
    void setFeatureList(Text fFeatureList);
    /**
     * Features or modules provided by this application (and possibly required by other applications).
     *
     * @param fFeatureList java.lang.String value to set.
     */
    void setFeatureList(java.lang.String fFeatureList);
    /**
     * Features or modules provided by this application (and possibly required by other applications).
     *
     * @param fFeatureList URL value to set.
     */
    void setFeatureList(URL fFeatureList);
    /**
     * Features or modules provided by this application (and possibly required by other applications).
     *
     * @param fFeatureList java.net.URL value to set.
     */
    void setFeatureList(java.net.URL fFeatureList);

    /**
     * Description of what changed in this version.
     *
     * @return {@link URL} or {@link Text}
     */
    <T> T getReleaseNotes();

    /**
     * Description of what changed in this version.
     *
     * @param fReleaseNotes URL value to set.
     */
    void setReleaseNotes(URL fReleaseNotes);
    /**
     * Description of what changed in this version.
     *
     * @param fReleaseNotes java.net.URL value to set.
     */
    void setReleaseNotes(java.net.URL fReleaseNotes);
    /**
     * Description of what changed in this version.
     *
     * @param fReleaseNotes Text value to set.
     */
    void setReleaseNotes(Text fReleaseNotes);
    /**
     * Description of what changed in this version.
     *
     * @param fReleaseNotes java.lang.String value to set.
     */
    void setReleaseNotes(java.lang.String fReleaseNotes);

    /**
     * Supporting data for a SoftwareApplication.
     *
     * @return {@link DataFeed}
     */
    DataFeed getSupportingData();

    /**
     * Supporting data for a SoftwareApplication.
     *
     * @param fSupportingData DataFeed value to set.
     */
    void setSupportingData(DataFeed fSupportingData);

    /**
     * Size of the application / package (e.g. 18MB). In the absence of a unit (MB, KB etc.), KB will be assumed.
     *
     * @return {@link Text}
     */
    Text getFileSize();

    /**
     * Size of the application / package (e.g. 18MB). In the absence of a unit (MB, KB etc.), KB will be assumed.
     *
     * @param fFileSize Text value to set.
     */
    void setFileSize(Text fFileSize);
    /**
     * Size of the application / package (e.g. 18MB). In the absence of a unit (MB, KB etc.), KB will be assumed.
     *
     * @param fFileSize java.lang.String value to set.
     */
    void setFileSize(java.lang.String fFileSize);

    /**
     * Device required to run the application. Used in cases where a specific make/model is required to run the application.
     *
     * @return {@link Text}
     */
    Text getDevice();

    /**
     * Device required to run the application. Used in cases where a specific make/model is required to run the application.
     *
     * @param fDevice Text value to set.
     */
    void setDevice(Text fDevice);
    /**
     * Device required to run the application. Used in cases where a specific make/model is required to run the application.
     *
     * @param fDevice java.lang.String value to set.
     */
    void setDevice(java.lang.String fDevice);

    /**
     * Device required to run the application. Used in cases where a specific make/model is required to run the application.
     *
     * @return {@link Text}
     */
    Text getAvailableOnDevice();

    /**
     * Device required to run the application. Used in cases where a specific make/model is required to run the application.
     *
     * @param fAvailableOnDevice Text value to set.
     */
    void setAvailableOnDevice(Text fAvailableOnDevice);
    /**
     * Device required to run the application. Used in cases where a specific make/model is required to run the application.
     *
     * @param fAvailableOnDevice java.lang.String value to set.
     */
    void setAvailableOnDevice(java.lang.String fAvailableOnDevice);
}
