/*
 * This class is auto generated by the schema.org code generator program.
 * https://github.com/Kobee1203/schema-org-java
 * Do not edit the class manually.
 */
package org.schema.model.impl;

import org.schema.model.datatype.Text;
import org.schema.model.MonetaryAmountDistribution;
import org.schema.model.MonetaryAmount;
import org.schema.model.datatype.Number;
import org.schema.model.Place;
import org.schema.model.datatype.URL;
import org.schema.model.DefinedTerm;
import org.schema.model.datatype.Boolean;
import org.schema.model.AdministrativeArea;
import org.schema.model.datatype.Date;
import org.schema.model.ContactPoint;
import org.schema.model.Occupation;
import org.schema.model.datatype.Integer;
import org.schema.model.OccupationalExperienceRequirements;
import org.schema.model.EducationalOccupationalCredential;
import org.schema.model.PriceSpecification;
import org.schema.model.datatype.DateTime;
import org.schema.model.Organization;
import org.schema.model.CategoryCode;
import org.schema.model.CreativeWork;
import org.schema.model.Action;
import org.schema.model.ImageObject;
import org.schema.model.Event;
import org.schema.model.PropertyValue;
import org.schema.model.Thing;
import com.weedow.schemaorg.commons.model.JsonLdTypeName;
import org.schema.model.Intangible;
import org.schema.model.JobPosting;

/**
 * A listing that describes a job opening in a certain organization.
 *
 * @see <a href="https://schema.org/JobPosting">https://schema.org/JobPosting</a>
 */
@JsonLdTypeName("schema:JobPosting")
public class JobPostingImpl extends com.weedow.schemaorg.commons.model.JsonLdNodeImpl implements JobPosting {

    private Text fEmployerOverview;

    /**
     * A description of the employer, career opportunities and work environment for this position.
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2396">https://github.com/schemaorg/schemaorg/issues/2396</a>
     */
    @Override
    public Text getEmployerOverview() {
        return fEmployerOverview;
    }

    /**
     * A description of the employer, career opportunities and work environment for this position.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2396">https://github.com/schemaorg/schemaorg/issues/2396</a>
     */
    @Override
    public void setEmployerOverview(Text fEmployerOverview) {
        this.fEmployerOverview = fEmployerOverview;
    }

    private Object fEstimatedSalary;

    /**
     * An estimated salary for a job posting or occupation, based on a variety of variables including, but not limited to industry, job title, and location. Estimated salaries  are often computed by outside organizations rather than the hiring organization, who may not have committed to the estimated value.
     *
     * @return {@link MonetaryAmountDistribution} or {@link MonetaryAmount} or {@link Number}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public <T> T getEstimatedSalary() {
        return (T) fEstimatedSalary;
    }

    /**
     * An estimated salary for a job posting or occupation, based on a variety of variables including, but not limited to industry, job title, and location. Estimated salaries  are often computed by outside organizations rather than the hiring organization, who may not have committed to the estimated value.
     *
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setEstimatedSalary(Object fEstimatedSalary) {
        if(!(fEstimatedSalary instanceof MonetaryAmountDistribution) && !(fEstimatedSalary instanceof MonetaryAmount) && !(fEstimatedSalary instanceof Number)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'estimatedSalary': " + fEstimatedSalary);
        }
        this.fEstimatedSalary = fEstimatedSalary;
    }

    private Text fJobLocationType;

    /**
     * A description of the job location (e.g TELECOMMUTE for telecommute jobs).
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1591">https://github.com/schemaorg/schemaorg/issues/1591</a>
     */
    @Override
    public Text getJobLocationType() {
        return fJobLocationType;
    }

    /**
     * A description of the job location (e.g TELECOMMUTE for telecommute jobs).
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1591">https://github.com/schemaorg/schemaorg/issues/1591</a>
     */
    @Override
    public void setJobLocationType(Text fJobLocationType) {
        this.fJobLocationType = fJobLocationType;
    }

    private Text fResponsibilities;

    /**
     * Responsibilities associated with this role or Occupation.
     *
     * @return {@link Text}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public Text getResponsibilities() {
        return fResponsibilities;
    }

    /**
     * Responsibilities associated with this role or Occupation.
     *
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setResponsibilities(Text fResponsibilities) {
        this.fResponsibilities = fResponsibilities;
    }

    private Place fJobLocation;

    /**
     * A (typically single) geographic location associated with the job position.
     *
     * @return {@link Place}
     */
    @Override
    public Place getJobLocation() {
        return fJobLocation;
    }

    /**
     * A (typically single) geographic location associated with the job position.
     *
     */
    @Override
    public void setJobLocation(Place fJobLocation) {
        this.fJobLocation = fJobLocation;
    }

    private Object fPhysicalRequirement;

    /**
     * A description of the types of physical activity associated with the job. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
     *
     * @return {@link URL} or {@link Text} or {@link DefinedTerm}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public <T> T getPhysicalRequirement() {
        return (T) fPhysicalRequirement;
    }

    /**
     * A description of the types of physical activity associated with the job. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public void setPhysicalRequirement(Object fPhysicalRequirement) {
        if(!(fPhysicalRequirement instanceof URL) && !(fPhysicalRequirement instanceof Text) && !(fPhysicalRequirement instanceof DefinedTerm)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'physicalRequirement': " + fPhysicalRequirement);
        }
        this.fPhysicalRequirement = fPhysicalRequirement;
    }

    private Text fIncentives;

    /**
     * Description of bonus and commission compensation aspects of the job.
     *
     * @return {@link Text}
     */
    @Override
    public Text getIncentives() {
        return fIncentives;
    }

    /**
     * Description of bonus and commission compensation aspects of the job.
     *
     */
    @Override
    public void setIncentives(Text fIncentives) {
        this.fIncentives = fIncentives;
    }

    private Boolean fDirectApply;

    /**
     * Indicates whether an [[url]] that is associated with a [[JobPosting]] enables direct application for the job, via the posting website. A job posting is considered to have directApply of [[True]] if an application process for the specified job can be directly initiated via the url(s) given (noting that e.g. multiple internet domains might nevertheless be involved at an implementation level). A value of [[False]] is appropriate if there is no clear path to applying directly online for the specified job, navigating directly from the JobPosting url(s) supplied.
     *
     * @return {@link Boolean}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2907">https://github.com/schemaorg/schemaorg/issues/2907</a>
     */
    @Override
    public Boolean getDirectApply() {
        return fDirectApply;
    }

    /**
     * Indicates whether an [[url]] that is associated with a [[JobPosting]] enables direct application for the job, via the posting website. A job posting is considered to have directApply of [[True]] if an application process for the specified job can be directly initiated via the url(s) given (noting that e.g. multiple internet domains might nevertheless be involved at an implementation level). A value of [[False]] is appropriate if there is no clear path to applying directly online for the specified job, navigating directly from the JobPosting url(s) supplied.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2907">https://github.com/schemaorg/schemaorg/issues/2907</a>
     */
    @Override
    public void setDirectApply(Boolean fDirectApply) {
        this.fDirectApply = fDirectApply;
    }

    private Object fSensoryRequirement;

    /**
     * A description of any sensory requirements and levels necessary to function on the job, including hearing and vision. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
     *
     * @return {@link DefinedTerm} or {@link URL} or {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public <T> T getSensoryRequirement() {
        return (T) fSensoryRequirement;
    }

    /**
     * A description of any sensory requirements and levels necessary to function on the job, including hearing and vision. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public void setSensoryRequirement(Object fSensoryRequirement) {
        if(!(fSensoryRequirement instanceof DefinedTerm) && !(fSensoryRequirement instanceof URL) && !(fSensoryRequirement instanceof Text)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'sensoryRequirement': " + fSensoryRequirement);
        }
        this.fSensoryRequirement = fSensoryRequirement;
    }

    private AdministrativeArea fApplicantLocationRequirements;

    /**
     * The location(s) applicants can apply from. This is usually used for telecommuting jobs where the applicant does not need to be in a physical office. Note: This should not be used for citizenship or work visa requirements.
     *
     * @return {@link AdministrativeArea}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2083">https://github.com/schemaorg/schemaorg/issues/2083</a>
     */
    @Override
    public AdministrativeArea getApplicantLocationRequirements() {
        return fApplicantLocationRequirements;
    }

    /**
     * The location(s) applicants can apply from. This is usually used for telecommuting jobs where the applicant does not need to be in a physical office. Note: This should not be used for citizenship or work visa requirements.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2083">https://github.com/schemaorg/schemaorg/issues/2083</a>
     */
    @Override
    public void setApplicantLocationRequirements(AdministrativeArea fApplicantLocationRequirements) {
        this.fApplicantLocationRequirements = fApplicantLocationRequirements;
    }

    private Text fWorkHours;

    /**
     * The typical working hours for this job (e.g. 1st shift, night shift, 8am-5pm).
     *
     * @return {@link Text}
     */
    @Override
    public Text getWorkHours() {
        return fWorkHours;
    }

    /**
     * The typical working hours for this job (e.g. 1st shift, night shift, 8am-5pm).
     *
     */
    @Override
    public void setWorkHours(Text fWorkHours) {
        this.fWorkHours = fWorkHours;
    }

    private Object fJobStartDate;

    /**
     * The date on which a successful applicant for this job would be expected to start work. Choose a specific date in the future or use the jobImmediateStart property to indicate the position is to be filled as soon as possible.
     *
     * @return {@link Date} or {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2244">https://github.com/schemaorg/schemaorg/issues/2244</a>
     */
    @Override
    public <T> T getJobStartDate() {
        return (T) fJobStartDate;
    }

    /**
     * The date on which a successful applicant for this job would be expected to start work. Choose a specific date in the future or use the jobImmediateStart property to indicate the position is to be filled as soon as possible.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2244">https://github.com/schemaorg/schemaorg/issues/2244</a>
     */
    @Override
    public void setJobStartDate(Object fJobStartDate) {
        if(!(fJobStartDate instanceof Date) && !(fJobStartDate instanceof Text)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'jobStartDate': " + fJobStartDate);
        }
        this.fJobStartDate = fJobStartDate;
    }

    private Text fEmploymentType;

    /**
     * Type of employment (e.g. full-time, part-time, contract, temporary, seasonal, internship).
     *
     * @return {@link Text}
     */
    @Override
    public Text getEmploymentType() {
        return fEmploymentType;
    }

    /**
     * Type of employment (e.g. full-time, part-time, contract, temporary, seasonal, internship).
     *
     */
    @Override
    public void setEmploymentType(Text fEmploymentType) {
        this.fEmploymentType = fEmploymentType;
    }

    private Text fSpecialCommitments;

    /**
     * Any special commitments associated with this job posting. Valid entries include VeteranCommit, MilitarySpouseCommit, etc.
     *
     * @return {@link Text}
     */
    @Override
    public Text getSpecialCommitments() {
        return fSpecialCommitments;
    }

    /**
     * Any special commitments associated with this job posting. Valid entries include VeteranCommit, MilitarySpouseCommit, etc.
     *
     */
    @Override
    public void setSpecialCommitments(Text fSpecialCommitments) {
        this.fSpecialCommitments = fSpecialCommitments;
    }

    private ContactPoint fApplicationContact;

    /**
     * Contact details for further information relevant to this job posting.
     *
     * @return {@link ContactPoint}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2396">https://github.com/schemaorg/schemaorg/issues/2396</a>
     */
    @Override
    public ContactPoint getApplicationContact() {
        return fApplicationContact;
    }

    /**
     * Contact details for further information relevant to this job posting.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2396">https://github.com/schemaorg/schemaorg/issues/2396</a>
     */
    @Override
    public void setApplicationContact(ContactPoint fApplicationContact) {
        this.fApplicationContact = fApplicationContact;
    }

    private Text fIncentiveCompensation;

    /**
     * Description of bonus and commission compensation aspects of the job.
     *
     * @return {@link Text}
     */
    @Override
    public Text getIncentiveCompensation() {
        return fIncentiveCompensation;
    }

    /**
     * Description of bonus and commission compensation aspects of the job.
     *
     */
    @Override
    public void setIncentiveCompensation(Text fIncentiveCompensation) {
        this.fIncentiveCompensation = fIncentiveCompensation;
    }

    private Occupation fRelevantOccupation;

    /**
     * The Occupation for the JobPosting.
     *
     * @return {@link Occupation}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public Occupation getRelevantOccupation() {
        return fRelevantOccupation;
    }

    /**
     * The Occupation for the JobPosting.
     *
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setRelevantOccupation(Occupation fRelevantOccupation) {
        this.fRelevantOccupation = fRelevantOccupation;
    }

    private Integer fTotalJobOpenings;

    /**
     * The number of positions open for this job posting. Use a positive integer. Do not use if the number of positions is unclear or not known.
     *
     * @return {@link Integer}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2329">https://github.com/schemaorg/schemaorg/issues/2329</a>
     */
    @Override
    public Integer getTotalJobOpenings() {
        return fTotalJobOpenings;
    }

    /**
     * The number of positions open for this job posting. Use a positive integer. Do not use if the number of positions is unclear or not known.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2329">https://github.com/schemaorg/schemaorg/issues/2329</a>
     */
    @Override
    public void setTotalJobOpenings(Integer fTotalJobOpenings) {
        this.fTotalJobOpenings = fTotalJobOpenings;
    }

    private Object fExperienceRequirements;

    /**
     * Description of skills and experience needed for the position or Occupation.
     *
     * @return {@link Text} or {@link OccupationalExperienceRequirements}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public <T> T getExperienceRequirements() {
        return (T) fExperienceRequirements;
    }

    /**
     * Description of skills and experience needed for the position or Occupation.
     *
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setExperienceRequirements(Object fExperienceRequirements) {
        if(!(fExperienceRequirements instanceof Text) && !(fExperienceRequirements instanceof OccupationalExperienceRequirements)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'experienceRequirements': " + fExperienceRequirements);
        }
        this.fExperienceRequirements = fExperienceRequirements;
    }

    private Text fJobBenefits;

    /**
     * Description of benefits associated with the job.
     *
     * @return {@link Text}
     */
    @Override
    public Text getJobBenefits() {
        return fJobBenefits;
    }

    /**
     * Description of benefits associated with the job.
     *
     */
    @Override
    public void setJobBenefits(Text fJobBenefits) {
        this.fJobBenefits = fJobBenefits;
    }

    private Text fSalaryCurrency;

    /**
     * The currency (coded using [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) ) used for the main salary information in this job posting or for this employee.
     *
     * @return {@link Text}
     */
    @Override
    public Text getSalaryCurrency() {
        return fSalaryCurrency;
    }

    /**
     * The currency (coded using [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) ) used for the main salary information in this job posting or for this employee.
     *
     */
    @Override
    public void setSalaryCurrency(Text fSalaryCurrency) {
        this.fSalaryCurrency = fSalaryCurrency;
    }

    private Boolean fExperienceInPlaceOfEducation;

    /**
     * Indicates whether a [[JobPosting]] will accept experience (as indicated by [[OccupationalExperienceRequirements]]) in place of its formal educational qualifications (as indicated by [[educationRequirements]]). If true, indicates that satisfying one of these requirements is sufficient.
     *
     * @return {@link Boolean}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2681">https://github.com/schemaorg/schemaorg/issues/2681</a>
     */
    @Override
    public Boolean getExperienceInPlaceOfEducation() {
        return fExperienceInPlaceOfEducation;
    }

    /**
     * Indicates whether a [[JobPosting]] will accept experience (as indicated by [[OccupationalExperienceRequirements]]) in place of its formal educational qualifications (as indicated by [[educationRequirements]]). If true, indicates that satisfying one of these requirements is sufficient.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2681">https://github.com/schemaorg/schemaorg/issues/2681</a>
     */
    @Override
    public void setExperienceInPlaceOfEducation(Boolean fExperienceInPlaceOfEducation) {
        this.fExperienceInPlaceOfEducation = fExperienceInPlaceOfEducation;
    }

    private Object fSecurityClearanceRequirement;

    /**
     * A description of any security clearance requirements of the job.
     *
     * @return {@link URL} or {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public <T> T getSecurityClearanceRequirement() {
        return (T) fSecurityClearanceRequirement;
    }

    /**
     * A description of any security clearance requirements of the job.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public void setSecurityClearanceRequirement(Object fSecurityClearanceRequirement) {
        if(!(fSecurityClearanceRequirement instanceof URL) && !(fSecurityClearanceRequirement instanceof Text)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'securityClearanceRequirement': " + fSecurityClearanceRequirement);
        }
        this.fSecurityClearanceRequirement = fSecurityClearanceRequirement;
    }

    private Text fEligibilityToWorkRequirement;

    /**
     * The legal requirements such as citizenship, visa and other documentation required for an applicant to this job.
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public Text getEligibilityToWorkRequirement() {
        return fEligibilityToWorkRequirement;
    }

    /**
     * The legal requirements such as citizenship, visa and other documentation required for an applicant to this job.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public void setEligibilityToWorkRequirement(Text fEligibilityToWorkRequirement) {
        this.fEligibilityToWorkRequirement = fEligibilityToWorkRequirement;
    }

    private Object fEducationRequirements;

    /**
     * Educational background needed for the position or Occupation.
     *
     * @return {@link EducationalOccupationalCredential} or {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1779">https://github.com/schemaorg/schemaorg/issues/1779</a>
     */
    @Override
    public <T> T getEducationRequirements() {
        return (T) fEducationRequirements;
    }

    /**
     * Educational background needed for the position or Occupation.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1779">https://github.com/schemaorg/schemaorg/issues/1779</a>
     */
    @Override
    public void setEducationRequirements(Object fEducationRequirements) {
        if(!(fEducationRequirements instanceof EducationalOccupationalCredential) && !(fEducationRequirements instanceof Text)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'educationRequirements': " + fEducationRequirements);
        }
        this.fEducationRequirements = fEducationRequirements;
    }

    private Text fBenefits;

    /**
     * Description of benefits associated with the job.
     *
     * @return {@link Text}
     */
    @Override
    public Text getBenefits() {
        return fBenefits;
    }

    /**
     * Description of benefits associated with the job.
     *
     */
    @Override
    public void setBenefits(Text fBenefits) {
        this.fBenefits = fBenefits;
    }

    private Object fIndustry;

    /**
     * The industry associated with the job position.
     *
     * @return {@link DefinedTerm} or {@link Text}
     */
    @Override
    public <T> T getIndustry() {
        return (T) fIndustry;
    }

    /**
     * The industry associated with the job position.
     *
     */
    @Override
    public void setIndustry(Object fIndustry) {
        if(!(fIndustry instanceof DefinedTerm) && !(fIndustry instanceof Text)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'industry': " + fIndustry);
        }
        this.fIndustry = fIndustry;
    }

    private Object fBaseSalary;

    /**
     * The base salary of the job or of an employee in an EmployeeRole.
     *
     * @return {@link Number} or {@link PriceSpecification} or {@link MonetaryAmount}
     */
    @Override
    public <T> T getBaseSalary() {
        return (T) fBaseSalary;
    }

    /**
     * The base salary of the job or of an employee in an EmployeeRole.
     *
     */
    @Override
    public void setBaseSalary(Object fBaseSalary) {
        if(!(fBaseSalary instanceof Number) && !(fBaseSalary instanceof PriceSpecification) && !(fBaseSalary instanceof MonetaryAmount)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'baseSalary': " + fBaseSalary);
        }
        this.fBaseSalary = fBaseSalary;
    }

    private Object fDatePosted;

    /**
     * Publication date of an online listing.
     *
     * @return {@link Date} or {@link DateTime}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2521">https://github.com/schemaorg/schemaorg/issues/2521</a>
     */
    @Override
    public <T> T getDatePosted() {
        return (T) fDatePosted;
    }

    /**
     * Publication date of an online listing.
     *
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2521">https://github.com/schemaorg/schemaorg/issues/2521</a>
     */
    @Override
    public void setDatePosted(Object fDatePosted) {
        if(!(fDatePosted instanceof Date) && !(fDatePosted instanceof DateTime)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'datePosted': " + fDatePosted);
        }
        this.fDatePosted = fDatePosted;
    }

    private Object fSkills;

    /**
     * A statement of knowledge, skill, ability, task or any other assertion expressing a competency that is desired or required to fulfill this role or to work in this occupation.
     *
     * @return {@link Text} or {@link DefinedTerm}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2322">https://github.com/schemaorg/schemaorg/issues/2322</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public <T> T getSkills() {
        return (T) fSkills;
    }

    /**
     * A statement of knowledge, skill, ability, task or any other assertion expressing a competency that is desired or required to fulfill this role or to work in this occupation.
     *
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2322">https://github.com/schemaorg/schemaorg/issues/2322</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setSkills(Object fSkills) {
        if(!(fSkills instanceof Text) && !(fSkills instanceof DefinedTerm)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'skills': " + fSkills);
        }
        this.fSkills = fSkills;
    }

    private Text fTitle;

    /**
     * The title of the job.
     *
     * @return {@link Text}
     */
    @Override
    public Text getTitle() {
        return fTitle;
    }

    /**
     * The title of the job.
     *
     */
    @Override
    public void setTitle(Text fTitle) {
        this.fTitle = fTitle;
    }

    private Organization fHiringOrganization;

    /**
     * Organization offering the job position.
     *
     * @return {@link Organization}
     */
    @Override
    public Organization getHiringOrganization() {
        return fHiringOrganization;
    }

    /**
     * Organization offering the job position.
     *
     */
    @Override
    public void setHiringOrganization(Organization fHiringOrganization) {
        this.fHiringOrganization = fHiringOrganization;
    }

    private Boolean fJobImmediateStart;

    /**
     * An indicator as to whether a position is available for an immediate start.
     *
     * @return {@link Boolean}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2244">https://github.com/schemaorg/schemaorg/issues/2244</a>
     */
    @Override
    public Boolean getJobImmediateStart() {
        return fJobImmediateStart;
    }

    /**
     * An indicator as to whether a position is available for an immediate start.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2244">https://github.com/schemaorg/schemaorg/issues/2244</a>
     */
    @Override
    public void setJobImmediateStart(Boolean fJobImmediateStart) {
        this.fJobImmediateStart = fJobImmediateStart;
    }

    private Object fValidThrough;

    /**
     * The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.
     *
     * @return {@link DateTime} or {@link Date}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public <T> T getValidThrough() {
        return (T) fValidThrough;
    }

    /**
     * The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.
     *
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public void setValidThrough(Object fValidThrough) {
        if(!(fValidThrough instanceof DateTime) && !(fValidThrough instanceof Date)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'validThrough': " + fValidThrough);
        }
        this.fValidThrough = fValidThrough;
    }

    private Organization fEmploymentUnit;

    /**
     * Indicates the department, unit and/or facility where the employee reports and/or in which the job is to be performed.
     *
     * @return {@link Organization}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2296">https://github.com/schemaorg/schemaorg/issues/2296</a>
     */
    @Override
    public Organization getEmploymentUnit() {
        return fEmploymentUnit;
    }

    /**
     * Indicates the department, unit and/or facility where the employee reports and/or in which the job is to be performed.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2296">https://github.com/schemaorg/schemaorg/issues/2296</a>
     */
    @Override
    public void setEmploymentUnit(Organization fEmploymentUnit) {
        this.fEmploymentUnit = fEmploymentUnit;
    }

    private Object fQualifications;

    /**
     * Specific qualifications required for this role or Occupation.
     *
     * @return {@link Text} or {@link EducationalOccupationalCredential}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1779">https://github.com/schemaorg/schemaorg/issues/1779</a>
     */
    @Override
    public <T> T getQualifications() {
        return (T) fQualifications;
    }

    /**
     * Specific qualifications required for this role or Occupation.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1779">https://github.com/schemaorg/schemaorg/issues/1779</a>
     */
    @Override
    public void setQualifications(Object fQualifications) {
        if(!(fQualifications instanceof Text) && !(fQualifications instanceof EducationalOccupationalCredential)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'qualifications': " + fQualifications);
        }
        this.fQualifications = fQualifications;
    }

    private Object fOccupationalCategory;

    /**
     * A category describing the job, preferably using a term from a taxonomy such as [BLS O*NET-SOC](http://www.onetcenter.org/taxonomy.html), [ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.<br/>
     * Note: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC.
     *
     * @return {@link CategoryCode} or {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2460">https://github.com/schemaorg/schemaorg/issues/2460</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2192">https://github.com/schemaorg/schemaorg/issues/2192</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public <T> T getOccupationalCategory() {
        return (T) fOccupationalCategory;
    }

    /**
     * A category describing the job, preferably using a term from a taxonomy such as [BLS O*NET-SOC](http://www.onetcenter.org/taxonomy.html), [ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.<br/>
     * Note: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC.
     *
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2460">https://github.com/schemaorg/schemaorg/issues/2460</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2192">https://github.com/schemaorg/schemaorg/issues/2192</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setOccupationalCategory(Object fOccupationalCategory) {
        if(!(fOccupationalCategory instanceof CategoryCode) && !(fOccupationalCategory instanceof Text)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'occupationalCategory': " + fOccupationalCategory);
        }
        this.fOccupationalCategory = fOccupationalCategory;
    }

    private Object fMainEntityOfPage;

    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     * @return {@link CreativeWork} or {@link URL}
     */
    @Override
    public <T> T getMainEntityOfPage() {
        return (T) fMainEntityOfPage;
    }

    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     */
    @Override
    public void setMainEntityOfPage(Object fMainEntityOfPage) {
        if(!(fMainEntityOfPage instanceof CreativeWork) && !(fMainEntityOfPage instanceof URL)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'mainEntityOfPage': " + fMainEntityOfPage);
        }
        this.fMainEntityOfPage = fMainEntityOfPage;
    }

    private Text fAlternateName;

    /**
     * An alias for the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getAlternateName() {
        return fAlternateName;
    }

    /**
     * An alias for the item.
     *
     */
    @Override
    public void setAlternateName(Text fAlternateName) {
        this.fAlternateName = fAlternateName;
    }

    private Text fName;

    /**
     * The name of the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getName() {
        return fName;
    }

    /**
     * The name of the item.
     *
     */
    @Override
    public void setName(Text fName) {
        this.fName = fName;
    }

    private Action fPotentialAction;

    /**
     * Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
     *
     * @return {@link Action}
     */
    @Override
    public Action getPotentialAction() {
        return fPotentialAction;
    }

    /**
     * Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
     *
     */
    @Override
    public void setPotentialAction(Action fPotentialAction) {
        this.fPotentialAction = fPotentialAction;
    }

    private Object fImage;

    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * @return {@link URL} or {@link ImageObject}
     */
    @Override
    public <T> T getImage() {
        return (T) fImage;
    }

    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     */
    @Override
    public void setImage(Object fImage) {
        if(!(fImage instanceof URL) && !(fImage instanceof ImageObject)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'image': " + fImage);
        }
        this.fImage = fImage;
    }

    private URL fUrl;

    /**
     * URL of the item.
     *
     * @return {@link URL}
     */
    @Override
    public URL getUrl() {
        return fUrl;
    }

    /**
     * URL of the item.
     *
     */
    @Override
    public void setUrl(URL fUrl) {
        this.fUrl = fUrl;
    }

    private Text fDescription;

    /**
     * A description of the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getDescription() {
        return fDescription;
    }

    /**
     * A description of the item.
     *
     */
    @Override
    public void setDescription(Text fDescription) {
        this.fDescription = fDescription;
    }

    private Object fSubjectOf;

    /**
     * A CreativeWork or Event about this Thing.
     *
     * @return {@link Event} or {@link CreativeWork}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public <T> T getSubjectOf() {
        return (T) fSubjectOf;
    }

    /**
     * A CreativeWork or Event about this Thing.
     *
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public void setSubjectOf(Object fSubjectOf) {
        if(!(fSubjectOf instanceof Event) && !(fSubjectOf instanceof CreativeWork)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'subjectOf': " + fSubjectOf);
        }
        this.fSubjectOf = fSubjectOf;
    }

    private URL fAdditionalType;

    /**
     * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
     *
     * @return {@link URL}
     */
    @Override
    public URL getAdditionalType() {
        return fAdditionalType;
    }

    /**
     * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
     *
     */
    @Override
    public void setAdditionalType(URL fAdditionalType) {
        this.fAdditionalType = fAdditionalType;
    }

    private Text fDisambiguatingDescription;

    /**
     * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
     *
     * @return {@link Text}
     */
    @Override
    public Text getDisambiguatingDescription() {
        return fDisambiguatingDescription;
    }

    /**
     * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
     *
     */
    @Override
    public void setDisambiguatingDescription(Text fDisambiguatingDescription) {
        this.fDisambiguatingDescription = fDisambiguatingDescription;
    }

    private URL fSameAs;

    /**
     * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
     *
     * @return {@link URL}
     */
    @Override
    public URL getSameAs() {
        return fSameAs;
    }

    /**
     * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
     *
     */
    @Override
    public void setSameAs(URL fSameAs) {
        this.fSameAs = fSameAs;
    }

    private Object fIdentifier;

    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @return {@link URL} or {@link Text} or {@link PropertyValue}
     */
    @Override
    public <T> T getIdentifier() {
        return (T) fIdentifier;
    }

    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     */
    @Override
    public void setIdentifier(Object fIdentifier) {
        if(!(fIdentifier instanceof URL) && !(fIdentifier instanceof Text) && !(fIdentifier instanceof PropertyValue)) {
            throw new java.lang.IllegalArgumentException("Invalid value for property 'identifier': " + fIdentifier);
        }
        this.fIdentifier = fIdentifier;
    }
}
