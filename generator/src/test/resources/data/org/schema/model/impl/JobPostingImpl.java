/*
 * This class is auto generated by the schema.org code generator program.
 * https://github.com/Kobee1203/schema-org-java
 * Do not edit the class manually.
 */
package org.schema.model.impl;

import org.schema.model.datatype.Text;
import org.schema.model.MonetaryAmountDistribution;
import org.schema.model.MonetaryAmount;
import org.schema.model.datatype.Number;
import org.schema.model.Place;
import org.schema.model.datatype.URL;
import org.schema.model.DefinedTerm;
import org.schema.model.datatype.Boolean;
import org.schema.model.AdministrativeArea;
import org.schema.model.datatype.Date;
import org.schema.model.ContactPoint;
import org.schema.model.Occupation;
import org.schema.model.datatype.Integer;
import org.schema.model.OccupationalExperienceRequirements;
import org.schema.model.EducationalOccupationalCredential;
import org.schema.model.PriceSpecification;
import org.schema.model.datatype.DateTime;
import org.schema.model.Organization;
import org.schema.model.CategoryCode;
import org.schema.model.CreativeWork;
import org.schema.model.Action;
import org.schema.model.ImageObject;
import org.schema.model.Event;
import org.schema.model.PropertyValue;
import org.schema.model.Thing;
import com.weedow.schemaorg.commons.model.JsonLdTypeName;
import org.schema.model.Intangible;
import org.schema.model.JobPosting;

/**
 * A listing that describes a job opening in a certain organization.
 *
 * @see <a href="https://schema.org/JobPosting">https://schema.org/JobPosting</a>
 */
@JsonLdTypeName("JobPosting")
public class JobPostingImpl extends com.weedow.schemaorg.commons.model.JsonLdNodeImpl implements JobPosting {

    private Text fEmployerOverview;

    /**
     * A description of the employer, career opportunities and work environment for this position.
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2396">https://github.com/schemaorg/schemaorg/issues/2396</a>
     */
    @Override
    public Text getEmployerOverview() {
        return fEmployerOverview;
    }

    /**
     * A description of the employer, career opportunities and work environment for this position.
     *
     * @param fEmployerOverview Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2396">https://github.com/schemaorg/schemaorg/issues/2396</a>
     */
    @Override
    public void setEmployerOverview(Text fEmployerOverview) {
        this.fEmployerOverview = fEmployerOverview;
    }
    /**
     * A description of the employer, career opportunities and work environment for this position.
     *
     * @param fEmployerOverview java.lang.String value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2396">https://github.com/schemaorg/schemaorg/issues/2396</a>
     */
    @Override
    public void setEmployerOverview(java.lang.String fEmployerOverview) {
        this.fEmployerOverview = Text.of(fEmployerOverview);
    }

    private Object fEstimatedSalary;

    /**
     * An estimated salary for a job posting or occupation, based on a variety of variables including, but not limited to industry, job title, and location. Estimated salaries  are often computed by outside organizations rather than the hiring organization, who may not have committed to the estimated value.
     *
     * @return {@link MonetaryAmountDistribution} or {@link MonetaryAmount} or {@link Number}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public <T> T getEstimatedSalary() {
        return (T) fEstimatedSalary;
    }

    /**
     * An estimated salary for a job posting or occupation, based on a variety of variables including, but not limited to industry, job title, and location. Estimated salaries  are often computed by outside organizations rather than the hiring organization, who may not have committed to the estimated value.
     *
     * @param fEstimatedSalary MonetaryAmountDistribution value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setEstimatedSalary(MonetaryAmountDistribution fEstimatedSalary) {
        this.fEstimatedSalary = fEstimatedSalary;
    }
    /**
     * An estimated salary for a job posting or occupation, based on a variety of variables including, but not limited to industry, job title, and location. Estimated salaries  are often computed by outside organizations rather than the hiring organization, who may not have committed to the estimated value.
     *
     * @param fEstimatedSalary MonetaryAmount value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setEstimatedSalary(MonetaryAmount fEstimatedSalary) {
        this.fEstimatedSalary = fEstimatedSalary;
    }
    /**
     * An estimated salary for a job posting or occupation, based on a variety of variables including, but not limited to industry, job title, and location. Estimated salaries  are often computed by outside organizations rather than the hiring organization, who may not have committed to the estimated value.
     *
     * @param fEstimatedSalary Number value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setEstimatedSalary(Number fEstimatedSalary) {
        this.fEstimatedSalary = fEstimatedSalary;
    }
    /**
     * An estimated salary for a job posting or occupation, based on a variety of variables including, but not limited to industry, job title, and location. Estimated salaries  are often computed by outside organizations rather than the hiring organization, who may not have committed to the estimated value.
     *
     * @param fEstimatedSalary java.lang.Number value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setEstimatedSalary(java.lang.Number fEstimatedSalary) {
        this.fEstimatedSalary = Number.of(fEstimatedSalary);
    }

    private Text fJobLocationType;

    /**
     * A description of the job location (e.g TELECOMMUTE for telecommute jobs).
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1591">https://github.com/schemaorg/schemaorg/issues/1591</a>
     */
    @Override
    public Text getJobLocationType() {
        return fJobLocationType;
    }

    /**
     * A description of the job location (e.g TELECOMMUTE for telecommute jobs).
     *
     * @param fJobLocationType Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1591">https://github.com/schemaorg/schemaorg/issues/1591</a>
     */
    @Override
    public void setJobLocationType(Text fJobLocationType) {
        this.fJobLocationType = fJobLocationType;
    }
    /**
     * A description of the job location (e.g TELECOMMUTE for telecommute jobs).
     *
     * @param fJobLocationType java.lang.String value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1591">https://github.com/schemaorg/schemaorg/issues/1591</a>
     */
    @Override
    public void setJobLocationType(java.lang.String fJobLocationType) {
        this.fJobLocationType = Text.of(fJobLocationType);
    }

    private Text fResponsibilities;

    /**
     * Responsibilities associated with this role or Occupation.
     *
     * @return {@link Text}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public Text getResponsibilities() {
        return fResponsibilities;
    }

    /**
     * Responsibilities associated with this role or Occupation.
     *
     * @param fResponsibilities Text value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setResponsibilities(Text fResponsibilities) {
        this.fResponsibilities = fResponsibilities;
    }
    /**
     * Responsibilities associated with this role or Occupation.
     *
     * @param fResponsibilities java.lang.String value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setResponsibilities(java.lang.String fResponsibilities) {
        this.fResponsibilities = Text.of(fResponsibilities);
    }

    private Place fJobLocation;

    /**
     * A (typically single) geographic location associated with the job position.
     *
     * @return {@link Place}
     */
    @Override
    public Place getJobLocation() {
        return fJobLocation;
    }

    /**
     * A (typically single) geographic location associated with the job position.
     *
     * @param fJobLocation Place value to set.
     */
    @Override
    public void setJobLocation(Place fJobLocation) {
        this.fJobLocation = fJobLocation;
    }

    private Object fPhysicalRequirement;

    /**
     * A description of the types of physical activity associated with the job. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
     *
     * @return {@link URL} or {@link Text} or {@link DefinedTerm}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public <T> T getPhysicalRequirement() {
        return (T) fPhysicalRequirement;
    }

    /**
     * A description of the types of physical activity associated with the job. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
     *
     * @param fPhysicalRequirement URL value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public void setPhysicalRequirement(URL fPhysicalRequirement) {
        this.fPhysicalRequirement = fPhysicalRequirement;
    }
    /**
     * A description of the types of physical activity associated with the job. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
     *
     * @param fPhysicalRequirement java.net.URL value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public void setPhysicalRequirement(java.net.URL fPhysicalRequirement) {
        this.fPhysicalRequirement = URL.of(fPhysicalRequirement);
    }
    /**
     * A description of the types of physical activity associated with the job. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
     *
     * @param fPhysicalRequirement Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public void setPhysicalRequirement(Text fPhysicalRequirement) {
        this.fPhysicalRequirement = fPhysicalRequirement;
    }
    /**
     * A description of the types of physical activity associated with the job. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
     *
     * @param fPhysicalRequirement java.lang.String value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public void setPhysicalRequirement(java.lang.String fPhysicalRequirement) {
        this.fPhysicalRequirement = Text.of(fPhysicalRequirement);
    }
    /**
     * A description of the types of physical activity associated with the job. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
     *
     * @param fPhysicalRequirement DefinedTerm value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public void setPhysicalRequirement(DefinedTerm fPhysicalRequirement) {
        this.fPhysicalRequirement = fPhysicalRequirement;
    }

    private Text fIncentives;

    /**
     * Description of bonus and commission compensation aspects of the job.
     *
     * @return {@link Text}
     */
    @Override
    public Text getIncentives() {
        return fIncentives;
    }

    /**
     * Description of bonus and commission compensation aspects of the job.
     *
     * @param fIncentives Text value to set.
     */
    @Override
    public void setIncentives(Text fIncentives) {
        this.fIncentives = fIncentives;
    }
    /**
     * Description of bonus and commission compensation aspects of the job.
     *
     * @param fIncentives java.lang.String value to set.
     */
    @Override
    public void setIncentives(java.lang.String fIncentives) {
        this.fIncentives = Text.of(fIncentives);
    }

    private Boolean fDirectApply;

    /**
     * Indicates whether an [[url]] that is associated with a [[JobPosting]] enables direct application for the job, via the posting website. A job posting is considered to have directApply of [[True]] if an application process for the specified job can be directly initiated via the url(s) given (noting that e.g. multiple internet domains might nevertheless be involved at an implementation level). A value of [[False]] is appropriate if there is no clear path to applying directly online for the specified job, navigating directly from the JobPosting url(s) supplied.
     *
     * @return {@link Boolean}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2907">https://github.com/schemaorg/schemaorg/issues/2907</a>
     */
    @Override
    public Boolean getDirectApply() {
        return fDirectApply;
    }

    /**
     * Indicates whether an [[url]] that is associated with a [[JobPosting]] enables direct application for the job, via the posting website. A job posting is considered to have directApply of [[True]] if an application process for the specified job can be directly initiated via the url(s) given (noting that e.g. multiple internet domains might nevertheless be involved at an implementation level). A value of [[False]] is appropriate if there is no clear path to applying directly online for the specified job, navigating directly from the JobPosting url(s) supplied.
     *
     * @param fDirectApply Boolean value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2907">https://github.com/schemaorg/schemaorg/issues/2907</a>
     */
    @Override
    public void setDirectApply(Boolean fDirectApply) {
        this.fDirectApply = fDirectApply;
    }
    /**
     * Indicates whether an [[url]] that is associated with a [[JobPosting]] enables direct application for the job, via the posting website. A job posting is considered to have directApply of [[True]] if an application process for the specified job can be directly initiated via the url(s) given (noting that e.g. multiple internet domains might nevertheless be involved at an implementation level). A value of [[False]] is appropriate if there is no clear path to applying directly online for the specified job, navigating directly from the JobPosting url(s) supplied.
     *
     * @param fDirectApply java.lang.Boolean value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2907">https://github.com/schemaorg/schemaorg/issues/2907</a>
     */
    @Override
    public void setDirectApply(java.lang.Boolean fDirectApply) {
        this.fDirectApply = Boolean.of(fDirectApply);
    }

    private Object fSensoryRequirement;

    /**
     * A description of any sensory requirements and levels necessary to function on the job, including hearing and vision. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
     *
     * @return {@link DefinedTerm} or {@link URL} or {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public <T> T getSensoryRequirement() {
        return (T) fSensoryRequirement;
    }

    /**
     * A description of any sensory requirements and levels necessary to function on the job, including hearing and vision. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
     *
     * @param fSensoryRequirement DefinedTerm value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public void setSensoryRequirement(DefinedTerm fSensoryRequirement) {
        this.fSensoryRequirement = fSensoryRequirement;
    }
    /**
     * A description of any sensory requirements and levels necessary to function on the job, including hearing and vision. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
     *
     * @param fSensoryRequirement URL value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public void setSensoryRequirement(URL fSensoryRequirement) {
        this.fSensoryRequirement = fSensoryRequirement;
    }
    /**
     * A description of any sensory requirements and levels necessary to function on the job, including hearing and vision. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
     *
     * @param fSensoryRequirement java.net.URL value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public void setSensoryRequirement(java.net.URL fSensoryRequirement) {
        this.fSensoryRequirement = URL.of(fSensoryRequirement);
    }
    /**
     * A description of any sensory requirements and levels necessary to function on the job, including hearing and vision. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
     *
     * @param fSensoryRequirement Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public void setSensoryRequirement(Text fSensoryRequirement) {
        this.fSensoryRequirement = fSensoryRequirement;
    }
    /**
     * A description of any sensory requirements and levels necessary to function on the job, including hearing and vision. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
     *
     * @param fSensoryRequirement java.lang.String value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public void setSensoryRequirement(java.lang.String fSensoryRequirement) {
        this.fSensoryRequirement = Text.of(fSensoryRequirement);
    }

    private AdministrativeArea fApplicantLocationRequirements;

    /**
     * The location(s) applicants can apply from. This is usually used for telecommuting jobs where the applicant does not need to be in a physical office. Note: This should not be used for citizenship or work visa requirements.
     *
     * @return {@link AdministrativeArea}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2083">https://github.com/schemaorg/schemaorg/issues/2083</a>
     */
    @Override
    public AdministrativeArea getApplicantLocationRequirements() {
        return fApplicantLocationRequirements;
    }

    /**
     * The location(s) applicants can apply from. This is usually used for telecommuting jobs where the applicant does not need to be in a physical office. Note: This should not be used for citizenship or work visa requirements.
     *
     * @param fApplicantLocationRequirements AdministrativeArea value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2083">https://github.com/schemaorg/schemaorg/issues/2083</a>
     */
    @Override
    public void setApplicantLocationRequirements(AdministrativeArea fApplicantLocationRequirements) {
        this.fApplicantLocationRequirements = fApplicantLocationRequirements;
    }

    private Text fWorkHours;

    /**
     * The typical working hours for this job (e.g. 1st shift, night shift, 8am-5pm).
     *
     * @return {@link Text}
     */
    @Override
    public Text getWorkHours() {
        return fWorkHours;
    }

    /**
     * The typical working hours for this job (e.g. 1st shift, night shift, 8am-5pm).
     *
     * @param fWorkHours Text value to set.
     */
    @Override
    public void setWorkHours(Text fWorkHours) {
        this.fWorkHours = fWorkHours;
    }
    /**
     * The typical working hours for this job (e.g. 1st shift, night shift, 8am-5pm).
     *
     * @param fWorkHours java.lang.String value to set.
     */
    @Override
    public void setWorkHours(java.lang.String fWorkHours) {
        this.fWorkHours = Text.of(fWorkHours);
    }

    private Object fJobStartDate;

    /**
     * The date on which a successful applicant for this job would be expected to start work. Choose a specific date in the future or use the jobImmediateStart property to indicate the position is to be filled as soon as possible.
     *
     * @return {@link Date} or {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2244">https://github.com/schemaorg/schemaorg/issues/2244</a>
     */
    @Override
    public <T> T getJobStartDate() {
        return (T) fJobStartDate;
    }

    /**
     * The date on which a successful applicant for this job would be expected to start work. Choose a specific date in the future or use the jobImmediateStart property to indicate the position is to be filled as soon as possible.
     *
     * @param fJobStartDate Date value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2244">https://github.com/schemaorg/schemaorg/issues/2244</a>
     */
    @Override
    public void setJobStartDate(Date fJobStartDate) {
        this.fJobStartDate = fJobStartDate;
    }
    /**
     * The date on which a successful applicant for this job would be expected to start work. Choose a specific date in the future or use the jobImmediateStart property to indicate the position is to be filled as soon as possible.
     *
     * @param fJobStartDate java.time.LocalDate value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2244">https://github.com/schemaorg/schemaorg/issues/2244</a>
     */
    @Override
    public void setJobStartDate(java.time.LocalDate fJobStartDate) {
        this.fJobStartDate = Date.of(fJobStartDate);
    }
    /**
     * The date on which a successful applicant for this job would be expected to start work. Choose a specific date in the future or use the jobImmediateStart property to indicate the position is to be filled as soon as possible.
     *
     * @param fJobStartDate Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2244">https://github.com/schemaorg/schemaorg/issues/2244</a>
     */
    @Override
    public void setJobStartDate(Text fJobStartDate) {
        this.fJobStartDate = fJobStartDate;
    }
    /**
     * The date on which a successful applicant for this job would be expected to start work. Choose a specific date in the future or use the jobImmediateStart property to indicate the position is to be filled as soon as possible.
     *
     * @param fJobStartDate java.lang.String value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2244">https://github.com/schemaorg/schemaorg/issues/2244</a>
     */
    @Override
    public void setJobStartDate(java.lang.String fJobStartDate) {
        this.fJobStartDate = Text.of(fJobStartDate);
    }

    private Text fEmploymentType;

    /**
     * Type of employment (e.g. full-time, part-time, contract, temporary, seasonal, internship).
     *
     * @return {@link Text}
     */
    @Override
    public Text getEmploymentType() {
        return fEmploymentType;
    }

    /**
     * Type of employment (e.g. full-time, part-time, contract, temporary, seasonal, internship).
     *
     * @param fEmploymentType Text value to set.
     */
    @Override
    public void setEmploymentType(Text fEmploymentType) {
        this.fEmploymentType = fEmploymentType;
    }
    /**
     * Type of employment (e.g. full-time, part-time, contract, temporary, seasonal, internship).
     *
     * @param fEmploymentType java.lang.String value to set.
     */
    @Override
    public void setEmploymentType(java.lang.String fEmploymentType) {
        this.fEmploymentType = Text.of(fEmploymentType);
    }

    private Text fSpecialCommitments;

    /**
     * Any special commitments associated with this job posting. Valid entries include VeteranCommit, MilitarySpouseCommit, etc.
     *
     * @return {@link Text}
     */
    @Override
    public Text getSpecialCommitments() {
        return fSpecialCommitments;
    }

    /**
     * Any special commitments associated with this job posting. Valid entries include VeteranCommit, MilitarySpouseCommit, etc.
     *
     * @param fSpecialCommitments Text value to set.
     */
    @Override
    public void setSpecialCommitments(Text fSpecialCommitments) {
        this.fSpecialCommitments = fSpecialCommitments;
    }
    /**
     * Any special commitments associated with this job posting. Valid entries include VeteranCommit, MilitarySpouseCommit, etc.
     *
     * @param fSpecialCommitments java.lang.String value to set.
     */
    @Override
    public void setSpecialCommitments(java.lang.String fSpecialCommitments) {
        this.fSpecialCommitments = Text.of(fSpecialCommitments);
    }

    private ContactPoint fApplicationContact;

    /**
     * Contact details for further information relevant to this job posting.
     *
     * @return {@link ContactPoint}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2396">https://github.com/schemaorg/schemaorg/issues/2396</a>
     */
    @Override
    public ContactPoint getApplicationContact() {
        return fApplicationContact;
    }

    /**
     * Contact details for further information relevant to this job posting.
     *
     * @param fApplicationContact ContactPoint value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2396">https://github.com/schemaorg/schemaorg/issues/2396</a>
     */
    @Override
    public void setApplicationContact(ContactPoint fApplicationContact) {
        this.fApplicationContact = fApplicationContact;
    }

    private Text fIncentiveCompensation;

    /**
     * Description of bonus and commission compensation aspects of the job.
     *
     * @return {@link Text}
     */
    @Override
    public Text getIncentiveCompensation() {
        return fIncentiveCompensation;
    }

    /**
     * Description of bonus and commission compensation aspects of the job.
     *
     * @param fIncentiveCompensation Text value to set.
     */
    @Override
    public void setIncentiveCompensation(Text fIncentiveCompensation) {
        this.fIncentiveCompensation = fIncentiveCompensation;
    }
    /**
     * Description of bonus and commission compensation aspects of the job.
     *
     * @param fIncentiveCompensation java.lang.String value to set.
     */
    @Override
    public void setIncentiveCompensation(java.lang.String fIncentiveCompensation) {
        this.fIncentiveCompensation = Text.of(fIncentiveCompensation);
    }

    private Occupation fRelevantOccupation;

    /**
     * The Occupation for the JobPosting.
     *
     * @return {@link Occupation}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public Occupation getRelevantOccupation() {
        return fRelevantOccupation;
    }

    /**
     * The Occupation for the JobPosting.
     *
     * @param fRelevantOccupation Occupation value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setRelevantOccupation(Occupation fRelevantOccupation) {
        this.fRelevantOccupation = fRelevantOccupation;
    }

    private Integer fTotalJobOpenings;

    /**
     * The number of positions open for this job posting. Use a positive integer. Do not use if the number of positions is unclear or not known.
     *
     * @return {@link Integer}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2329">https://github.com/schemaorg/schemaorg/issues/2329</a>
     */
    @Override
    public Integer getTotalJobOpenings() {
        return fTotalJobOpenings;
    }

    /**
     * The number of positions open for this job posting. Use a positive integer. Do not use if the number of positions is unclear or not known.
     *
     * @param fTotalJobOpenings Integer value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2329">https://github.com/schemaorg/schemaorg/issues/2329</a>
     */
    @Override
    public void setTotalJobOpenings(Integer fTotalJobOpenings) {
        this.fTotalJobOpenings = fTotalJobOpenings;
    }
    /**
     * The number of positions open for this job posting. Use a positive integer. Do not use if the number of positions is unclear or not known.
     *
     * @param fTotalJobOpenings java.lang.Integer value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2329">https://github.com/schemaorg/schemaorg/issues/2329</a>
     */
    @Override
    public void setTotalJobOpenings(java.lang.Integer fTotalJobOpenings) {
        this.fTotalJobOpenings = Integer.of(fTotalJobOpenings);
    }

    private Object fExperienceRequirements;

    /**
     * Description of skills and experience needed for the position or Occupation.
     *
     * @return {@link Text} or {@link OccupationalExperienceRequirements}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public <T> T getExperienceRequirements() {
        return (T) fExperienceRequirements;
    }

    /**
     * Description of skills and experience needed for the position or Occupation.
     *
     * @param fExperienceRequirements Text value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setExperienceRequirements(Text fExperienceRequirements) {
        this.fExperienceRequirements = fExperienceRequirements;
    }
    /**
     * Description of skills and experience needed for the position or Occupation.
     *
     * @param fExperienceRequirements java.lang.String value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setExperienceRequirements(java.lang.String fExperienceRequirements) {
        this.fExperienceRequirements = Text.of(fExperienceRequirements);
    }
    /**
     * Description of skills and experience needed for the position or Occupation.
     *
     * @param fExperienceRequirements OccupationalExperienceRequirements value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setExperienceRequirements(OccupationalExperienceRequirements fExperienceRequirements) {
        this.fExperienceRequirements = fExperienceRequirements;
    }

    private Text fJobBenefits;

    /**
     * Description of benefits associated with the job.
     *
     * @return {@link Text}
     */
    @Override
    public Text getJobBenefits() {
        return fJobBenefits;
    }

    /**
     * Description of benefits associated with the job.
     *
     * @param fJobBenefits Text value to set.
     */
    @Override
    public void setJobBenefits(Text fJobBenefits) {
        this.fJobBenefits = fJobBenefits;
    }
    /**
     * Description of benefits associated with the job.
     *
     * @param fJobBenefits java.lang.String value to set.
     */
    @Override
    public void setJobBenefits(java.lang.String fJobBenefits) {
        this.fJobBenefits = Text.of(fJobBenefits);
    }

    private Text fSalaryCurrency;

    /**
     * The currency (coded using [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) ) used for the main salary information in this job posting or for this employee.
     *
     * @return {@link Text}
     */
    @Override
    public Text getSalaryCurrency() {
        return fSalaryCurrency;
    }

    /**
     * The currency (coded using [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) ) used for the main salary information in this job posting or for this employee.
     *
     * @param fSalaryCurrency Text value to set.
     */
    @Override
    public void setSalaryCurrency(Text fSalaryCurrency) {
        this.fSalaryCurrency = fSalaryCurrency;
    }
    /**
     * The currency (coded using [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) ) used for the main salary information in this job posting or for this employee.
     *
     * @param fSalaryCurrency java.lang.String value to set.
     */
    @Override
    public void setSalaryCurrency(java.lang.String fSalaryCurrency) {
        this.fSalaryCurrency = Text.of(fSalaryCurrency);
    }

    private Boolean fExperienceInPlaceOfEducation;

    /**
     * Indicates whether a [[JobPosting]] will accept experience (as indicated by [[OccupationalExperienceRequirements]]) in place of its formal educational qualifications (as indicated by [[educationRequirements]]). If true, indicates that satisfying one of these requirements is sufficient.
     *
     * @return {@link Boolean}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2681">https://github.com/schemaorg/schemaorg/issues/2681</a>
     */
    @Override
    public Boolean getExperienceInPlaceOfEducation() {
        return fExperienceInPlaceOfEducation;
    }

    /**
     * Indicates whether a [[JobPosting]] will accept experience (as indicated by [[OccupationalExperienceRequirements]]) in place of its formal educational qualifications (as indicated by [[educationRequirements]]). If true, indicates that satisfying one of these requirements is sufficient.
     *
     * @param fExperienceInPlaceOfEducation Boolean value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2681">https://github.com/schemaorg/schemaorg/issues/2681</a>
     */
    @Override
    public void setExperienceInPlaceOfEducation(Boolean fExperienceInPlaceOfEducation) {
        this.fExperienceInPlaceOfEducation = fExperienceInPlaceOfEducation;
    }
    /**
     * Indicates whether a [[JobPosting]] will accept experience (as indicated by [[OccupationalExperienceRequirements]]) in place of its formal educational qualifications (as indicated by [[educationRequirements]]). If true, indicates that satisfying one of these requirements is sufficient.
     *
     * @param fExperienceInPlaceOfEducation java.lang.Boolean value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2681">https://github.com/schemaorg/schemaorg/issues/2681</a>
     */
    @Override
    public void setExperienceInPlaceOfEducation(java.lang.Boolean fExperienceInPlaceOfEducation) {
        this.fExperienceInPlaceOfEducation = Boolean.of(fExperienceInPlaceOfEducation);
    }

    private Object fSecurityClearanceRequirement;

    /**
     * A description of any security clearance requirements of the job.
     *
     * @return {@link URL} or {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public <T> T getSecurityClearanceRequirement() {
        return (T) fSecurityClearanceRequirement;
    }

    /**
     * A description of any security clearance requirements of the job.
     *
     * @param fSecurityClearanceRequirement URL value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public void setSecurityClearanceRequirement(URL fSecurityClearanceRequirement) {
        this.fSecurityClearanceRequirement = fSecurityClearanceRequirement;
    }
    /**
     * A description of any security clearance requirements of the job.
     *
     * @param fSecurityClearanceRequirement java.net.URL value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public void setSecurityClearanceRequirement(java.net.URL fSecurityClearanceRequirement) {
        this.fSecurityClearanceRequirement = URL.of(fSecurityClearanceRequirement);
    }
    /**
     * A description of any security clearance requirements of the job.
     *
     * @param fSecurityClearanceRequirement Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public void setSecurityClearanceRequirement(Text fSecurityClearanceRequirement) {
        this.fSecurityClearanceRequirement = fSecurityClearanceRequirement;
    }
    /**
     * A description of any security clearance requirements of the job.
     *
     * @param fSecurityClearanceRequirement java.lang.String value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public void setSecurityClearanceRequirement(java.lang.String fSecurityClearanceRequirement) {
        this.fSecurityClearanceRequirement = Text.of(fSecurityClearanceRequirement);
    }

    private Text fEligibilityToWorkRequirement;

    /**
     * The legal requirements such as citizenship, visa and other documentation required for an applicant to this job.
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public Text getEligibilityToWorkRequirement() {
        return fEligibilityToWorkRequirement;
    }

    /**
     * The legal requirements such as citizenship, visa and other documentation required for an applicant to this job.
     *
     * @param fEligibilityToWorkRequirement Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public void setEligibilityToWorkRequirement(Text fEligibilityToWorkRequirement) {
        this.fEligibilityToWorkRequirement = fEligibilityToWorkRequirement;
    }
    /**
     * The legal requirements such as citizenship, visa and other documentation required for an applicant to this job.
     *
     * @param fEligibilityToWorkRequirement java.lang.String value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public void setEligibilityToWorkRequirement(java.lang.String fEligibilityToWorkRequirement) {
        this.fEligibilityToWorkRequirement = Text.of(fEligibilityToWorkRequirement);
    }

    private Object fEducationRequirements;

    /**
     * Educational background needed for the position or Occupation.
     *
     * @return {@link EducationalOccupationalCredential} or {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1779">https://github.com/schemaorg/schemaorg/issues/1779</a>
     */
    @Override
    public <T> T getEducationRequirements() {
        return (T) fEducationRequirements;
    }

    /**
     * Educational background needed for the position or Occupation.
     *
     * @param fEducationRequirements EducationalOccupationalCredential value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1779">https://github.com/schemaorg/schemaorg/issues/1779</a>
     */
    @Override
    public void setEducationRequirements(EducationalOccupationalCredential fEducationRequirements) {
        this.fEducationRequirements = fEducationRequirements;
    }
    /**
     * Educational background needed for the position or Occupation.
     *
     * @param fEducationRequirements Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1779">https://github.com/schemaorg/schemaorg/issues/1779</a>
     */
    @Override
    public void setEducationRequirements(Text fEducationRequirements) {
        this.fEducationRequirements = fEducationRequirements;
    }
    /**
     * Educational background needed for the position or Occupation.
     *
     * @param fEducationRequirements java.lang.String value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1779">https://github.com/schemaorg/schemaorg/issues/1779</a>
     */
    @Override
    public void setEducationRequirements(java.lang.String fEducationRequirements) {
        this.fEducationRequirements = Text.of(fEducationRequirements);
    }

    private Text fBenefits;

    /**
     * Description of benefits associated with the job.
     *
     * @return {@link Text}
     */
    @Override
    public Text getBenefits() {
        return fBenefits;
    }

    /**
     * Description of benefits associated with the job.
     *
     * @param fBenefits Text value to set.
     */
    @Override
    public void setBenefits(Text fBenefits) {
        this.fBenefits = fBenefits;
    }
    /**
     * Description of benefits associated with the job.
     *
     * @param fBenefits java.lang.String value to set.
     */
    @Override
    public void setBenefits(java.lang.String fBenefits) {
        this.fBenefits = Text.of(fBenefits);
    }

    private Object fIndustry;

    /**
     * The industry associated with the job position.
     *
     * @return {@link DefinedTerm} or {@link Text}
     */
    @Override
    public <T> T getIndustry() {
        return (T) fIndustry;
    }

    /**
     * The industry associated with the job position.
     *
     * @param fIndustry DefinedTerm value to set.
     */
    @Override
    public void setIndustry(DefinedTerm fIndustry) {
        this.fIndustry = fIndustry;
    }
    /**
     * The industry associated with the job position.
     *
     * @param fIndustry Text value to set.
     */
    @Override
    public void setIndustry(Text fIndustry) {
        this.fIndustry = fIndustry;
    }
    /**
     * The industry associated with the job position.
     *
     * @param fIndustry java.lang.String value to set.
     */
    @Override
    public void setIndustry(java.lang.String fIndustry) {
        this.fIndustry = Text.of(fIndustry);
    }

    private Object fBaseSalary;

    /**
     * The base salary of the job or of an employee in an EmployeeRole.
     *
     * @return {@link Number} or {@link PriceSpecification} or {@link MonetaryAmount}
     */
    @Override
    public <T> T getBaseSalary() {
        return (T) fBaseSalary;
    }

    /**
     * The base salary of the job or of an employee in an EmployeeRole.
     *
     * @param fBaseSalary Number value to set.
     */
    @Override
    public void setBaseSalary(Number fBaseSalary) {
        this.fBaseSalary = fBaseSalary;
    }
    /**
     * The base salary of the job or of an employee in an EmployeeRole.
     *
     * @param fBaseSalary java.lang.Number value to set.
     */
    @Override
    public void setBaseSalary(java.lang.Number fBaseSalary) {
        this.fBaseSalary = Number.of(fBaseSalary);
    }
    /**
     * The base salary of the job or of an employee in an EmployeeRole.
     *
     * @param fBaseSalary PriceSpecification value to set.
     */
    @Override
    public void setBaseSalary(PriceSpecification fBaseSalary) {
        this.fBaseSalary = fBaseSalary;
    }
    /**
     * The base salary of the job or of an employee in an EmployeeRole.
     *
     * @param fBaseSalary MonetaryAmount value to set.
     */
    @Override
    public void setBaseSalary(MonetaryAmount fBaseSalary) {
        this.fBaseSalary = fBaseSalary;
    }

    private Object fDatePosted;

    /**
     * Publication date of an online listing.
     *
     * @return {@link Date} or {@link DateTime}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2521">https://github.com/schemaorg/schemaorg/issues/2521</a>
     */
    @Override
    public <T> T getDatePosted() {
        return (T) fDatePosted;
    }

    /**
     * Publication date of an online listing.
     *
     * @param fDatePosted Date value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2521">https://github.com/schemaorg/schemaorg/issues/2521</a>
     */
    @Override
    public void setDatePosted(Date fDatePosted) {
        this.fDatePosted = fDatePosted;
    }
    /**
     * Publication date of an online listing.
     *
     * @param fDatePosted java.time.LocalDate value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2521">https://github.com/schemaorg/schemaorg/issues/2521</a>
     */
    @Override
    public void setDatePosted(java.time.LocalDate fDatePosted) {
        this.fDatePosted = Date.of(fDatePosted);
    }
    /**
     * Publication date of an online listing.
     *
     * @param fDatePosted DateTime value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2521">https://github.com/schemaorg/schemaorg/issues/2521</a>
     */
    @Override
    public void setDatePosted(DateTime fDatePosted) {
        this.fDatePosted = fDatePosted;
    }
    /**
     * Publication date of an online listing.
     *
     * @param fDatePosted java.time.LocalDateTime value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2521">https://github.com/schemaorg/schemaorg/issues/2521</a>
     */
    @Override
    public void setDatePosted(java.time.LocalDateTime fDatePosted) {
        this.fDatePosted = DateTime.of(fDatePosted);
    }

    private Object fSkills;

    /**
     * A statement of knowledge, skill, ability, task or any other assertion expressing a competency that is desired or required to fulfill this role or to work in this occupation.
     *
     * @return {@link Text} or {@link DefinedTerm}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2322">https://github.com/schemaorg/schemaorg/issues/2322</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public <T> T getSkills() {
        return (T) fSkills;
    }

    /**
     * A statement of knowledge, skill, ability, task or any other assertion expressing a competency that is desired or required to fulfill this role or to work in this occupation.
     *
     * @param fSkills Text value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2322">https://github.com/schemaorg/schemaorg/issues/2322</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setSkills(Text fSkills) {
        this.fSkills = fSkills;
    }
    /**
     * A statement of knowledge, skill, ability, task or any other assertion expressing a competency that is desired or required to fulfill this role or to work in this occupation.
     *
     * @param fSkills java.lang.String value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2322">https://github.com/schemaorg/schemaorg/issues/2322</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setSkills(java.lang.String fSkills) {
        this.fSkills = Text.of(fSkills);
    }
    /**
     * A statement of knowledge, skill, ability, task or any other assertion expressing a competency that is desired or required to fulfill this role or to work in this occupation.
     *
     * @param fSkills DefinedTerm value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2322">https://github.com/schemaorg/schemaorg/issues/2322</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setSkills(DefinedTerm fSkills) {
        this.fSkills = fSkills;
    }

    private Text fTitle;

    /**
     * The title of the job.
     *
     * @return {@link Text}
     */
    @Override
    public Text getTitle() {
        return fTitle;
    }

    /**
     * The title of the job.
     *
     * @param fTitle Text value to set.
     */
    @Override
    public void setTitle(Text fTitle) {
        this.fTitle = fTitle;
    }
    /**
     * The title of the job.
     *
     * @param fTitle java.lang.String value to set.
     */
    @Override
    public void setTitle(java.lang.String fTitle) {
        this.fTitle = Text.of(fTitle);
    }

    private Organization fHiringOrganization;

    /**
     * Organization offering the job position.
     *
     * @return {@link Organization}
     */
    @Override
    public Organization getHiringOrganization() {
        return fHiringOrganization;
    }

    /**
     * Organization offering the job position.
     *
     * @param fHiringOrganization Organization value to set.
     */
    @Override
    public void setHiringOrganization(Organization fHiringOrganization) {
        this.fHiringOrganization = fHiringOrganization;
    }

    private Boolean fJobImmediateStart;

    /**
     * An indicator as to whether a position is available for an immediate start.
     *
     * @return {@link Boolean}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2244">https://github.com/schemaorg/schemaorg/issues/2244</a>
     */
    @Override
    public Boolean getJobImmediateStart() {
        return fJobImmediateStart;
    }

    /**
     * An indicator as to whether a position is available for an immediate start.
     *
     * @param fJobImmediateStart Boolean value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2244">https://github.com/schemaorg/schemaorg/issues/2244</a>
     */
    @Override
    public void setJobImmediateStart(Boolean fJobImmediateStart) {
        this.fJobImmediateStart = fJobImmediateStart;
    }
    /**
     * An indicator as to whether a position is available for an immediate start.
     *
     * @param fJobImmediateStart java.lang.Boolean value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2244">https://github.com/schemaorg/schemaorg/issues/2244</a>
     */
    @Override
    public void setJobImmediateStart(java.lang.Boolean fJobImmediateStart) {
        this.fJobImmediateStart = Boolean.of(fJobImmediateStart);
    }

    private Object fValidThrough;

    /**
     * The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.
     *
     * @return {@link DateTime} or {@link Date}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public <T> T getValidThrough() {
        return (T) fValidThrough;
    }

    /**
     * The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.
     *
     * @param fValidThrough DateTime value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public void setValidThrough(DateTime fValidThrough) {
        this.fValidThrough = fValidThrough;
    }
    /**
     * The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.
     *
     * @param fValidThrough java.time.LocalDateTime value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public void setValidThrough(java.time.LocalDateTime fValidThrough) {
        this.fValidThrough = DateTime.of(fValidThrough);
    }
    /**
     * The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.
     *
     * @param fValidThrough Date value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public void setValidThrough(Date fValidThrough) {
        this.fValidThrough = fValidThrough;
    }
    /**
     * The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.
     *
     * @param fValidThrough java.time.LocalDate value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public void setValidThrough(java.time.LocalDate fValidThrough) {
        this.fValidThrough = Date.of(fValidThrough);
    }

    private Organization fEmploymentUnit;

    /**
     * Indicates the department, unit and/or facility where the employee reports and/or in which the job is to be performed.
     *
     * @return {@link Organization}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2296">https://github.com/schemaorg/schemaorg/issues/2296</a>
     */
    @Override
    public Organization getEmploymentUnit() {
        return fEmploymentUnit;
    }

    /**
     * Indicates the department, unit and/or facility where the employee reports and/or in which the job is to be performed.
     *
     * @param fEmploymentUnit Organization value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2296">https://github.com/schemaorg/schemaorg/issues/2296</a>
     */
    @Override
    public void setEmploymentUnit(Organization fEmploymentUnit) {
        this.fEmploymentUnit = fEmploymentUnit;
    }

    private Object fQualifications;

    /**
     * Specific qualifications required for this role or Occupation.
     *
     * @return {@link Text} or {@link EducationalOccupationalCredential}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1779">https://github.com/schemaorg/schemaorg/issues/1779</a>
     */
    @Override
    public <T> T getQualifications() {
        return (T) fQualifications;
    }

    /**
     * Specific qualifications required for this role or Occupation.
     *
     * @param fQualifications Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1779">https://github.com/schemaorg/schemaorg/issues/1779</a>
     */
    @Override
    public void setQualifications(Text fQualifications) {
        this.fQualifications = fQualifications;
    }
    /**
     * Specific qualifications required for this role or Occupation.
     *
     * @param fQualifications java.lang.String value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1779">https://github.com/schemaorg/schemaorg/issues/1779</a>
     */
    @Override
    public void setQualifications(java.lang.String fQualifications) {
        this.fQualifications = Text.of(fQualifications);
    }
    /**
     * Specific qualifications required for this role or Occupation.
     *
     * @param fQualifications EducationalOccupationalCredential value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1779">https://github.com/schemaorg/schemaorg/issues/1779</a>
     */
    @Override
    public void setQualifications(EducationalOccupationalCredential fQualifications) {
        this.fQualifications = fQualifications;
    }

    private Object fOccupationalCategory;

    /**
     * A category describing the job, preferably using a term from a taxonomy such as [BLS O*NET-SOC](http://www.onetcenter.org/taxonomy.html), [ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.<br/>
     * Note: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC.
     *
     * @return {@link CategoryCode} or {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2460">https://github.com/schemaorg/schemaorg/issues/2460</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2192">https://github.com/schemaorg/schemaorg/issues/2192</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public <T> T getOccupationalCategory() {
        return (T) fOccupationalCategory;
    }

    /**
     * A category describing the job, preferably using a term from a taxonomy such as [BLS O*NET-SOC](http://www.onetcenter.org/taxonomy.html), [ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.<br/>
     * Note: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC.
     *
     * @param fOccupationalCategory CategoryCode value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2460">https://github.com/schemaorg/schemaorg/issues/2460</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2192">https://github.com/schemaorg/schemaorg/issues/2192</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setOccupationalCategory(CategoryCode fOccupationalCategory) {
        this.fOccupationalCategory = fOccupationalCategory;
    }
    /**
     * A category describing the job, preferably using a term from a taxonomy such as [BLS O*NET-SOC](http://www.onetcenter.org/taxonomy.html), [ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.<br/>
     * Note: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC.
     *
     * @param fOccupationalCategory Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2460">https://github.com/schemaorg/schemaorg/issues/2460</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2192">https://github.com/schemaorg/schemaorg/issues/2192</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setOccupationalCategory(Text fOccupationalCategory) {
        this.fOccupationalCategory = fOccupationalCategory;
    }
    /**
     * A category describing the job, preferably using a term from a taxonomy such as [BLS O*NET-SOC](http://www.onetcenter.org/taxonomy.html), [ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.<br/>
     * Note: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC.
     *
     * @param fOccupationalCategory java.lang.String value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2460">https://github.com/schemaorg/schemaorg/issues/2460</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2192">https://github.com/schemaorg/schemaorg/issues/2192</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setOccupationalCategory(java.lang.String fOccupationalCategory) {
        this.fOccupationalCategory = Text.of(fOccupationalCategory);
    }

    private Object fMainEntityOfPage;

    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     * @return {@link CreativeWork} or {@link URL}
     */
    @Override
    public <T> T getMainEntityOfPage() {
        return (T) fMainEntityOfPage;
    }

    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     * @param fMainEntityOfPage CreativeWork value to set.
     */
    @Override
    public void setMainEntityOfPage(CreativeWork fMainEntityOfPage) {
        this.fMainEntityOfPage = fMainEntityOfPage;
    }
    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     * @param fMainEntityOfPage URL value to set.
     */
    @Override
    public void setMainEntityOfPage(URL fMainEntityOfPage) {
        this.fMainEntityOfPage = fMainEntityOfPage;
    }
    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     * @param fMainEntityOfPage java.net.URL value to set.
     */
    @Override
    public void setMainEntityOfPage(java.net.URL fMainEntityOfPage) {
        this.fMainEntityOfPage = URL.of(fMainEntityOfPage);
    }

    private Text fAlternateName;

    /**
     * An alias for the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getAlternateName() {
        return fAlternateName;
    }

    /**
     * An alias for the item.
     *
     * @param fAlternateName Text value to set.
     */
    @Override
    public void setAlternateName(Text fAlternateName) {
        this.fAlternateName = fAlternateName;
    }
    /**
     * An alias for the item.
     *
     * @param fAlternateName java.lang.String value to set.
     */
    @Override
    public void setAlternateName(java.lang.String fAlternateName) {
        this.fAlternateName = Text.of(fAlternateName);
    }

    private Text fName;

    /**
     * The name of the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getName() {
        return fName;
    }

    /**
     * The name of the item.
     *
     * @param fName Text value to set.
     */
    @Override
    public void setName(Text fName) {
        this.fName = fName;
    }
    /**
     * The name of the item.
     *
     * @param fName java.lang.String value to set.
     */
    @Override
    public void setName(java.lang.String fName) {
        this.fName = Text.of(fName);
    }

    private Action fPotentialAction;

    /**
     * Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
     *
     * @return {@link Action}
     */
    @Override
    public Action getPotentialAction() {
        return fPotentialAction;
    }

    /**
     * Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
     *
     * @param fPotentialAction Action value to set.
     */
    @Override
    public void setPotentialAction(Action fPotentialAction) {
        this.fPotentialAction = fPotentialAction;
    }

    private Object fImage;

    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * @return {@link URL} or {@link ImageObject}
     */
    @Override
    public <T> T getImage() {
        return (T) fImage;
    }

    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * @param fImage URL value to set.
     */
    @Override
    public void setImage(URL fImage) {
        this.fImage = fImage;
    }
    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * @param fImage java.net.URL value to set.
     */
    @Override
    public void setImage(java.net.URL fImage) {
        this.fImage = URL.of(fImage);
    }
    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * @param fImage ImageObject value to set.
     */
    @Override
    public void setImage(ImageObject fImage) {
        this.fImage = fImage;
    }

    private URL fUrl;

    /**
     * URL of the item.
     *
     * @return {@link URL}
     */
    @Override
    public URL getUrl() {
        return fUrl;
    }

    /**
     * URL of the item.
     *
     * @param fUrl URL value to set.
     */
    @Override
    public void setUrl(URL fUrl) {
        this.fUrl = fUrl;
    }
    /**
     * URL of the item.
     *
     * @param fUrl java.net.URL value to set.
     */
    @Override
    public void setUrl(java.net.URL fUrl) {
        this.fUrl = URL.of(fUrl);
    }

    private Text fDescription;

    /**
     * A description of the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getDescription() {
        return fDescription;
    }

    /**
     * A description of the item.
     *
     * @param fDescription Text value to set.
     */
    @Override
    public void setDescription(Text fDescription) {
        this.fDescription = fDescription;
    }
    /**
     * A description of the item.
     *
     * @param fDescription java.lang.String value to set.
     */
    @Override
    public void setDescription(java.lang.String fDescription) {
        this.fDescription = Text.of(fDescription);
    }

    private Object fSubjectOf;

    /**
     * A CreativeWork or Event about this Thing.
     *
     * @return {@link Event} or {@link CreativeWork}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public <T> T getSubjectOf() {
        return (T) fSubjectOf;
    }

    /**
     * A CreativeWork or Event about this Thing.
     *
     * @param fSubjectOf Event value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public void setSubjectOf(Event fSubjectOf) {
        this.fSubjectOf = fSubjectOf;
    }
    /**
     * A CreativeWork or Event about this Thing.
     *
     * @param fSubjectOf CreativeWork value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public void setSubjectOf(CreativeWork fSubjectOf) {
        this.fSubjectOf = fSubjectOf;
    }

    private URL fAdditionalType;

    /**
     * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
     *
     * @return {@link URL}
     */
    @Override
    public URL getAdditionalType() {
        return fAdditionalType;
    }

    /**
     * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
     *
     * @param fAdditionalType URL value to set.
     */
    @Override
    public void setAdditionalType(URL fAdditionalType) {
        this.fAdditionalType = fAdditionalType;
    }
    /**
     * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
     *
     * @param fAdditionalType java.net.URL value to set.
     */
    @Override
    public void setAdditionalType(java.net.URL fAdditionalType) {
        this.fAdditionalType = URL.of(fAdditionalType);
    }

    private Text fDisambiguatingDescription;

    /**
     * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
     *
     * @return {@link Text}
     */
    @Override
    public Text getDisambiguatingDescription() {
        return fDisambiguatingDescription;
    }

    /**
     * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
     *
     * @param fDisambiguatingDescription Text value to set.
     */
    @Override
    public void setDisambiguatingDescription(Text fDisambiguatingDescription) {
        this.fDisambiguatingDescription = fDisambiguatingDescription;
    }
    /**
     * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
     *
     * @param fDisambiguatingDescription java.lang.String value to set.
     */
    @Override
    public void setDisambiguatingDescription(java.lang.String fDisambiguatingDescription) {
        this.fDisambiguatingDescription = Text.of(fDisambiguatingDescription);
    }

    private URL fSameAs;

    /**
     * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
     *
     * @return {@link URL}
     */
    @Override
    public URL getSameAs() {
        return fSameAs;
    }

    /**
     * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
     *
     * @param fSameAs URL value to set.
     */
    @Override
    public void setSameAs(URL fSameAs) {
        this.fSameAs = fSameAs;
    }
    /**
     * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
     *
     * @param fSameAs java.net.URL value to set.
     */
    @Override
    public void setSameAs(java.net.URL fSameAs) {
        this.fSameAs = URL.of(fSameAs);
    }

    private Object fIdentifier;

    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @return {@link URL} or {@link Text} or {@link PropertyValue}
     */
    @Override
    public <T> T getIdentifier() {
        return (T) fIdentifier;
    }

    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @param fIdentifier URL value to set.
     */
    @Override
    public void setIdentifier(URL fIdentifier) {
        this.fIdentifier = fIdentifier;
    }
    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @param fIdentifier java.net.URL value to set.
     */
    @Override
    public void setIdentifier(java.net.URL fIdentifier) {
        this.fIdentifier = URL.of(fIdentifier);
    }
    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @param fIdentifier Text value to set.
     */
    @Override
    public void setIdentifier(Text fIdentifier) {
        this.fIdentifier = fIdentifier;
    }
    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @param fIdentifier java.lang.String value to set.
     */
    @Override
    public void setIdentifier(java.lang.String fIdentifier) {
        this.fIdentifier = Text.of(fIdentifier);
    }
    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @param fIdentifier PropertyValue value to set.
     */
    @Override
    public void setIdentifier(PropertyValue fIdentifier) {
        this.fIdentifier = fIdentifier;
    }
}
