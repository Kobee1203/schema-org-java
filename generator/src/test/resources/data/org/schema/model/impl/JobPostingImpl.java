/*
 * This class is auto generated by the schema.org code generator program.
 * https://github.com/Kobee1203/schema-org-java
 * Do not edit the class manually.
 */
package org.schema.model.impl;

import org.schema.model.datatype.Text;
import org.schema.model.MonetaryAmountDistribution;
import org.schema.model.MonetaryAmount;
import org.schema.model.datatype.Number;
import org.schema.model.Place;
import org.schema.model.datatype.URL;
import org.schema.model.DefinedTerm;
import org.schema.model.datatype.Boolean;
import org.schema.model.AdministrativeArea;
import org.schema.model.datatype.Date;
import org.schema.model.ContactPoint;
import org.schema.model.Occupation;
import org.schema.model.datatype.Integer;
import org.schema.model.OccupationalExperienceRequirements;
import org.schema.model.EducationalOccupationalCredential;
import org.schema.model.PriceSpecification;
import org.schema.model.datatype.DateTime;
import org.schema.model.Organization;
import org.schema.model.CategoryCode;
import org.schema.model.CreativeWork;
import org.schema.model.Action;
import org.schema.model.ImageObject;
import org.schema.model.Event;
import org.schema.model.PropertyValue;
import org.schema.model.Thing;
import com.weedow.schemaorg.commons.model.JsonLdTypeName;
import org.schema.model.Intangible;
import org.schema.model.JobPosting;

/**
 * A listing that describes a job opening in a certain organization.
 *
 * @see <a href="https://schema.org/JobPosting">https://schema.org/JobPosting</a>
 */
@JsonLdTypeName("JobPosting")
public class JobPostingImpl extends com.weedow.schemaorg.commons.model.JsonLdNodeImpl implements JobPosting {

    private Text employerOverview;

    /**
     * A description of the employer, career opportunities and work environment for this position.
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2396">https://github.com/schemaorg/schemaorg/issues/2396</a>
     */
    @Override
    public Text getEmployerOverview() {
        return employerOverview;
    }

    /**
     * A description of the employer, career opportunities and work environment for this position.
     *
     * @param employerOverview Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2396">https://github.com/schemaorg/schemaorg/issues/2396</a>
     */
    @Override
    public void setEmployerOverview(Text employerOverview) {
        this.employerOverview = employerOverview;
    }

    private Object estimatedSalary;

    /**
     * An estimated salary for a job posting or occupation, based on a variety of variables including, but not limited to industry, job title, and location. Estimated salaries  are often computed by outside organizations rather than the hiring organization, who may not have committed to the estimated value.
     *
     * @return {@link MonetaryAmountDistribution} or {@link MonetaryAmount} or {@link Number}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public <T> T getEstimatedSalary() {
        return (T) estimatedSalary;
    }

    /**
     * An estimated salary for a job posting or occupation, based on a variety of variables including, but not limited to industry, job title, and location. Estimated salaries  are often computed by outside organizations rather than the hiring organization, who may not have committed to the estimated value.
     *
     * @param estimatedSalary MonetaryAmountDistribution value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setEstimatedSalary(MonetaryAmountDistribution estimatedSalary) {
        this.estimatedSalary = estimatedSalary;
    }
    /**
     * An estimated salary for a job posting or occupation, based on a variety of variables including, but not limited to industry, job title, and location. Estimated salaries  are often computed by outside organizations rather than the hiring organization, who may not have committed to the estimated value.
     *
     * @param estimatedSalary MonetaryAmount value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setEstimatedSalary(MonetaryAmount estimatedSalary) {
        this.estimatedSalary = estimatedSalary;
    }
    /**
     * An estimated salary for a job posting or occupation, based on a variety of variables including, but not limited to industry, job title, and location. Estimated salaries  are often computed by outside organizations rather than the hiring organization, who may not have committed to the estimated value.
     *
     * @param estimatedSalary Number value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setEstimatedSalary(Number estimatedSalary) {
        this.estimatedSalary = estimatedSalary;
    }

    private Text jobLocationType;

    /**
     * A description of the job location (e.g TELECOMMUTE for telecommute jobs).
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1591">https://github.com/schemaorg/schemaorg/issues/1591</a>
     */
    @Override
    public Text getJobLocationType() {
        return jobLocationType;
    }

    /**
     * A description of the job location (e.g TELECOMMUTE for telecommute jobs).
     *
     * @param jobLocationType Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1591">https://github.com/schemaorg/schemaorg/issues/1591</a>
     */
    @Override
    public void setJobLocationType(Text jobLocationType) {
        this.jobLocationType = jobLocationType;
    }

    private Text responsibilities;

    /**
     * Responsibilities associated with this role or Occupation.
     *
     * @return {@link Text}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public Text getResponsibilities() {
        return responsibilities;
    }

    /**
     * Responsibilities associated with this role or Occupation.
     *
     * @param responsibilities Text value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setResponsibilities(Text responsibilities) {
        this.responsibilities = responsibilities;
    }

    private Place jobLocation;

    /**
     * A (typically single) geographic location associated with the job position.
     *
     * @return {@link Place}
     */
    @Override
    public Place getJobLocation() {
        return jobLocation;
    }

    /**
     * A (typically single) geographic location associated with the job position.
     *
     * @param jobLocation Place value to set.
     */
    @Override
    public void setJobLocation(Place jobLocation) {
        this.jobLocation = jobLocation;
    }

    private Object physicalRequirement;

    /**
     * A description of the types of physical activity associated with the job. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
     *
     * @return {@link URL} or {@link Text} or {@link DefinedTerm}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public <T> T getPhysicalRequirement() {
        return (T) physicalRequirement;
    }

    /**
     * A description of the types of physical activity associated with the job. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
     *
     * @param physicalRequirement URL value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public void setPhysicalRequirement(URL physicalRequirement) {
        this.physicalRequirement = physicalRequirement;
    }
    /**
     * A description of the types of physical activity associated with the job. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
     *
     * @param physicalRequirement Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public void setPhysicalRequirement(Text physicalRequirement) {
        this.physicalRequirement = physicalRequirement;
    }
    /**
     * A description of the types of physical activity associated with the job. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
     *
     * @param physicalRequirement DefinedTerm value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public void setPhysicalRequirement(DefinedTerm physicalRequirement) {
        this.physicalRequirement = physicalRequirement;
    }

    private Text incentives;

    /**
     * Description of bonus and commission compensation aspects of the job.
     *
     * @return {@link Text}
     */
    @Override
    public Text getIncentives() {
        return incentives;
    }

    /**
     * Description of bonus and commission compensation aspects of the job.
     *
     * @param incentives Text value to set.
     */
    @Override
    public void setIncentives(Text incentives) {
        this.incentives = incentives;
    }

    private Boolean directApply;

    /**
     * Indicates whether an [[url]] that is associated with a [[JobPosting]] enables direct application for the job, via the posting website. A job posting is considered to have directApply of [[True]] if an application process for the specified job can be directly initiated via the url(s) given (noting that e.g. multiple internet domains might nevertheless be involved at an implementation level). A value of [[False]] is appropriate if there is no clear path to applying directly online for the specified job, navigating directly from the JobPosting url(s) supplied.
     *
     * @return {@link Boolean}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2907">https://github.com/schemaorg/schemaorg/issues/2907</a>
     */
    @Override
    public Boolean getDirectApply() {
        return directApply;
    }

    /**
     * Indicates whether an [[url]] that is associated with a [[JobPosting]] enables direct application for the job, via the posting website. A job posting is considered to have directApply of [[True]] if an application process for the specified job can be directly initiated via the url(s) given (noting that e.g. multiple internet domains might nevertheless be involved at an implementation level). A value of [[False]] is appropriate if there is no clear path to applying directly online for the specified job, navigating directly from the JobPosting url(s) supplied.
     *
     * @param directApply Boolean value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2907">https://github.com/schemaorg/schemaorg/issues/2907</a>
     */
    @Override
    public void setDirectApply(Boolean directApply) {
        this.directApply = directApply;
    }

    private Object sensoryRequirement;

    /**
     * A description of any sensory requirements and levels necessary to function on the job, including hearing and vision. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
     *
     * @return {@link DefinedTerm} or {@link URL} or {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public <T> T getSensoryRequirement() {
        return (T) sensoryRequirement;
    }

    /**
     * A description of any sensory requirements and levels necessary to function on the job, including hearing and vision. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
     *
     * @param sensoryRequirement DefinedTerm value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public void setSensoryRequirement(DefinedTerm sensoryRequirement) {
        this.sensoryRequirement = sensoryRequirement;
    }
    /**
     * A description of any sensory requirements and levels necessary to function on the job, including hearing and vision. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
     *
     * @param sensoryRequirement URL value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public void setSensoryRequirement(URL sensoryRequirement) {
        this.sensoryRequirement = sensoryRequirement;
    }
    /**
     * A description of any sensory requirements and levels necessary to function on the job, including hearing and vision. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
     *
     * @param sensoryRequirement Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public void setSensoryRequirement(Text sensoryRequirement) {
        this.sensoryRequirement = sensoryRequirement;
    }

    private AdministrativeArea applicantLocationRequirements;

    /**
     * The location(s) applicants can apply from. This is usually used for telecommuting jobs where the applicant does not need to be in a physical office. Note: This should not be used for citizenship or work visa requirements.
     *
     * @return {@link AdministrativeArea}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2083">https://github.com/schemaorg/schemaorg/issues/2083</a>
     */
    @Override
    public AdministrativeArea getApplicantLocationRequirements() {
        return applicantLocationRequirements;
    }

    /**
     * The location(s) applicants can apply from. This is usually used for telecommuting jobs where the applicant does not need to be in a physical office. Note: This should not be used for citizenship or work visa requirements.
     *
     * @param applicantLocationRequirements AdministrativeArea value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2083">https://github.com/schemaorg/schemaorg/issues/2083</a>
     */
    @Override
    public void setApplicantLocationRequirements(AdministrativeArea applicantLocationRequirements) {
        this.applicantLocationRequirements = applicantLocationRequirements;
    }

    private Text workHours;

    /**
     * The typical working hours for this job (e.g. 1st shift, night shift, 8am-5pm).
     *
     * @return {@link Text}
     */
    @Override
    public Text getWorkHours() {
        return workHours;
    }

    /**
     * The typical working hours for this job (e.g. 1st shift, night shift, 8am-5pm).
     *
     * @param workHours Text value to set.
     */
    @Override
    public void setWorkHours(Text workHours) {
        this.workHours = workHours;
    }

    private Object jobStartDate;

    /**
     * The date on which a successful applicant for this job would be expected to start work. Choose a specific date in the future or use the jobImmediateStart property to indicate the position is to be filled as soon as possible.
     *
     * @return {@link Date} or {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2244">https://github.com/schemaorg/schemaorg/issues/2244</a>
     */
    @Override
    public <T> T getJobStartDate() {
        return (T) jobStartDate;
    }

    /**
     * The date on which a successful applicant for this job would be expected to start work. Choose a specific date in the future or use the jobImmediateStart property to indicate the position is to be filled as soon as possible.
     *
     * @param jobStartDate Date value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2244">https://github.com/schemaorg/schemaorg/issues/2244</a>
     */
    @Override
    public void setJobStartDate(Date jobStartDate) {
        this.jobStartDate = jobStartDate;
    }
    /**
     * The date on which a successful applicant for this job would be expected to start work. Choose a specific date in the future or use the jobImmediateStart property to indicate the position is to be filled as soon as possible.
     *
     * @param jobStartDate Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2244">https://github.com/schemaorg/schemaorg/issues/2244</a>
     */
    @Override
    public void setJobStartDate(Text jobStartDate) {
        this.jobStartDate = jobStartDate;
    }

    private Text employmentType;

    /**
     * Type of employment (e.g. full-time, part-time, contract, temporary, seasonal, internship).
     *
     * @return {@link Text}
     */
    @Override
    public Text getEmploymentType() {
        return employmentType;
    }

    /**
     * Type of employment (e.g. full-time, part-time, contract, temporary, seasonal, internship).
     *
     * @param employmentType Text value to set.
     */
    @Override
    public void setEmploymentType(Text employmentType) {
        this.employmentType = employmentType;
    }

    private Text specialCommitments;

    /**
     * Any special commitments associated with this job posting. Valid entries include VeteranCommit, MilitarySpouseCommit, etc.
     *
     * @return {@link Text}
     */
    @Override
    public Text getSpecialCommitments() {
        return specialCommitments;
    }

    /**
     * Any special commitments associated with this job posting. Valid entries include VeteranCommit, MilitarySpouseCommit, etc.
     *
     * @param specialCommitments Text value to set.
     */
    @Override
    public void setSpecialCommitments(Text specialCommitments) {
        this.specialCommitments = specialCommitments;
    }

    private ContactPoint applicationContact;

    /**
     * Contact details for further information relevant to this job posting.
     *
     * @return {@link ContactPoint}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2396">https://github.com/schemaorg/schemaorg/issues/2396</a>
     */
    @Override
    public ContactPoint getApplicationContact() {
        return applicationContact;
    }

    /**
     * Contact details for further information relevant to this job posting.
     *
     * @param applicationContact ContactPoint value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2396">https://github.com/schemaorg/schemaorg/issues/2396</a>
     */
    @Override
    public void setApplicationContact(ContactPoint applicationContact) {
        this.applicationContact = applicationContact;
    }

    private Text incentiveCompensation;

    /**
     * Description of bonus and commission compensation aspects of the job.
     *
     * @return {@link Text}
     */
    @Override
    public Text getIncentiveCompensation() {
        return incentiveCompensation;
    }

    /**
     * Description of bonus and commission compensation aspects of the job.
     *
     * @param incentiveCompensation Text value to set.
     */
    @Override
    public void setIncentiveCompensation(Text incentiveCompensation) {
        this.incentiveCompensation = incentiveCompensation;
    }

    private Occupation relevantOccupation;

    /**
     * The Occupation for the JobPosting.
     *
     * @return {@link Occupation}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public Occupation getRelevantOccupation() {
        return relevantOccupation;
    }

    /**
     * The Occupation for the JobPosting.
     *
     * @param relevantOccupation Occupation value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setRelevantOccupation(Occupation relevantOccupation) {
        this.relevantOccupation = relevantOccupation;
    }

    private Integer totalJobOpenings;

    /**
     * The number of positions open for this job posting. Use a positive integer. Do not use if the number of positions is unclear or not known.
     *
     * @return {@link Integer}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2329">https://github.com/schemaorg/schemaorg/issues/2329</a>
     */
    @Override
    public Integer getTotalJobOpenings() {
        return totalJobOpenings;
    }

    /**
     * The number of positions open for this job posting. Use a positive integer. Do not use if the number of positions is unclear or not known.
     *
     * @param totalJobOpenings Integer value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2329">https://github.com/schemaorg/schemaorg/issues/2329</a>
     */
    @Override
    public void setTotalJobOpenings(Integer totalJobOpenings) {
        this.totalJobOpenings = totalJobOpenings;
    }

    private Object experienceRequirements;

    /**
     * Description of skills and experience needed for the position or Occupation.
     *
     * @return {@link Text} or {@link OccupationalExperienceRequirements}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public <T> T getExperienceRequirements() {
        return (T) experienceRequirements;
    }

    /**
     * Description of skills and experience needed for the position or Occupation.
     *
     * @param experienceRequirements Text value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setExperienceRequirements(Text experienceRequirements) {
        this.experienceRequirements = experienceRequirements;
    }
    /**
     * Description of skills and experience needed for the position or Occupation.
     *
     * @param experienceRequirements OccupationalExperienceRequirements value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setExperienceRequirements(OccupationalExperienceRequirements experienceRequirements) {
        this.experienceRequirements = experienceRequirements;
    }

    private Text jobBenefits;

    /**
     * Description of benefits associated with the job.
     *
     * @return {@link Text}
     */
    @Override
    public Text getJobBenefits() {
        return jobBenefits;
    }

    /**
     * Description of benefits associated with the job.
     *
     * @param jobBenefits Text value to set.
     */
    @Override
    public void setJobBenefits(Text jobBenefits) {
        this.jobBenefits = jobBenefits;
    }

    private Text salaryCurrency;

    /**
     * The currency (coded using [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) ) used for the main salary information in this job posting or for this employee.
     *
     * @return {@link Text}
     */
    @Override
    public Text getSalaryCurrency() {
        return salaryCurrency;
    }

    /**
     * The currency (coded using [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) ) used for the main salary information in this job posting or for this employee.
     *
     * @param salaryCurrency Text value to set.
     */
    @Override
    public void setSalaryCurrency(Text salaryCurrency) {
        this.salaryCurrency = salaryCurrency;
    }

    private Boolean experienceInPlaceOfEducation;

    /**
     * Indicates whether a [[JobPosting]] will accept experience (as indicated by [[OccupationalExperienceRequirements]]) in place of its formal educational qualifications (as indicated by [[educationRequirements]]). If true, indicates that satisfying one of these requirements is sufficient.
     *
     * @return {@link Boolean}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2681">https://github.com/schemaorg/schemaorg/issues/2681</a>
     */
    @Override
    public Boolean getExperienceInPlaceOfEducation() {
        return experienceInPlaceOfEducation;
    }

    /**
     * Indicates whether a [[JobPosting]] will accept experience (as indicated by [[OccupationalExperienceRequirements]]) in place of its formal educational qualifications (as indicated by [[educationRequirements]]). If true, indicates that satisfying one of these requirements is sufficient.
     *
     * @param experienceInPlaceOfEducation Boolean value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2681">https://github.com/schemaorg/schemaorg/issues/2681</a>
     */
    @Override
    public void setExperienceInPlaceOfEducation(Boolean experienceInPlaceOfEducation) {
        this.experienceInPlaceOfEducation = experienceInPlaceOfEducation;
    }

    private Object securityClearanceRequirement;

    /**
     * A description of any security clearance requirements of the job.
     *
     * @return {@link URL} or {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public <T> T getSecurityClearanceRequirement() {
        return (T) securityClearanceRequirement;
    }

    /**
     * A description of any security clearance requirements of the job.
     *
     * @param securityClearanceRequirement URL value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public void setSecurityClearanceRequirement(URL securityClearanceRequirement) {
        this.securityClearanceRequirement = securityClearanceRequirement;
    }
    /**
     * A description of any security clearance requirements of the job.
     *
     * @param securityClearanceRequirement Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public void setSecurityClearanceRequirement(Text securityClearanceRequirement) {
        this.securityClearanceRequirement = securityClearanceRequirement;
    }

    private Text eligibilityToWorkRequirement;

    /**
     * The legal requirements such as citizenship, visa and other documentation required for an applicant to this job.
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public Text getEligibilityToWorkRequirement() {
        return eligibilityToWorkRequirement;
    }

    /**
     * The legal requirements such as citizenship, visa and other documentation required for an applicant to this job.
     *
     * @param eligibilityToWorkRequirement Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2384">https://github.com/schemaorg/schemaorg/issues/2384</a>
     */
    @Override
    public void setEligibilityToWorkRequirement(Text eligibilityToWorkRequirement) {
        this.eligibilityToWorkRequirement = eligibilityToWorkRequirement;
    }

    private Object educationRequirements;

    /**
     * Educational background needed for the position or Occupation.
     *
     * @return {@link EducationalOccupationalCredential} or {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1779">https://github.com/schemaorg/schemaorg/issues/1779</a>
     */
    @Override
    public <T> T getEducationRequirements() {
        return (T) educationRequirements;
    }

    /**
     * Educational background needed for the position or Occupation.
     *
     * @param educationRequirements EducationalOccupationalCredential value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1779">https://github.com/schemaorg/schemaorg/issues/1779</a>
     */
    @Override
    public void setEducationRequirements(EducationalOccupationalCredential educationRequirements) {
        this.educationRequirements = educationRequirements;
    }
    /**
     * Educational background needed for the position or Occupation.
     *
     * @param educationRequirements Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1779">https://github.com/schemaorg/schemaorg/issues/1779</a>
     */
    @Override
    public void setEducationRequirements(Text educationRequirements) {
        this.educationRequirements = educationRequirements;
    }

    private Text benefits;

    /**
     * Description of benefits associated with the job.
     *
     * @return {@link Text}
     */
    @Override
    public Text getBenefits() {
        return benefits;
    }

    /**
     * Description of benefits associated with the job.
     *
     * @param benefits Text value to set.
     */
    @Override
    public void setBenefits(Text benefits) {
        this.benefits = benefits;
    }

    private Object industry;

    /**
     * The industry associated with the job position.
     *
     * @return {@link DefinedTerm} or {@link Text}
     */
    @Override
    public <T> T getIndustry() {
        return (T) industry;
    }

    /**
     * The industry associated with the job position.
     *
     * @param industry DefinedTerm value to set.
     */
    @Override
    public void setIndustry(DefinedTerm industry) {
        this.industry = industry;
    }
    /**
     * The industry associated with the job position.
     *
     * @param industry Text value to set.
     */
    @Override
    public void setIndustry(Text industry) {
        this.industry = industry;
    }

    private Object baseSalary;

    /**
     * The base salary of the job or of an employee in an EmployeeRole.
     *
     * @return {@link Number} or {@link PriceSpecification} or {@link MonetaryAmount}
     */
    @Override
    public <T> T getBaseSalary() {
        return (T) baseSalary;
    }

    /**
     * The base salary of the job or of an employee in an EmployeeRole.
     *
     * @param baseSalary Number value to set.
     */
    @Override
    public void setBaseSalary(Number baseSalary) {
        this.baseSalary = baseSalary;
    }
    /**
     * The base salary of the job or of an employee in an EmployeeRole.
     *
     * @param baseSalary PriceSpecification value to set.
     */
    @Override
    public void setBaseSalary(PriceSpecification baseSalary) {
        this.baseSalary = baseSalary;
    }
    /**
     * The base salary of the job or of an employee in an EmployeeRole.
     *
     * @param baseSalary MonetaryAmount value to set.
     */
    @Override
    public void setBaseSalary(MonetaryAmount baseSalary) {
        this.baseSalary = baseSalary;
    }

    private Object datePosted;

    /**
     * Publication date of an online listing.
     *
     * @return {@link Date} or {@link DateTime}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2521">https://github.com/schemaorg/schemaorg/issues/2521</a>
     */
    @Override
    public <T> T getDatePosted() {
        return (T) datePosted;
    }

    /**
     * Publication date of an online listing.
     *
     * @param datePosted Date value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2521">https://github.com/schemaorg/schemaorg/issues/2521</a>
     */
    @Override
    public void setDatePosted(Date datePosted) {
        this.datePosted = datePosted;
    }
    /**
     * Publication date of an online listing.
     *
     * @param datePosted DateTime value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2521">https://github.com/schemaorg/schemaorg/issues/2521</a>
     */
    @Override
    public void setDatePosted(DateTime datePosted) {
        this.datePosted = datePosted;
    }

    private Object skills;

    /**
     * A statement of knowledge, skill, ability, task or any other assertion expressing a competency that is desired or required to fulfill this role or to work in this occupation.
     *
     * @return {@link Text} or {@link DefinedTerm}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2322">https://github.com/schemaorg/schemaorg/issues/2322</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public <T> T getSkills() {
        return (T) skills;
    }

    /**
     * A statement of knowledge, skill, ability, task or any other assertion expressing a competency that is desired or required to fulfill this role or to work in this occupation.
     *
     * @param skills Text value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2322">https://github.com/schemaorg/schemaorg/issues/2322</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setSkills(Text skills) {
        this.skills = skills;
    }
    /**
     * A statement of knowledge, skill, ability, task or any other assertion expressing a competency that is desired or required to fulfill this role or to work in this occupation.
     *
     * @param skills DefinedTerm value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2322">https://github.com/schemaorg/schemaorg/issues/2322</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setSkills(DefinedTerm skills) {
        this.skills = skills;
    }

    private Text title;

    /**
     * The title of the job.
     *
     * @return {@link Text}
     */
    @Override
    public Text getTitle() {
        return title;
    }

    /**
     * The title of the job.
     *
     * @param title Text value to set.
     */
    @Override
    public void setTitle(Text title) {
        this.title = title;
    }

    private Organization hiringOrganization;

    /**
     * Organization offering the job position.
     *
     * @return {@link Organization}
     */
    @Override
    public Organization getHiringOrganization() {
        return hiringOrganization;
    }

    /**
     * Organization offering the job position.
     *
     * @param hiringOrganization Organization value to set.
     */
    @Override
    public void setHiringOrganization(Organization hiringOrganization) {
        this.hiringOrganization = hiringOrganization;
    }

    private Boolean jobImmediateStart;

    /**
     * An indicator as to whether a position is available for an immediate start.
     *
     * @return {@link Boolean}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2244">https://github.com/schemaorg/schemaorg/issues/2244</a>
     */
    @Override
    public Boolean getJobImmediateStart() {
        return jobImmediateStart;
    }

    /**
     * An indicator as to whether a position is available for an immediate start.
     *
     * @param jobImmediateStart Boolean value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2244">https://github.com/schemaorg/schemaorg/issues/2244</a>
     */
    @Override
    public void setJobImmediateStart(Boolean jobImmediateStart) {
        this.jobImmediateStart = jobImmediateStart;
    }

    private Object validThrough;

    /**
     * The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.
     *
     * @return {@link DateTime} or {@link Date}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public <T> T getValidThrough() {
        return (T) validThrough;
    }

    /**
     * The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.
     *
     * @param validThrough DateTime value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public void setValidThrough(DateTime validThrough) {
        this.validThrough = validThrough;
    }
    /**
     * The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.
     *
     * @param validThrough Date value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public void setValidThrough(Date validThrough) {
        this.validThrough = validThrough;
    }

    private Organization employmentUnit;

    /**
     * Indicates the department, unit and/or facility where the employee reports and/or in which the job is to be performed.
     *
     * @return {@link Organization}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2296">https://github.com/schemaorg/schemaorg/issues/2296</a>
     */
    @Override
    public Organization getEmploymentUnit() {
        return employmentUnit;
    }

    /**
     * Indicates the department, unit and/or facility where the employee reports and/or in which the job is to be performed.
     *
     * @param employmentUnit Organization value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2296">https://github.com/schemaorg/schemaorg/issues/2296</a>
     */
    @Override
    public void setEmploymentUnit(Organization employmentUnit) {
        this.employmentUnit = employmentUnit;
    }

    private Object qualifications;

    /**
     * Specific qualifications required for this role or Occupation.
     *
     * @return {@link Text} or {@link EducationalOccupationalCredential}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1779">https://github.com/schemaorg/schemaorg/issues/1779</a>
     */
    @Override
    public <T> T getQualifications() {
        return (T) qualifications;
    }

    /**
     * Specific qualifications required for this role or Occupation.
     *
     * @param qualifications Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1779">https://github.com/schemaorg/schemaorg/issues/1779</a>
     */
    @Override
    public void setQualifications(Text qualifications) {
        this.qualifications = qualifications;
    }
    /**
     * Specific qualifications required for this role or Occupation.
     *
     * @param qualifications EducationalOccupationalCredential value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1779">https://github.com/schemaorg/schemaorg/issues/1779</a>
     */
    @Override
    public void setQualifications(EducationalOccupationalCredential qualifications) {
        this.qualifications = qualifications;
    }

    private Object occupationalCategory;

    /**
     * A category describing the job, preferably using a term from a taxonomy such as [BLS O*NET-SOC](http://www.onetcenter.org/taxonomy.html), [ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.<br/>
     * Note: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC.
     *
     * @return {@link CategoryCode} or {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2460">https://github.com/schemaorg/schemaorg/issues/2460</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2192">https://github.com/schemaorg/schemaorg/issues/2192</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public <T> T getOccupationalCategory() {
        return (T) occupationalCategory;
    }

    /**
     * A category describing the job, preferably using a term from a taxonomy such as [BLS O*NET-SOC](http://www.onetcenter.org/taxonomy.html), [ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.<br/>
     * Note: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC.
     *
     * @param occupationalCategory CategoryCode value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2460">https://github.com/schemaorg/schemaorg/issues/2460</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2192">https://github.com/schemaorg/schemaorg/issues/2192</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setOccupationalCategory(CategoryCode occupationalCategory) {
        this.occupationalCategory = occupationalCategory;
    }
    /**
     * A category describing the job, preferably using a term from a taxonomy such as [BLS O*NET-SOC](http://www.onetcenter.org/taxonomy.html), [ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.<br/>
     * Note: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC.
     *
     * @param occupationalCategory Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2460">https://github.com/schemaorg/schemaorg/issues/2460</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2192">https://github.com/schemaorg/schemaorg/issues/2192</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1698">https://github.com/schemaorg/schemaorg/issues/1698</a>
     */
    @Override
    public void setOccupationalCategory(Text occupationalCategory) {
        this.occupationalCategory = occupationalCategory;
    }

    private Object mainEntityOfPage;

    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     * @return {@link CreativeWork} or {@link URL}
     */
    @Override
    public <T> T getMainEntityOfPage() {
        return (T) mainEntityOfPage;
    }

    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     * @param mainEntityOfPage CreativeWork value to set.
     */
    @Override
    public void setMainEntityOfPage(CreativeWork mainEntityOfPage) {
        this.mainEntityOfPage = mainEntityOfPage;
    }
    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     * @param mainEntityOfPage URL value to set.
     */
    @Override
    public void setMainEntityOfPage(URL mainEntityOfPage) {
        this.mainEntityOfPage = mainEntityOfPage;
    }

    private Text alternateName;

    /**
     * An alias for the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getAlternateName() {
        return alternateName;
    }

    /**
     * An alias for the item.
     *
     * @param alternateName Text value to set.
     */
    @Override
    public void setAlternateName(Text alternateName) {
        this.alternateName = alternateName;
    }

    private Text name;

    /**
     * The name of the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getName() {
        return name;
    }

    /**
     * The name of the item.
     *
     * @param name Text value to set.
     */
    @Override
    public void setName(Text name) {
        this.name = name;
    }

    private Action potentialAction;

    /**
     * Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
     *
     * @return {@link Action}
     */
    @Override
    public Action getPotentialAction() {
        return potentialAction;
    }

    /**
     * Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
     *
     * @param potentialAction Action value to set.
     */
    @Override
    public void setPotentialAction(Action potentialAction) {
        this.potentialAction = potentialAction;
    }

    private Object image;

    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * @return {@link URL} or {@link ImageObject}
     */
    @Override
    public <T> T getImage() {
        return (T) image;
    }

    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * @param image URL value to set.
     */
    @Override
    public void setImage(URL image) {
        this.image = image;
    }
    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * @param image ImageObject value to set.
     */
    @Override
    public void setImage(ImageObject image) {
        this.image = image;
    }

    private URL url;

    /**
     * URL of the item.
     *
     * @return {@link URL}
     */
    @Override
    public URL getUrl() {
        return url;
    }

    /**
     * URL of the item.
     *
     * @param url URL value to set.
     */
    @Override
    public void setUrl(URL url) {
        this.url = url;
    }

    private Text description;

    /**
     * A description of the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getDescription() {
        return description;
    }

    /**
     * A description of the item.
     *
     * @param description Text value to set.
     */
    @Override
    public void setDescription(Text description) {
        this.description = description;
    }

    private Object subjectOf;

    /**
     * A CreativeWork or Event about this Thing.
     *
     * @return {@link Event} or {@link CreativeWork}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public <T> T getSubjectOf() {
        return (T) subjectOf;
    }

    /**
     * A CreativeWork or Event about this Thing.
     *
     * @param subjectOf Event value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public void setSubjectOf(Event subjectOf) {
        this.subjectOf = subjectOf;
    }
    /**
     * A CreativeWork or Event about this Thing.
     *
     * @param subjectOf CreativeWork value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public void setSubjectOf(CreativeWork subjectOf) {
        this.subjectOf = subjectOf;
    }

    private URL additionalType;

    /**
     * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
     *
     * @return {@link URL}
     */
    @Override
    public URL getAdditionalType() {
        return additionalType;
    }

    /**
     * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
     *
     * @param additionalType URL value to set.
     */
    @Override
    public void setAdditionalType(URL additionalType) {
        this.additionalType = additionalType;
    }

    private Text disambiguatingDescription;

    /**
     * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
     *
     * @return {@link Text}
     */
    @Override
    public Text getDisambiguatingDescription() {
        return disambiguatingDescription;
    }

    /**
     * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
     *
     * @param disambiguatingDescription Text value to set.
     */
    @Override
    public void setDisambiguatingDescription(Text disambiguatingDescription) {
        this.disambiguatingDescription = disambiguatingDescription;
    }

    private URL sameAs;

    /**
     * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
     *
     * @return {@link URL}
     */
    @Override
    public URL getSameAs() {
        return sameAs;
    }

    /**
     * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
     *
     * @param sameAs URL value to set.
     */
    @Override
    public void setSameAs(URL sameAs) {
        this.sameAs = sameAs;
    }

    private Object identifier;

    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @return {@link URL} or {@link Text} or {@link PropertyValue}
     */
    @Override
    public <T> T getIdentifier() {
        return (T) identifier;
    }

    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @param identifier URL value to set.
     */
    @Override
    public void setIdentifier(URL identifier) {
        this.identifier = identifier;
    }
    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @param identifier Text value to set.
     */
    @Override
    public void setIdentifier(Text identifier) {
        this.identifier = identifier;
    }
    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @param identifier PropertyValue value to set.
     */
    @Override
    public void setIdentifier(PropertyValue identifier) {
        this.identifier = identifier;
    }
}
