/*
 * This class is auto generated by the schema.org code generator program.
 * https://github.com/Kobee1203/schema-org-java
 * Do not edit the class manually.
 */
package org.schema.model;

import org.schema.model.ParcelDelivery;
import org.schema.model.PostalAddress;
import org.schema.model.Offer;
import org.schema.model.Organization;
import org.schema.model.Person;
import org.schema.model.OrderStatus;
import org.schema.model.datatype.Text;
import org.schema.model.Invoice;
import org.schema.model.datatype.DateTime;
import org.schema.model.datatype.Date;
import org.schema.model.datatype.Number;
import org.schema.model.datatype.URL;
import org.schema.model.datatype.Boolean;
import org.schema.model.Service;
import org.schema.model.OrderItem;
import org.schema.model.Product;
import org.schema.model.PaymentMethod;

/**
 * An order is a confirmation of a transaction (a receipt), which can contain multiple line items, each represented by an Offer that has been accepted by the customer.
 *
 * @see <a href="https://schema.org/Order">https://schema.org/Order</a>
 */
public interface Order extends Intangible {

    /**
     * The delivery of the parcel related to this order or order item.
     *
     * @return {@link ParcelDelivery}
     */
    ParcelDelivery getOrderDelivery();

    /**
     * The delivery of the parcel related to this order or order item.
     *
     */
    void setOrderDelivery(ParcelDelivery fOrderDelivery);

    /**
     * The billing address for the order.
     *
     * @return {@link PostalAddress}
     */
    PostalAddress getBillingAddress();

    /**
     * The billing address for the order.
     *
     */
    void setBillingAddress(PostalAddress fBillingAddress);

    /**
     * The offer(s) -- e.g., product, quantity and price combinations -- included in the order.
     *
     * @return {@link Offer}
     */
    Offer getAcceptedOffer();

    /**
     * The offer(s) -- e.g., product, quantity and price combinations -- included in the order.
     *
     */
    void setAcceptedOffer(Offer fAcceptedOffer);

    /**
     * 'merchant' is an out-dated term for 'seller'.
     *
     * @return {@link Organization} or {@link Person}
     */
    <T> T getMerchant();

    /**
     * 'merchant' is an out-dated term for 'seller'.
     *
     */
    void setMerchant(Object fMerchant);

    /**
     * The current status of the order.
     *
     * @return {@link OrderStatus}
     */
    OrderStatus getOrderStatus();

    /**
     * The current status of the order.
     *
     */
    void setOrderStatus(OrderStatus fOrderStatus);

    /**
     * A number that confirms the given order or payment has been received.
     *
     * @return {@link Text}
     */
    Text getConfirmationNumber();

    /**
     * A number that confirms the given order or payment has been received.
     *
     */
    void setConfirmationNumber(Text fConfirmationNumber);

    /**
     * The order is being paid as part of the referenced Invoice.
     *
     * @return {@link Invoice}
     */
    Invoice getPartOfInvoice();

    /**
     * The order is being paid as part of the referenced Invoice.
     *
     */
    void setPartOfInvoice(Invoice fPartOfInvoice);

    /**
     * The identifier of the transaction.
     *
     * @return {@link Text}
     */
    Text getOrderNumber();

    /**
     * The identifier of the transaction.
     *
     */
    void setOrderNumber(Text fOrderNumber);

    /**
     * An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider.
     *
     * @return {@link Organization} or {@link Person}
     */
    <T> T getSeller();

    /**
     * An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider.
     *
     */
    void setSeller(Object fSeller);

    /**
     * Party placing the order or paying the invoice.
     *
     * @return {@link Organization} or {@link Person}
     */
    <T> T getCustomer();

    /**
     * Party placing the order or paying the invoice.
     *
     */
    void setCustomer(Object fCustomer);

    /**
     * The date that payment is due.
     *
     * @return {@link DateTime} or {@link Date}
     */
    <T> T getPaymentDueDate();

    /**
     * The date that payment is due.
     *
     */
    void setPaymentDueDate(Object fPaymentDueDate);

    /**
     * An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
     *
     * @return {@link Person} or {@link Organization}
     */
    <T> T getBroker();

    /**
     * An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
     *
     */
    void setBroker(Object fBroker);

    /**
     * Code used to redeem a discount.
     *
     * @return {@link Text}
     */
    Text getDiscountCode();

    /**
     * Code used to redeem a discount.
     *
     */
    void setDiscountCode(Text fDiscountCode);

    /**
     * Any discount applied (to an Order).
     *
     * @return {@link Text} or {@link Number}
     */
    <T> T getDiscount();

    /**
     * Any discount applied (to an Order).
     *
     */
    void setDiscount(Object fDiscount);

    /**
     * An identifier for the method of payment used (e.g. the last 4 digits of the credit card).
     *
     * @return {@link Text}
     */
    Text getPaymentMethodId();

    /**
     * An identifier for the method of payment used (e.g. the last 4 digits of the credit card).
     *
     */
    void setPaymentMethodId(Text fPaymentMethodId);

    /**
     * The URL for sending a payment.
     *
     * @return {@link URL}
     */
    URL getPaymentUrl();

    /**
     * The URL for sending a payment.
     *
     */
    void setPaymentUrl(URL fPaymentUrl);

    /**
     * The currency of the discount.<br/><br/>Use standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
     *
     * @return {@link Text}
     */
    Text getDiscountCurrency();

    /**
     * The currency of the discount.<br/><br/>Use standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
     *
     */
    void setDiscountCurrency(Text fDiscountCurrency);

    /**
     * The date that payment is due.
     *
     * @return {@link DateTime}
     */
    DateTime getPaymentDue();

    /**
     * The date that payment is due.
     *
     */
    void setPaymentDue(DateTime fPaymentDue);

    /**
     * Date order was placed.
     *
     * @return {@link Date} or {@link DateTime}
     */
    <T> T getOrderDate();

    /**
     * Date order was placed.
     *
     */
    void setOrderDate(Object fOrderDate);

    /**
     * Was the offer accepted as a gift for someone other than the buyer.
     *
     * @return {@link Boolean}
     */
    Boolean getIsGift();

    /**
     * Was the offer accepted as a gift for someone other than the buyer.
     *
     */
    void setIsGift(Boolean fIsGift);

    /**
     * The item ordered.
     *
     * @return {@link Service} or {@link OrderItem} or {@link Product}
     */
    <T> T getOrderedItem();

    /**
     * The item ordered.
     *
     */
    void setOrderedItem(Object fOrderedItem);

    /**
     * The name of the credit card or other method of payment for the order.
     *
     * @return {@link PaymentMethod}
     */
    PaymentMethod getPaymentMethod();

    /**
     * The name of the credit card or other method of payment for the order.
     *
     */
    void setPaymentMethod(PaymentMethod fPaymentMethod);
}
