/*
 * This class is auto generated by the schema.org code generator program.
 * https://github.com/Kobee1203/schema-org-java
 * Do not edit the class manually.
 */
package org.schema.model;

import java.util.List;
import org.schema.model.Organization;
import org.schema.model.Person;
import org.schema.model.datatype.Text;
import org.schema.model.datatype.Number;
import org.schema.model.QuantitativeValue;

/**
 * Used to describe membership in a loyalty programs (e.g. "StarAliance"), traveler clubs (e.g. "AAA"), purchase clubs ("Safeway Club"), etc.
 *
 * @see <a href="https://schema.org/ProgramMembership">https://schema.org/ProgramMembership</a>
 */
public interface ProgramMembership extends Intangible {

    /**
     * A member of an Organization or a ProgramMembership. Organizations can be members of organizations; ProgramMembership is typically for individuals.
     *
     * @return {@link Organization} or {@link Person}
     */
    <T> List<T> getMemberList();

    /**
     * A member of an Organization or a ProgramMembership. Organizations can be members of organizations; ProgramMembership is typically for individuals.
     *
     * @return {@link Organization} or {@link Person}
     */
    <T> T getMember();

    /**
     * A member of an Organization or a ProgramMembership. Organizations can be members of organizations; ProgramMembership is typically for individuals.
     *
     * @param member Organization value to set.
     */
    void addMember(Organization member);
    /**
     * A member of an Organization or a ProgramMembership. Organizations can be members of organizations; ProgramMembership is typically for individuals.
     *
     * @param member Person value to set.
     */
    void addMember(Person member);

    /**
     * The organization (airline, travelers' club, etc.) the membership is made with.
     *
     * @return {@link Organization}
     */
    List<Organization> getHostingOrganizationList();

    /**
     * The organization (airline, travelers' club, etc.) the membership is made with.
     *
     * @return {@link Organization}
     */
    Organization getHostingOrganization();

    /**
     * The organization (airline, travelers' club, etc.) the membership is made with.
     *
     * @param hostingOrganization Organization value to set.
     */
    void addHostingOrganization(Organization hostingOrganization);

    /**
     * A unique identifier for the membership.
     *
     * @return {@link Text}
     */
    List<Text> getMembershipNumberList();

    /**
     * A unique identifier for the membership.
     *
     * @return {@link Text}
     */
    Text getMembershipNumber();

    /**
     * A unique identifier for the membership.
     *
     * @param membershipNumber Text value to set.
     */
    void addMembershipNumber(Text membershipNumber);

    /**
     * A member of this organization.
     *
     * @return {@link Organization} or {@link Person}
     */
    <T> List<T> getMembersList();

    /**
     * A member of this organization.
     *
     * @return {@link Organization} or {@link Person}
     */
    <T> T getMembers();

    /**
     * A member of this organization.
     *
     * @param members Organization value to set.
     */
    void addMembers(Organization members);
    /**
     * A member of this organization.
     *
     * @param members Person value to set.
     */
    void addMembers(Person members);

    /**
     * The number of membership points earned by the member. If necessary, the unitText can be used to express the units the points are issued in. (E.g. stars, miles, etc.)
     *
     * @return {@link Number} or {@link QuantitativeValue}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2085">https://github.com/schemaorg/schemaorg/issues/2085</a>
     */
    <T> List<T> getMembershipPointsEarnedList();

    /**
     * The number of membership points earned by the member. If necessary, the unitText can be used to express the units the points are issued in. (E.g. stars, miles, etc.)
     *
     * @return {@link Number} or {@link QuantitativeValue}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2085">https://github.com/schemaorg/schemaorg/issues/2085</a>
     */
    <T> T getMembershipPointsEarned();

    /**
     * The number of membership points earned by the member. If necessary, the unitText can be used to express the units the points are issued in. (E.g. stars, miles, etc.)
     *
     * @param membershipPointsEarned Number value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2085">https://github.com/schemaorg/schemaorg/issues/2085</a>
     */
    void addMembershipPointsEarned(Number membershipPointsEarned);
    /**
     * The number of membership points earned by the member. If necessary, the unitText can be used to express the units the points are issued in. (E.g. stars, miles, etc.)
     *
     * @param membershipPointsEarned QuantitativeValue value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2085">https://github.com/schemaorg/schemaorg/issues/2085</a>
     */
    void addMembershipPointsEarned(QuantitativeValue membershipPointsEarned);

    /**
     * The program providing the membership.
     *
     * @return {@link Text}
     */
    List<Text> getProgramNameList();

    /**
     * The program providing the membership.
     *
     * @return {@link Text}
     */
    Text getProgramName();

    /**
     * The program providing the membership.
     *
     * @param programName Text value to set.
     */
    void addProgramName(Text programName);
}
