/*
 * This class is auto generated by the schema.org code generator program.
 * https://github.com/Kobee1203/schema-org-java
 * Do not edit the class manually.
 */
package org.schema.model;

import org.schema.model.datatype.Text;
import org.schema.model.CreativeWork;
import org.schema.model.ItemList;
import org.schema.model.RestrictedDiet;
import org.schema.model.NutritionInformation;
import org.schema.model.QuantitativeValue;
import org.schema.model.Duration;

/**
 * A recipe. For dietary restrictions covered by the recipe, a few common restrictions are enumerated via [[suitableForDiet]]. The [[keywords]] property can also be used to add more detail.
 *
 * @see <a href="https://schema.org/Recipe">https://schema.org/Recipe</a>
 */
public interface Recipe extends HowTo {

    /**
     * A step in making the recipe, in the form of a single item (document, video, etc.) or an ordered list with HowToStep and/or HowToSection items.
     *
     * @return {@link Text} or {@link CreativeWork} or {@link ItemList}
     */
    <T> T getRecipeInstructions();

    /**
     * A step in making the recipe, in the form of a single item (document, video, etc.) or an ordered list with HowToStep and/or HowToSection items.
     *
     * @param recipeInstructions Text value to set.
     */
    void setRecipeInstructions(Text recipeInstructions);
    /**
     * A step in making the recipe, in the form of a single item (document, video, etc.) or an ordered list with HowToStep and/or HowToSection items.
     *
     * @param recipeInstructions CreativeWork value to set.
     */
    void setRecipeInstructions(CreativeWork recipeInstructions);
    /**
     * A step in making the recipe, in the form of a single item (document, video, etc.) or an ordered list with HowToStep and/or HowToSection items.
     *
     * @param recipeInstructions ItemList value to set.
     */
    void setRecipeInstructions(ItemList recipeInstructions);

    /**
     * A single ingredient used in the recipe, e.g. sugar, flour or garlic.
     *
     * @return {@link Text}
     */
    Text getIngredients();

    /**
     * A single ingredient used in the recipe, e.g. sugar, flour or garlic.
     *
     * @param ingredients Text value to set.
     */
    void setIngredients(Text ingredients);

    /**
     * The cuisine of the recipe (for example, French or Ethiopian).
     *
     * @return {@link Text}
     */
    Text getRecipeCuisine();

    /**
     * The cuisine of the recipe (for example, French or Ethiopian).
     *
     * @param recipeCuisine Text value to set.
     */
    void setRecipeCuisine(Text recipeCuisine);

    /**
     * Indicates a dietary restriction or guideline for which this recipe or menu item is suitable, e.g. diabetic, halal etc.
     *
     * @return {@link RestrictedDiet}
     */
    RestrictedDiet getSuitableForDiet();

    /**
     * Indicates a dietary restriction or guideline for which this recipe or menu item is suitable, e.g. diabetic, halal etc.
     *
     * @param suitableForDiet RestrictedDiet value to set.
     */
    void setSuitableForDiet(RestrictedDiet suitableForDiet);

    /**
     * Nutrition information about the recipe or menu item.
     *
     * @return {@link NutritionInformation}
     */
    NutritionInformation getNutrition();

    /**
     * Nutrition information about the recipe or menu item.
     *
     * @param nutrition NutritionInformation value to set.
     */
    void setNutrition(NutritionInformation nutrition);

    /**
     * The method of cooking, such as Frying, Steaming, ...
     *
     * @return {@link Text}
     */
    Text getCookingMethod();

    /**
     * The method of cooking, such as Frying, Steaming, ...
     *
     * @param cookingMethod Text value to set.
     */
    void setCookingMethod(Text cookingMethod);

    /**
     * A single ingredient used in the recipe, e.g. sugar, flour or garlic.
     *
     * @return {@link Text}
     */
    Text getRecipeIngredient();

    /**
     * A single ingredient used in the recipe, e.g. sugar, flour or garlic.
     *
     * @param recipeIngredient Text value to set.
     */
    void setRecipeIngredient(Text recipeIngredient);

    /**
     * The quantity produced by the recipe (for example, number of people served, number of servings, etc).
     *
     * @return {@link Text} or {@link QuantitativeValue}
     */
    <T> T getRecipeYield();

    /**
     * The quantity produced by the recipe (for example, number of people served, number of servings, etc).
     *
     * @param recipeYield Text value to set.
     */
    void setRecipeYield(Text recipeYield);
    /**
     * The quantity produced by the recipe (for example, number of people served, number of servings, etc).
     *
     * @param recipeYield QuantitativeValue value to set.
     */
    void setRecipeYield(QuantitativeValue recipeYield);

    /**
     * The time it takes to actually cook the dish, in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
     *
     * @return {@link Duration}
     */
    Duration getCookTime();

    /**
     * The time it takes to actually cook the dish, in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
     *
     * @param cookTime Duration value to set.
     */
    void setCookTime(Duration cookTime);

    /**
     * The category of the recipe—for example, appetizer, entree, etc.
     *
     * @return {@link Text}
     */
    Text getRecipeCategory();

    /**
     * The category of the recipe—for example, appetizer, entree, etc.
     *
     * @param recipeCategory Text value to set.
     */
    void setRecipeCategory(Text recipeCategory);
}
