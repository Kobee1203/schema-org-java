/*
 * This class is auto generated by the schema.org code generator program.
 * https://github.com/Kobee1203/schema-org-java
 * Do not edit the class manually.
 */
package org.schema.model.impl;

import org.schema.model.TypeAndQuantityNode;
import org.schema.model.Product;
import org.schema.model.AdultOrientedEnumeration;
import org.schema.model.datatype.Text;
import org.schema.model.datatype.URL;
import org.schema.model.Review;
import org.schema.model.QuantitativeValue;
import org.schema.model.Distance;
import org.schema.model.Country;
import org.schema.model.DefinedTerm;
import org.schema.model.PhysicalActivityCategory;
import org.schema.model.Thing;
import org.schema.model.CategoryCode;
import org.schema.model.Grant;
import org.schema.model.datatype.Date;
import org.schema.model.EnergyConsumptionDetails;
import org.schema.model.Audience;
import org.schema.model.Offer;
import org.schema.model.Demand;
import org.schema.model.OfferItemCondition;
import org.schema.model.AggregateRating;
import org.schema.model.Service;
import org.schema.model.ProductModel;
import org.schema.model.ProductGroup;
import org.schema.model.Organization;
import org.schema.model.Brand;
import org.schema.model.ImageObject;
import org.schema.model.MerchantReturnPolicy;
import org.schema.model.SizeSpecification;
import org.schema.model.PropertyValue;
import org.schema.model.datatype.Boolean;
import org.schema.model.CreativeWork;
import org.schema.model.Action;
import org.schema.model.Event;
import com.weedow.schemaorg.commons.model.JsonLdTypeName;
import com.weedow.schemaorg.commons.model.JsonLdFieldTypes;
import java.util.List;
import org.schema.model.datatype.Integer;
import org.schema.model.datatype.DateTime;
import org.schema.model.Person;
import org.schema.model.Place;
import org.schema.model.MediaObject;
import org.schema.model.Comment;
import org.schema.model.PublicationEvent;
import org.schema.model.Duration;
import org.schema.model.InteractionCounter;
import org.schema.model.datatype.Number;
import org.schema.model.AlignmentObject;
import org.schema.model.CorrectionComment;
import org.schema.model.Rating;
import org.schema.model.Language;
import org.schema.model.Claim;
import org.schema.model.WebPage;
import org.schema.model.AudioObject;
import org.schema.model.MusicRecording;
import org.schema.model.Clip;
import org.schema.model.ItemList;
import org.schema.model.VideoObject;
import org.schema.model.Collection;
import org.schema.model.ProductCollection;

/**
 * A set of products (either [[ProductGroup]]s or specific variants) that are listed together e.g. in an [[Offer]].
 *
 * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
 * @see <a href="https://github.com/schemaorg/schemaorg/issues/2597">https://github.com/schemaorg/schemaorg/issues/2597</a>
 * @see <a href="https://schema.org/ProductCollection">https://schema.org/ProductCollection</a>
 */
@JsonLdTypeName("ProductCollection")
public class ProductCollectionImpl extends com.weedow.schemaorg.commons.model.JsonLdNodeImpl implements ProductCollection {

    private List<TypeAndQuantityNode> includesObject;

    /**
     * This links to a node or nodes indicating the exact quantity of the products included in  an [[Offer]] or [[ProductCollection]].
     *
     * @return {@link TypeAndQuantityNode}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public List<TypeAndQuantityNode> getIncludesObjectList() {
        return includesObject;
    }

    /**
     * This links to a node or nodes indicating the exact quantity of the products included in  an [[Offer]] or [[ProductCollection]].
     *
     * @return {@link TypeAndQuantityNode}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public TypeAndQuantityNode getIncludesObject() {
        return getFirst(includesObject);
    }

    /**
     * This links to a node or nodes indicating the exact quantity of the products included in  an [[Offer]] or [[ProductCollection]].
     *
     * @param includesObject TypeAndQuantityNode value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public void addIncludesObject(TypeAndQuantityNode includesObject) {
        this.includesObject = add(this.includesObject, includesObject);
    }

    private List<Product> isAccessoryOrSparePartFor;

    /**
     * A pointer to another product (or multiple products) for which this product is an accessory or spare part.
     *
     * @return {@link Product}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public List<Product> getIsAccessoryOrSparePartForList() {
        return isAccessoryOrSparePartFor;
    }

    /**
     * A pointer to another product (or multiple products) for which this product is an accessory or spare part.
     *
     * @return {@link Product}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public Product getIsAccessoryOrSparePartFor() {
        return getFirst(isAccessoryOrSparePartFor);
    }

    /**
     * A pointer to another product (or multiple products) for which this product is an accessory or spare part.
     *
     * @param isAccessoryOrSparePartFor Product value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public void addIsAccessoryOrSparePartFor(Product isAccessoryOrSparePartFor) {
        this.isAccessoryOrSparePartFor = add(this.isAccessoryOrSparePartFor, isAccessoryOrSparePartFor);
    }

    private List<AdultOrientedEnumeration> hasAdultConsideration;

    /**
     * Used to tag an item to be intended or suitable for consumption or use by adults only.
     *
     * @return {@link AdultOrientedEnumeration}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2989">https://github.com/schemaorg/schemaorg/issues/2989</a>
     */
    @Override
    public List<AdultOrientedEnumeration> getHasAdultConsiderationList() {
        return hasAdultConsideration;
    }

    /**
     * Used to tag an item to be intended or suitable for consumption or use by adults only.
     *
     * @return {@link AdultOrientedEnumeration}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2989">https://github.com/schemaorg/schemaorg/issues/2989</a>
     */
    @Override
    public AdultOrientedEnumeration getHasAdultConsideration() {
        return getFirst(hasAdultConsideration);
    }

    /**
     * Used to tag an item to be intended or suitable for consumption or use by adults only.
     *
     * @param hasAdultConsideration AdultOrientedEnumeration value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2989">https://github.com/schemaorg/schemaorg/issues/2989</a>
     */
    @Override
    public void addHasAdultConsideration(AdultOrientedEnumeration hasAdultConsideration) {
        this.hasAdultConsideration = add(this.hasAdultConsideration, hasAdultConsideration);
    }

    private List<Text> gtin12;

    /**
     * The GTIN-12 code of the product, or the product to which the offer refers. The GTIN-12 is the 12-digit GS1 Identification Key composed of a U.P.C. Company Prefix, Item Reference, and Check Digit used to identify trade items. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
     *
     * @return {@link Text}
     */
    @Override
    public List<Text> getGtin12List() {
        return gtin12;
    }

    /**
     * The GTIN-12 code of the product, or the product to which the offer refers. The GTIN-12 is the 12-digit GS1 Identification Key composed of a U.P.C. Company Prefix, Item Reference, and Check Digit used to identify trade items. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
     *
     * @return {@link Text}
     */
    @Override
    public Text getGtin12() {
        return getFirst(gtin12);
    }

    /**
     * The GTIN-12 code of the product, or the product to which the offer refers. The GTIN-12 is the 12-digit GS1 Identification Key composed of a U.P.C. Company Prefix, Item Reference, and Check Digit used to identify trade items. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
     *
     * @param gtin12 Text value to set.
     */
    @Override
    public void addGtin12(Text gtin12) {
        this.gtin12 = add(this.gtin12, gtin12);
    }

    private List<Text> nsn;

    /**
     * Indicates the [NATO stock number](https://en.wikipedia.org/wiki/NATO_Stock_Number) (nsn) of a [[Product]]. 
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2126">https://github.com/schemaorg/schemaorg/issues/2126</a>
     */
    @Override
    public List<Text> getNsnList() {
        return nsn;
    }

    /**
     * Indicates the [NATO stock number](https://en.wikipedia.org/wiki/NATO_Stock_Number) (nsn) of a [[Product]]. 
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2126">https://github.com/schemaorg/schemaorg/issues/2126</a>
     */
    @Override
    public Text getNsn() {
        return getFirst(nsn);
    }

    /**
     * Indicates the [NATO stock number](https://en.wikipedia.org/wiki/NATO_Stock_Number) (nsn) of a [[Product]]. 
     *
     * @param nsn Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2126">https://github.com/schemaorg/schemaorg/issues/2126</a>
     */
    @Override
    public void addNsn(Text nsn) {
        this.nsn = add(this.nsn, nsn);
    }

    @JsonLdFieldTypes({ Text.class, URL.class, Product.class })
    private List<Object> material;

    /**
     * A material that something is made from, e.g. leather, wool, cotton, paper.
     *
     * @return {@link Text} or {@link URL} or {@link Product}
     */
    @Override
    public <T> List<T> getMaterialList() {
        return (List<T>) material;
    }

    /**
     * A material that something is made from, e.g. leather, wool, cotton, paper.
     *
     * @return {@link Text} or {@link URL} or {@link Product}
     */
    @Override
    public <T> T getMaterial() {
        return (T) getFirst(material);
    }

    /**
     * A material that something is made from, e.g. leather, wool, cotton, paper.
     *
     * @param material Text value to set.
     */
    @Override
    public void addMaterial(Text material) {
        this.material = add(this.material, material);
    }
    /**
     * A material that something is made from, e.g. leather, wool, cotton, paper.
     *
     * @param material URL value to set.
     */
    @Override
    public void addMaterial(URL material) {
        this.material = add(this.material, material);
    }
    /**
     * A material that something is made from, e.g. leather, wool, cotton, paper.
     *
     * @param material Product value to set.
     */
    @Override
    public void addMaterial(Product material) {
        this.material = add(this.material, material);
    }

    private List<Review> review;

    /**
     * A review of the item.
     *
     * @return {@link Review}
     */
    @Override
    public List<Review> getReviewList() {
        return review;
    }

    /**
     * A review of the item.
     *
     * @return {@link Review}
     */
    @Override
    public Review getReview() {
        return getFirst(review);
    }

    /**
     * A review of the item.
     *
     * @param review Review value to set.
     */
    @Override
    public void addReview(Review review) {
        this.review = add(this.review, review);
    }

    private List<Text> award;

    /**
     * An award won by or for this item.
     *
     * @return {@link Text}
     */
    @Override
    public List<Text> getAwardList() {
        return award;
    }

    /**
     * An award won by or for this item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getAward() {
        return getFirst(award);
    }

    /**
     * An award won by or for this item.
     *
     * @param award Text value to set.
     */
    @Override
    public void addAward(Text award) {
        this.award = add(this.award, award);
    }

    @JsonLdFieldTypes({ QuantitativeValue.class, Distance.class })
    private List<Object> width;

    /**
     * The width of the item.
     *
     * @return {@link QuantitativeValue} or {@link Distance}
     */
    @Override
    public <T> List<T> getWidthList() {
        return (List<T>) width;
    }

    /**
     * The width of the item.
     *
     * @return {@link QuantitativeValue} or {@link Distance}
     */
    @Override
    public <T> T getWidth() {
        return (T) getFirst(width);
    }

    /**
     * The width of the item.
     *
     * @param width QuantitativeValue value to set.
     */
    @Override
    public void addWidth(QuantitativeValue width) {
        this.width = add(this.width, width);
    }
    /**
     * The width of the item.
     *
     * @param width Distance value to set.
     */
    @Override
    public void addWidth(Distance width) {
        this.width = add(this.width, width);
    }

    private List<Country> countryOfOrigin;

    /**
     * The country of origin of something, including products as well as creative  works such as movie and TV content.
     * 
     * In the case of TV and movie, this would be the country of the principle offices of the production company or individual responsible for the movie. For other kinds of [[CreativeWork]] it is difficult to provide fully general guidance, and properties such as [[contentLocation]] and [[locationCreated]] may be more applicable.
     * 
     * In the case of products, the country of origin of the product. The exact interpretation of this may vary by context and product type, and cannot be fully enumerated here.
     *
     * @return {@link Country}
     */
    @Override
    public List<Country> getCountryOfOriginList() {
        return countryOfOrigin;
    }

    /**
     * The country of origin of something, including products as well as creative  works such as movie and TV content.
     * 
     * In the case of TV and movie, this would be the country of the principle offices of the production company or individual responsible for the movie. For other kinds of [[CreativeWork]] it is difficult to provide fully general guidance, and properties such as [[contentLocation]] and [[locationCreated]] may be more applicable.
     * 
     * In the case of products, the country of origin of the product. The exact interpretation of this may vary by context and product type, and cannot be fully enumerated here.
     *
     * @return {@link Country}
     */
    @Override
    public Country getCountryOfOrigin() {
        return getFirst(countryOfOrigin);
    }

    /**
     * The country of origin of something, including products as well as creative  works such as movie and TV content.
     * 
     * In the case of TV and movie, this would be the country of the principle offices of the production company or individual responsible for the movie. For other kinds of [[CreativeWork]] it is difficult to provide fully general guidance, and properties such as [[contentLocation]] and [[locationCreated]] may be more applicable.
     * 
     * In the case of products, the country of origin of the product. The exact interpretation of this may vary by context and product type, and cannot be fully enumerated here.
     *
     * @param countryOfOrigin Country value to set.
     */
    @Override
    public void addCountryOfOrigin(Country countryOfOrigin) {
        this.countryOfOrigin = add(this.countryOfOrigin, countryOfOrigin);
    }

    @JsonLdFieldTypes({ DefinedTerm.class, Text.class })
    private List<Object> pattern;

    /**
     * A pattern that something has, for example 'polka dot', 'striped', 'Canadian flag'. Values are typically expressed as text, although links to controlled value schemes are also supported.
     *
     * @return {@link DefinedTerm} or {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1797">https://github.com/schemaorg/schemaorg/issues/1797</a>
     */
    @Override
    public <T> List<T> getPatternList() {
        return (List<T>) pattern;
    }

    /**
     * A pattern that something has, for example 'polka dot', 'striped', 'Canadian flag'. Values are typically expressed as text, although links to controlled value schemes are also supported.
     *
     * @return {@link DefinedTerm} or {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1797">https://github.com/schemaorg/schemaorg/issues/1797</a>
     */
    @Override
    public <T> T getPattern() {
        return (T) getFirst(pattern);
    }

    /**
     * A pattern that something has, for example 'polka dot', 'striped', 'Canadian flag'. Values are typically expressed as text, although links to controlled value schemes are also supported.
     *
     * @param pattern DefinedTerm value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1797">https://github.com/schemaorg/schemaorg/issues/1797</a>
     */
    @Override
    public void addPattern(DefinedTerm pattern) {
        this.pattern = add(this.pattern, pattern);
    }
    /**
     * A pattern that something has, for example 'polka dot', 'striped', 'Canadian flag'. Values are typically expressed as text, although links to controlled value schemes are also supported.
     *
     * @param pattern Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1797">https://github.com/schemaorg/schemaorg/issues/1797</a>
     */
    @Override
    public void addPattern(Text pattern) {
        this.pattern = add(this.pattern, pattern);
    }

    @JsonLdFieldTypes({ URL.class, Text.class, PhysicalActivityCategory.class, Thing.class, CategoryCode.class })
    private List<Object> category;

    /**
     * A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
     *
     * @return {@link URL} or {@link Text} or {@link PhysicalActivityCategory} or {@link Thing} or {@link CategoryCode}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1741">https://github.com/schemaorg/schemaorg/issues/1741</a>
     */
    @Override
    public <T> List<T> getCategoryList() {
        return (List<T>) category;
    }

    /**
     * A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
     *
     * @return {@link URL} or {@link Text} or {@link PhysicalActivityCategory} or {@link Thing} or {@link CategoryCode}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1741">https://github.com/schemaorg/schemaorg/issues/1741</a>
     */
    @Override
    public <T> T getCategory() {
        return (T) getFirst(category);
    }

    /**
     * A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
     *
     * @param category URL value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1741">https://github.com/schemaorg/schemaorg/issues/1741</a>
     */
    @Override
    public void addCategory(URL category) {
        this.category = add(this.category, category);
    }
    /**
     * A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
     *
     * @param category Text value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1741">https://github.com/schemaorg/schemaorg/issues/1741</a>
     */
    @Override
    public void addCategory(Text category) {
        this.category = add(this.category, category);
    }
    /**
     * A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
     *
     * @param category PhysicalActivityCategory value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1741">https://github.com/schemaorg/schemaorg/issues/1741</a>
     */
    @Override
    public void addCategory(PhysicalActivityCategory category) {
        this.category = add(this.category, category);
    }
    /**
     * A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
     *
     * @param category Thing value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1741">https://github.com/schemaorg/schemaorg/issues/1741</a>
     */
    @Override
    public void addCategory(Thing category) {
        this.category = add(this.category, category);
    }
    /**
     * A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
     *
     * @param category CategoryCode value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2490">https://github.com/schemaorg/schemaorg/issues/2490</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1741">https://github.com/schemaorg/schemaorg/issues/1741</a>
     */
    @Override
    public void addCategory(CategoryCode category) {
        this.category = add(this.category, category);
    }

    private List<Grant> funding;

    /**
     * A [[Grant]] that directly or indirectly provide funding or sponsorship for this item. See also [[ownershipFundingInfo]].
     *
     * @return {@link Grant}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/383">https://github.com/schemaorg/schemaorg/issues/383</a>
     * @see <a href="https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP">https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP</a>
     */
    @Override
    public List<Grant> getFundingList() {
        return funding;
    }

    /**
     * A [[Grant]] that directly or indirectly provide funding or sponsorship for this item. See also [[ownershipFundingInfo]].
     *
     * @return {@link Grant}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/383">https://github.com/schemaorg/schemaorg/issues/383</a>
     * @see <a href="https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP">https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP</a>
     */
    @Override
    public Grant getFunding() {
        return getFirst(funding);
    }

    /**
     * A [[Grant]] that directly or indirectly provide funding or sponsorship for this item. See also [[ownershipFundingInfo]].
     *
     * @param funding Grant value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/383">https://github.com/schemaorg/schemaorg/issues/383</a>
     * @see <a href="https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP">https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP</a>
     */
    @Override
    public void addFunding(Grant funding) {
        this.funding = add(this.funding, funding);
    }

    private List<Text> mpn;

    /**
     * The Manufacturer Part Number (MPN) of the product, or the product to which the offer refers.
     *
     * @return {@link Text}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public List<Text> getMpnList() {
        return mpn;
    }

    /**
     * The Manufacturer Part Number (MPN) of the product, or the product to which the offer refers.
     *
     * @return {@link Text}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public Text getMpn() {
        return getFirst(mpn);
    }

    /**
     * The Manufacturer Part Number (MPN) of the product, or the product to which the offer refers.
     *
     * @param mpn Text value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public void addMpn(Text mpn) {
        this.mpn = add(this.mpn, mpn);
    }

    @JsonLdFieldTypes({ Distance.class, QuantitativeValue.class })
    private List<Object> height;

    /**
     * The height of the item.
     *
     * @return {@link Distance} or {@link QuantitativeValue}
     */
    @Override
    public <T> List<T> getHeightList() {
        return (List<T>) height;
    }

    /**
     * The height of the item.
     *
     * @return {@link Distance} or {@link QuantitativeValue}
     */
    @Override
    public <T> T getHeight() {
        return (T) getFirst(height);
    }

    /**
     * The height of the item.
     *
     * @param height Distance value to set.
     */
    @Override
    public void addHeight(Distance height) {
        this.height = add(this.height, height);
    }
    /**
     * The height of the item.
     *
     * @param height QuantitativeValue value to set.
     */
    @Override
    public void addHeight(QuantitativeValue height) {
        this.height = add(this.height, height);
    }

    @JsonLdFieldTypes({ DefinedTerm.class, Text.class, URL.class })
    private List<Object> keywords;

    /**
     * Keywords or tags used to describe some item. Multiple textual entries in a keywords list are typically delimited by commas, or by repeating the property.
     *
     * @return {@link DefinedTerm} or {@link Text} or {@link URL}
     */
    @Override
    public <T> List<T> getKeywordsList() {
        return (List<T>) keywords;
    }

    /**
     * Keywords or tags used to describe some item. Multiple textual entries in a keywords list are typically delimited by commas, or by repeating the property.
     *
     * @return {@link DefinedTerm} or {@link Text} or {@link URL}
     */
    @Override
    public <T> T getKeywords() {
        return (T) getFirst(keywords);
    }

    /**
     * Keywords or tags used to describe some item. Multiple textual entries in a keywords list are typically delimited by commas, or by repeating the property.
     *
     * @param keywords DefinedTerm value to set.
     */
    @Override
    public void addKeywords(DefinedTerm keywords) {
        this.keywords = add(this.keywords, keywords);
    }
    /**
     * Keywords or tags used to describe some item. Multiple textual entries in a keywords list are typically delimited by commas, or by repeating the property.
     *
     * @param keywords Text value to set.
     */
    @Override
    public void addKeywords(Text keywords) {
        this.keywords = add(this.keywords, keywords);
    }
    /**
     * Keywords or tags used to describe some item. Multiple textual entries in a keywords list are typically delimited by commas, or by repeating the property.
     *
     * @param keywords URL value to set.
     */
    @Override
    public void addKeywords(URL keywords) {
        this.keywords = add(this.keywords, keywords);
    }

    private List<Date> purchaseDate;

    /**
     * The date the item e.g. vehicle was purchased by the current owner.
     *
     * @return {@link Date}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group</a>
     */
    @Override
    public List<Date> getPurchaseDateList() {
        return purchaseDate;
    }

    /**
     * The date the item e.g. vehicle was purchased by the current owner.
     *
     * @return {@link Date}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group</a>
     */
    @Override
    public Date getPurchaseDate() {
        return getFirst(purchaseDate);
    }

    /**
     * The date the item e.g. vehicle was purchased by the current owner.
     *
     * @param purchaseDate Date value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group</a>
     */
    @Override
    public void addPurchaseDate(Date purchaseDate) {
        this.purchaseDate = add(this.purchaseDate, purchaseDate);
    }

    private List<EnergyConsumptionDetails> hasEnergyConsumptionDetails;

    /**
     * Defines the energy efficiency Category (also known as "class" or "rating") for a product according to an international energy efficiency standard.
     *
     * @return {@link EnergyConsumptionDetails}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2670">https://github.com/schemaorg/schemaorg/issues/2670</a>
     */
    @Override
    public List<EnergyConsumptionDetails> getHasEnergyConsumptionDetailsList() {
        return hasEnergyConsumptionDetails;
    }

    /**
     * Defines the energy efficiency Category (also known as "class" or "rating") for a product according to an international energy efficiency standard.
     *
     * @return {@link EnergyConsumptionDetails}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2670">https://github.com/schemaorg/schemaorg/issues/2670</a>
     */
    @Override
    public EnergyConsumptionDetails getHasEnergyConsumptionDetails() {
        return getFirst(hasEnergyConsumptionDetails);
    }

    /**
     * Defines the energy efficiency Category (also known as "class" or "rating") for a product according to an international energy efficiency standard.
     *
     * @param hasEnergyConsumptionDetails EnergyConsumptionDetails value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2670">https://github.com/schemaorg/schemaorg/issues/2670</a>
     */
    @Override
    public void addHasEnergyConsumptionDetails(EnergyConsumptionDetails hasEnergyConsumptionDetails) {
        this.hasEnergyConsumptionDetails = add(this.hasEnergyConsumptionDetails, hasEnergyConsumptionDetails);
    }

    private List<Audience> audience;

    /**
     * An intended audience, i.e. a group for whom something was created.
     *
     * @return {@link Audience}
     */
    @Override
    public List<Audience> getAudienceList() {
        return audience;
    }

    /**
     * An intended audience, i.e. a group for whom something was created.
     *
     * @return {@link Audience}
     */
    @Override
    public Audience getAudience() {
        return getFirst(audience);
    }

    /**
     * An intended audience, i.e. a group for whom something was created.
     *
     * @param audience Audience value to set.
     */
    @Override
    public void addAudience(Audience audience) {
        this.audience = add(this.audience, audience);
    }

    @JsonLdFieldTypes({ Offer.class, Demand.class })
    private List<Object> offers;

    /**
     * An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.
     *       
     *
     * @return {@link Offer} or {@link Demand}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     */
    @Override
    public <T> List<T> getOffersList() {
        return (List<T>) offers;
    }

    /**
     * An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.
     *       
     *
     * @return {@link Offer} or {@link Demand}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     */
    @Override
    public <T> T getOffers() {
        return (T) getFirst(offers);
    }

    /**
     * An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.
     *       
     *
     * @param offers Offer value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     */
    @Override
    public void addOffers(Offer offers) {
        this.offers = add(this.offers, offers);
    }
    /**
     * An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.
     *       
     *
     * @param offers Demand value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     */
    @Override
    public void addOffers(Demand offers) {
        this.offers = add(this.offers, offers);
    }

    private List<Date> productionDate;

    /**
     * The date of production of the item, e.g. vehicle.
     *
     * @return {@link Date}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group</a>
     */
    @Override
    public List<Date> getProductionDateList() {
        return productionDate;
    }

    /**
     * The date of production of the item, e.g. vehicle.
     *
     * @return {@link Date}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group</a>
     */
    @Override
    public Date getProductionDate() {
        return getFirst(productionDate);
    }

    /**
     * The date of production of the item, e.g. vehicle.
     *
     * @param productionDate Date value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group</a>
     */
    @Override
    public void addProductionDate(Date productionDate) {
        this.productionDate = add(this.productionDate, productionDate);
    }

    private List<OfferItemCondition> itemCondition;

    /**
     * A predefined value from OfferItemCondition specifying the condition of the product or service, or the products or services included in the offer. Also used for product return policies to specify the condition of products accepted for returns.
     *
     * @return {@link OfferItemCondition}
     */
    @Override
    public List<OfferItemCondition> getItemConditionList() {
        return itemCondition;
    }

    /**
     * A predefined value from OfferItemCondition specifying the condition of the product or service, or the products or services included in the offer. Also used for product return policies to specify the condition of products accepted for returns.
     *
     * @return {@link OfferItemCondition}
     */
    @Override
    public OfferItemCondition getItemCondition() {
        return getFirst(itemCondition);
    }

    /**
     * A predefined value from OfferItemCondition specifying the condition of the product or service, or the products or services included in the offer. Also used for product return policies to specify the condition of products accepted for returns.
     *
     * @param itemCondition OfferItemCondition value to set.
     */
    @Override
    public void addItemCondition(OfferItemCondition itemCondition) {
        this.itemCondition = add(this.itemCondition, itemCondition);
    }

    private List<Text> awards;

    /**
     * Awards won by or for this item.
     *
     * @return {@link Text}
     */
    @Override
    public List<Text> getAwardsList() {
        return awards;
    }

    /**
     * Awards won by or for this item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getAwards() {
        return getFirst(awards);
    }

    /**
     * Awards won by or for this item.
     *
     * @param awards Text value to set.
     */
    @Override
    public void addAwards(Text awards) {
        this.awards = add(this.awards, awards);
    }

    private List<Text> gtin;

    /**
     * A Global Trade Item Number ([GTIN](https://www.gs1.org/standards/id-keys/gtin)). GTINs identify trade items, including products and services, using numeric identification codes. The [[gtin]] property generalizes the earlier [[gtin8]], [[gtin12]], [[gtin13]], and [[gtin14]] properties. The GS1 [digital link specifications](https://www.gs1.org/standards/Digital-Link/) express GTINs as URLs. A correct [[gtin]] value should be a valid GTIN, which means that it should be an all-numeric string of either 8, 12, 13 or 14 digits, or a "GS1 Digital Link" URL based on such a string. The numeric component should also have a [valid GS1 check digit](https://www.gs1.org/services/check-digit-calculator) and meet the other rules for valid GTINs. See also [GS1's GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) and [Wikipedia](https://en.wikipedia.org/wiki/Global_Trade_Item_Number) for more details. Left-padding of the gtin values is not required or encouraged.
     *    
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2288">https://github.com/schemaorg/schemaorg/issues/2288</a>
     */
    @Override
    public List<Text> getGtinList() {
        return gtin;
    }

    /**
     * A Global Trade Item Number ([GTIN](https://www.gs1.org/standards/id-keys/gtin)). GTINs identify trade items, including products and services, using numeric identification codes. The [[gtin]] property generalizes the earlier [[gtin8]], [[gtin12]], [[gtin13]], and [[gtin14]] properties. The GS1 [digital link specifications](https://www.gs1.org/standards/Digital-Link/) express GTINs as URLs. A correct [[gtin]] value should be a valid GTIN, which means that it should be an all-numeric string of either 8, 12, 13 or 14 digits, or a "GS1 Digital Link" URL based on such a string. The numeric component should also have a [valid GS1 check digit](https://www.gs1.org/services/check-digit-calculator) and meet the other rules for valid GTINs. See also [GS1's GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) and [Wikipedia](https://en.wikipedia.org/wiki/Global_Trade_Item_Number) for more details. Left-padding of the gtin values is not required or encouraged.
     *    
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2288">https://github.com/schemaorg/schemaorg/issues/2288</a>
     */
    @Override
    public Text getGtin() {
        return getFirst(gtin);
    }

    /**
     * A Global Trade Item Number ([GTIN](https://www.gs1.org/standards/id-keys/gtin)). GTINs identify trade items, including products and services, using numeric identification codes. The [[gtin]] property generalizes the earlier [[gtin8]], [[gtin12]], [[gtin13]], and [[gtin14]] properties. The GS1 [digital link specifications](https://www.gs1.org/standards/Digital-Link/) express GTINs as URLs. A correct [[gtin]] value should be a valid GTIN, which means that it should be an all-numeric string of either 8, 12, 13 or 14 digits, or a "GS1 Digital Link" URL based on such a string. The numeric component should also have a [valid GS1 check digit](https://www.gs1.org/services/check-digit-calculator) and meet the other rules for valid GTINs. See also [GS1's GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) and [Wikipedia](https://en.wikipedia.org/wiki/Global_Trade_Item_Number) for more details. Left-padding of the gtin values is not required or encouraged.
     *    
     *
     * @param gtin Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2288">https://github.com/schemaorg/schemaorg/issues/2288</a>
     */
    @Override
    public void addGtin(Text gtin) {
        this.gtin = add(this.gtin, gtin);
    }

    private List<Text> productID;

    /**
     * The product identifier, such as ISBN. For example: ``` meta itemprop="productID" content="isbn:123-456-789" ```.
     *
     * @return {@link Text}
     */
    @Override
    public List<Text> getProductIDList() {
        return productID;
    }

    /**
     * The product identifier, such as ISBN. For example: ``` meta itemprop="productID" content="isbn:123-456-789" ```.
     *
     * @return {@link Text}
     */
    @Override
    public Text getProductID() {
        return getFirst(productID);
    }

    /**
     * The product identifier, such as ISBN. For example: ``` meta itemprop="productID" content="isbn:123-456-789" ```.
     *
     * @param productID Text value to set.
     */
    @Override
    public void addProductID(Text productID) {
        this.productID = add(this.productID, productID);
    }

    private List<Text> countryOfAssembly;

    /**
     * The place where the product was assembled.
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/991">https://github.com/schemaorg/schemaorg/issues/991</a>
     */
    @Override
    public List<Text> getCountryOfAssemblyList() {
        return countryOfAssembly;
    }

    /**
     * The place where the product was assembled.
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/991">https://github.com/schemaorg/schemaorg/issues/991</a>
     */
    @Override
    public Text getCountryOfAssembly() {
        return getFirst(countryOfAssembly);
    }

    /**
     * The place where the product was assembled.
     *
     * @param countryOfAssembly Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/991">https://github.com/schemaorg/schemaorg/issues/991</a>
     */
    @Override
    public void addCountryOfAssembly(Text countryOfAssembly) {
        this.countryOfAssembly = add(this.countryOfAssembly, countryOfAssembly);
    }

    private List<Text> color;

    /**
     * The color of the product.
     *
     * @return {@link Text}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public List<Text> getColorList() {
        return color;
    }

    /**
     * The color of the product.
     *
     * @return {@link Text}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public Text getColor() {
        return getFirst(color);
    }

    /**
     * The color of the product.
     *
     * @param color Text value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public void addColor(Text color) {
        this.color = add(this.color, color);
    }

    private List<AggregateRating> aggregateRating;

    /**
     * The overall rating, based on a collection of reviews or ratings, of the item.
     *
     * @return {@link AggregateRating}
     */
    @Override
    public List<AggregateRating> getAggregateRatingList() {
        return aggregateRating;
    }

    /**
     * The overall rating, based on a collection of reviews or ratings, of the item.
     *
     * @return {@link AggregateRating}
     */
    @Override
    public AggregateRating getAggregateRating() {
        return getFirst(aggregateRating);
    }

    /**
     * The overall rating, based on a collection of reviews or ratings, of the item.
     *
     * @param aggregateRating AggregateRating value to set.
     */
    @Override
    public void addAggregateRating(AggregateRating aggregateRating) {
        this.aggregateRating = add(this.aggregateRating, aggregateRating);
    }

    @JsonLdFieldTypes({ Service.class, Product.class })
    private List<Object> isSimilarTo;

    /**
     * A pointer to another, functionally similar product (or multiple products).
     *
     * @return {@link Service} or {@link Product}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public <T> List<T> getIsSimilarToList() {
        return (List<T>) isSimilarTo;
    }

    /**
     * A pointer to another, functionally similar product (or multiple products).
     *
     * @return {@link Service} or {@link Product}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public <T> T getIsSimilarTo() {
        return (T) getFirst(isSimilarTo);
    }

    /**
     * A pointer to another, functionally similar product (or multiple products).
     *
     * @param isSimilarTo Service value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public void addIsSimilarTo(Service isSimilarTo) {
        this.isSimilarTo = add(this.isSimilarTo, isSimilarTo);
    }
    /**
     * A pointer to another, functionally similar product (or multiple products).
     *
     * @param isSimilarTo Product value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public void addIsSimilarTo(Product isSimilarTo) {
        this.isSimilarTo = add(this.isSimilarTo, isSimilarTo);
    }

    @JsonLdFieldTypes({ Distance.class, QuantitativeValue.class })
    private List<Object> depth;

    /**
     * The depth of the item.
     *
     * @return {@link Distance} or {@link QuantitativeValue}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public <T> List<T> getDepthList() {
        return (List<T>) depth;
    }

    /**
     * The depth of the item.
     *
     * @return {@link Distance} or {@link QuantitativeValue}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public <T> T getDepth() {
        return (T) getFirst(depth);
    }

    /**
     * The depth of the item.
     *
     * @param depth Distance value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public void addDepth(Distance depth) {
        this.depth = add(this.depth, depth);
    }
    /**
     * The depth of the item.
     *
     * @param depth QuantitativeValue value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public void addDepth(QuantitativeValue depth) {
        this.depth = add(this.depth, depth);
    }

    private List<Text> countryOfLastProcessing;

    /**
     * The place where the item (typically [[Product]]) was last processed and tested before importation.
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/991">https://github.com/schemaorg/schemaorg/issues/991</a>
     */
    @Override
    public List<Text> getCountryOfLastProcessingList() {
        return countryOfLastProcessing;
    }

    /**
     * The place where the item (typically [[Product]]) was last processed and tested before importation.
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/991">https://github.com/schemaorg/schemaorg/issues/991</a>
     */
    @Override
    public Text getCountryOfLastProcessing() {
        return getFirst(countryOfLastProcessing);
    }

    /**
     * The place where the item (typically [[Product]]) was last processed and tested before importation.
     *
     * @param countryOfLastProcessing Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/991">https://github.com/schemaorg/schemaorg/issues/991</a>
     */
    @Override
    public void addCountryOfLastProcessing(Text countryOfLastProcessing) {
        this.countryOfLastProcessing = add(this.countryOfLastProcessing, countryOfLastProcessing);
    }

    @JsonLdFieldTypes({ ProductModel.class, ProductGroup.class })
    private List<Object> isVariantOf;

    /**
     * Indicates the kind of product that this is a variant of. In the case of [[ProductModel]], this is a pointer (from a ProductModel) to a base product from which this product is a variant. It is safe to infer that the variant inherits all product features from the base model, unless defined locally. This is not transitive. In the case of a [[ProductGroup]], the group description also serves as a template, representing a set of Products that vary on explicitly defined, specific dimensions only (so it defines both a set of variants, as well as which values distinguish amongst those variants). When used with [[ProductGroup]], this property can apply to any [[Product]] included in the group.
     *
     * @return {@link ProductModel} or {@link ProductGroup}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public <T> List<T> getIsVariantOfList() {
        return (List<T>) isVariantOf;
    }

    /**
     * Indicates the kind of product that this is a variant of. In the case of [[ProductModel]], this is a pointer (from a ProductModel) to a base product from which this product is a variant. It is safe to infer that the variant inherits all product features from the base model, unless defined locally. This is not transitive. In the case of a [[ProductGroup]], the group description also serves as a template, representing a set of Products that vary on explicitly defined, specific dimensions only (so it defines both a set of variants, as well as which values distinguish amongst those variants). When used with [[ProductGroup]], this property can apply to any [[Product]] included in the group.
     *
     * @return {@link ProductModel} or {@link ProductGroup}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public <T> T getIsVariantOf() {
        return (T) getFirst(isVariantOf);
    }

    /**
     * Indicates the kind of product that this is a variant of. In the case of [[ProductModel]], this is a pointer (from a ProductModel) to a base product from which this product is a variant. It is safe to infer that the variant inherits all product features from the base model, unless defined locally. This is not transitive. In the case of a [[ProductGroup]], the group description also serves as a template, representing a set of Products that vary on explicitly defined, specific dimensions only (so it defines both a set of variants, as well as which values distinguish amongst those variants). When used with [[ProductGroup]], this property can apply to any [[Product]] included in the group.
     *
     * @param isVariantOf ProductModel value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public void addIsVariantOf(ProductModel isVariantOf) {
        this.isVariantOf = add(this.isVariantOf, isVariantOf);
    }
    /**
     * Indicates the kind of product that this is a variant of. In the case of [[ProductModel]], this is a pointer (from a ProductModel) to a base product from which this product is a variant. It is safe to infer that the variant inherits all product features from the base model, unless defined locally. This is not transitive. In the case of a [[ProductGroup]], the group description also serves as a template, representing a set of Products that vary on explicitly defined, specific dimensions only (so it defines both a set of variants, as well as which values distinguish amongst those variants). When used with [[ProductGroup]], this property can apply to any [[Product]] included in the group.
     *
     * @param isVariantOf ProductGroup value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public void addIsVariantOf(ProductGroup isVariantOf) {
        this.isVariantOf = add(this.isVariantOf, isVariantOf);
    }

    private List<Text> slogan;

    /**
     * A slogan or motto associated with the item.
     *
     * @return {@link Text}
     */
    @Override
    public List<Text> getSloganList() {
        return slogan;
    }

    /**
     * A slogan or motto associated with the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getSlogan() {
        return getFirst(slogan);
    }

    /**
     * A slogan or motto associated with the item.
     *
     * @param slogan Text value to set.
     */
    @Override
    public void addSlogan(Text slogan) {
        this.slogan = add(this.slogan, slogan);
    }

    @JsonLdFieldTypes({ Organization.class, Brand.class })
    private List<Object> brand;

    /**
     * The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.
     *
     * @return {@link Organization} or {@link Brand}
     */
    @Override
    public <T> List<T> getBrandList() {
        return (List<T>) brand;
    }

    /**
     * The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.
     *
     * @return {@link Organization} or {@link Brand}
     */
    @Override
    public <T> T getBrand() {
        return (T) getFirst(brand);
    }

    /**
     * The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.
     *
     * @param brand Organization value to set.
     */
    @Override
    public void addBrand(Organization brand) {
        this.brand = add(this.brand, brand);
    }
    /**
     * The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.
     *
     * @param brand Brand value to set.
     */
    @Override
    public void addBrand(Brand brand) {
        this.brand = add(this.brand, brand);
    }

    private List<Organization> manufacturer;

    /**
     * The manufacturer of the product.
     *
     * @return {@link Organization}
     */
    @Override
    public List<Organization> getManufacturerList() {
        return manufacturer;
    }

    /**
     * The manufacturer of the product.
     *
     * @return {@link Organization}
     */
    @Override
    public Organization getManufacturer() {
        return getFirst(manufacturer);
    }

    /**
     * The manufacturer of the product.
     *
     * @param manufacturer Organization value to set.
     */
    @Override
    public void addManufacturer(Organization manufacturer) {
        this.manufacturer = add(this.manufacturer, manufacturer);
    }

    private List<QuantitativeValue> hasMeasurement;

    /**
     * A product measurement, for example the inseam of pants, the wheel size of a bicycle, or the gauge of a screw. Usually an exact measurement, but can also be a range of measurements for adjustable products, for example belts and ski bindings.
     *
     * @return {@link QuantitativeValue}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2811">https://github.com/schemaorg/schemaorg/issues/2811</a>
     */
    @Override
    public List<QuantitativeValue> getHasMeasurementList() {
        return hasMeasurement;
    }

    /**
     * A product measurement, for example the inseam of pants, the wheel size of a bicycle, or the gauge of a screw. Usually an exact measurement, but can also be a range of measurements for adjustable products, for example belts and ski bindings.
     *
     * @return {@link QuantitativeValue}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2811">https://github.com/schemaorg/schemaorg/issues/2811</a>
     */
    @Override
    public QuantitativeValue getHasMeasurement() {
        return getFirst(hasMeasurement);
    }

    /**
     * A product measurement, for example the inseam of pants, the wheel size of a bicycle, or the gauge of a screw. Usually an exact measurement, but can also be a range of measurements for adjustable products, for example belts and ski bindings.
     *
     * @param hasMeasurement QuantitativeValue value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2811">https://github.com/schemaorg/schemaorg/issues/2811</a>
     */
    @Override
    public void addHasMeasurement(QuantitativeValue hasMeasurement) {
        this.hasMeasurement = add(this.hasMeasurement, hasMeasurement);
    }

    private List<Product> isConsumableFor;

    /**
     * A pointer to another product (or multiple products) for which this product is a consumable.
     *
     * @return {@link Product}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public List<Product> getIsConsumableForList() {
        return isConsumableFor;
    }

    /**
     * A pointer to another product (or multiple products) for which this product is a consumable.
     *
     * @return {@link Product}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public Product getIsConsumableFor() {
        return getFirst(isConsumableFor);
    }

    /**
     * A pointer to another product (or multiple products) for which this product is a consumable.
     *
     * @param isConsumableFor Product value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public void addIsConsumableFor(Product isConsumableFor) {
        this.isConsumableFor = add(this.isConsumableFor, isConsumableFor);
    }

    @JsonLdFieldTypes({ URL.class, ImageObject.class })
    private List<Object> logo;

    /**
     * An associated logo.
     *
     * @return {@link URL} or {@link ImageObject}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public <T> List<T> getLogoList() {
        return (List<T>) logo;
    }

    /**
     * An associated logo.
     *
     * @return {@link URL} or {@link ImageObject}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public <T> T getLogo() {
        return (T) getFirst(logo);
    }

    /**
     * An associated logo.
     *
     * @param logo URL value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public void addLogo(URL logo) {
        this.logo = add(this.logo, logo);
    }
    /**
     * An associated logo.
     *
     * @param logo ImageObject value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public void addLogo(ImageObject logo) {
        this.logo = add(this.logo, logo);
    }

    private List<Text> gtin8;

    /**
     * The GTIN-8 code of the product, or the product to which the offer refers. This code is also known as EAN/UCC-8 or 8-digit EAN. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
     *
     * @return {@link Text}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public List<Text> getGtin8List() {
        return gtin8;
    }

    /**
     * The GTIN-8 code of the product, or the product to which the offer refers. This code is also known as EAN/UCC-8 or 8-digit EAN. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
     *
     * @return {@link Text}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public Text getGtin8() {
        return getFirst(gtin8);
    }

    /**
     * The GTIN-8 code of the product, or the product to which the offer refers. This code is also known as EAN/UCC-8 or 8-digit EAN. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
     *
     * @param gtin8 Text value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public void addGtin8(Text gtin8) {
        this.gtin8 = add(this.gtin8, gtin8);
    }

    private List<Text> sku;

    /**
     * The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which the offer refers.
     *
     * @return {@link Text}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public List<Text> getSkuList() {
        return sku;
    }

    /**
     * The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which the offer refers.
     *
     * @return {@link Text}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public Text getSku() {
        return getFirst(sku);
    }

    /**
     * The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which the offer refers.
     *
     * @param sku Text value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public void addSku(Text sku) {
        this.sku = add(this.sku, sku);
    }

    private List<Text> inProductGroupWithID;

    /**
     * Indicates the [[productGroupID]] for a [[ProductGroup]] that this product [[isVariantOf]]. 
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1797">https://github.com/schemaorg/schemaorg/issues/1797</a>
     */
    @Override
    public List<Text> getInProductGroupWithIDList() {
        return inProductGroupWithID;
    }

    /**
     * Indicates the [[productGroupID]] for a [[ProductGroup]] that this product [[isVariantOf]]. 
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1797">https://github.com/schemaorg/schemaorg/issues/1797</a>
     */
    @Override
    public Text getInProductGroupWithID() {
        return getFirst(inProductGroupWithID);
    }

    /**
     * Indicates the [[productGroupID]] for a [[ProductGroup]] that this product [[isVariantOf]]. 
     *
     * @param inProductGroupWithID Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1797">https://github.com/schemaorg/schemaorg/issues/1797</a>
     */
    @Override
    public void addInProductGroupWithID(Text inProductGroupWithID) {
        this.inProductGroupWithID = add(this.inProductGroupWithID, inProductGroupWithID);
    }

    @JsonLdFieldTypes({ ProductModel.class, Text.class })
    private List<Object> model;

    /**
     * The model of the product. Use with the URL of a ProductModel or a textual representation of the model identifier. The URL of the ProductModel can be from an external source. It is recommended to additionally provide strong product identifiers via the gtin8/gtin13/gtin14 and mpn properties.
     *
     * @return {@link ProductModel} or {@link Text}
     */
    @Override
    public <T> List<T> getModelList() {
        return (List<T>) model;
    }

    /**
     * The model of the product. Use with the URL of a ProductModel or a textual representation of the model identifier. The URL of the ProductModel can be from an external source. It is recommended to additionally provide strong product identifiers via the gtin8/gtin13/gtin14 and mpn properties.
     *
     * @return {@link ProductModel} or {@link Text}
     */
    @Override
    public <T> T getModel() {
        return (T) getFirst(model);
    }

    /**
     * The model of the product. Use with the URL of a ProductModel or a textual representation of the model identifier. The URL of the ProductModel can be from an external source. It is recommended to additionally provide strong product identifiers via the gtin8/gtin13/gtin14 and mpn properties.
     *
     * @param model ProductModel value to set.
     */
    @Override
    public void addModel(ProductModel model) {
        this.model = add(this.model, model);
    }
    /**
     * The model of the product. Use with the URL of a ProductModel or a textual representation of the model identifier. The URL of the ProductModel can be from an external source. It is recommended to additionally provide strong product identifiers via the gtin8/gtin13/gtin14 and mpn properties.
     *
     * @param model Text value to set.
     */
    @Override
    public void addModel(Text model) {
        this.model = add(this.model, model);
    }

    private List<MerchantReturnPolicy> hasMerchantReturnPolicy;

    /**
     * Specifies a MerchantReturnPolicy that may be applicable.
     *
     * @return {@link MerchantReturnPolicy}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2288">https://github.com/schemaorg/schemaorg/issues/2288</a>
     */
    @Override
    public List<MerchantReturnPolicy> getHasMerchantReturnPolicyList() {
        return hasMerchantReturnPolicy;
    }

    /**
     * Specifies a MerchantReturnPolicy that may be applicable.
     *
     * @return {@link MerchantReturnPolicy}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2288">https://github.com/schemaorg/schemaorg/issues/2288</a>
     */
    @Override
    public MerchantReturnPolicy getHasMerchantReturnPolicy() {
        return getFirst(hasMerchantReturnPolicy);
    }

    /**
     * Specifies a MerchantReturnPolicy that may be applicable.
     *
     * @param hasMerchantReturnPolicy MerchantReturnPolicy value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2288">https://github.com/schemaorg/schemaorg/issues/2288</a>
     */
    @Override
    public void addHasMerchantReturnPolicy(MerchantReturnPolicy hasMerchantReturnPolicy) {
        this.hasMerchantReturnPolicy = add(this.hasMerchantReturnPolicy, hasMerchantReturnPolicy);
    }

    private List<Date> releaseDate;

    /**
     * The release date of a product or product model. This can be used to distinguish the exact variant of a product.
     *
     * @return {@link Date}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public List<Date> getReleaseDateList() {
        return releaseDate;
    }

    /**
     * The release date of a product or product model. This can be used to distinguish the exact variant of a product.
     *
     * @return {@link Date}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public Date getReleaseDate() {
        return getFirst(releaseDate);
    }

    /**
     * The release date of a product or product model. This can be used to distinguish the exact variant of a product.
     *
     * @param releaseDate Date value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public void addReleaseDate(Date releaseDate) {
        this.releaseDate = add(this.releaseDate, releaseDate);
    }

    private List<Text> gtin14;

    /**
     * The GTIN-14 code of the product, or the product to which the offer refers. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
     *
     * @return {@link Text}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public List<Text> getGtin14List() {
        return gtin14;
    }

    /**
     * The GTIN-14 code of the product, or the product to which the offer refers. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
     *
     * @return {@link Text}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public Text getGtin14() {
        return getFirst(gtin14);
    }

    /**
     * The GTIN-14 code of the product, or the product to which the offer refers. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
     *
     * @param gtin14 Text value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public void addGtin14(Text gtin14) {
        this.gtin14 = add(this.gtin14, gtin14);
    }

    private List<QuantitativeValue> weight;

    /**
     * The weight of the product or person.
     *
     * @return {@link QuantitativeValue}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public List<QuantitativeValue> getWeightList() {
        return weight;
    }

    /**
     * The weight of the product or person.
     *
     * @return {@link QuantitativeValue}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public QuantitativeValue getWeight() {
        return getFirst(weight);
    }

    /**
     * The weight of the product or person.
     *
     * @param weight QuantitativeValue value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public void addWeight(QuantitativeValue weight) {
        this.weight = add(this.weight, weight);
    }

    @JsonLdFieldTypes({ QuantitativeValue.class, DefinedTerm.class, Text.class, SizeSpecification.class })
    private List<Object> size;

    /**
     * A standardized size of a product or creative work, specified either through a simple textual string (for example 'XL', '32Wx34L'), a  QuantitativeValue with a unitCode, or a comprehensive and structured [[SizeSpecification]]; in other cases, the [[width]], [[height]], [[depth]] and [[weight]] properties may be more applicable. 
     *
     * @return {@link QuantitativeValue} or {@link DefinedTerm} or {@link Text} or {@link SizeSpecification}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1797">https://github.com/schemaorg/schemaorg/issues/1797</a>
     */
    @Override
    public <T> List<T> getSizeList() {
        return (List<T>) size;
    }

    /**
     * A standardized size of a product or creative work, specified either through a simple textual string (for example 'XL', '32Wx34L'), a  QuantitativeValue with a unitCode, or a comprehensive and structured [[SizeSpecification]]; in other cases, the [[width]], [[height]], [[depth]] and [[weight]] properties may be more applicable. 
     *
     * @return {@link QuantitativeValue} or {@link DefinedTerm} or {@link Text} or {@link SizeSpecification}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1797">https://github.com/schemaorg/schemaorg/issues/1797</a>
     */
    @Override
    public <T> T getSize() {
        return (T) getFirst(size);
    }

    /**
     * A standardized size of a product or creative work, specified either through a simple textual string (for example 'XL', '32Wx34L'), a  QuantitativeValue with a unitCode, or a comprehensive and structured [[SizeSpecification]]; in other cases, the [[width]], [[height]], [[depth]] and [[weight]] properties may be more applicable. 
     *
     * @param size QuantitativeValue value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1797">https://github.com/schemaorg/schemaorg/issues/1797</a>
     */
    @Override
    public void addSize(QuantitativeValue size) {
        this.size = add(this.size, size);
    }
    /**
     * A standardized size of a product or creative work, specified either through a simple textual string (for example 'XL', '32Wx34L'), a  QuantitativeValue with a unitCode, or a comprehensive and structured [[SizeSpecification]]; in other cases, the [[width]], [[height]], [[depth]] and [[weight]] properties may be more applicable. 
     *
     * @param size DefinedTerm value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1797">https://github.com/schemaorg/schemaorg/issues/1797</a>
     */
    @Override
    public void addSize(DefinedTerm size) {
        this.size = add(this.size, size);
    }
    /**
     * A standardized size of a product or creative work, specified either through a simple textual string (for example 'XL', '32Wx34L'), a  QuantitativeValue with a unitCode, or a comprehensive and structured [[SizeSpecification]]; in other cases, the [[width]], [[height]], [[depth]] and [[weight]] properties may be more applicable. 
     *
     * @param size Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1797">https://github.com/schemaorg/schemaorg/issues/1797</a>
     */
    @Override
    public void addSize(Text size) {
        this.size = add(this.size, size);
    }
    /**
     * A standardized size of a product or creative work, specified either through a simple textual string (for example 'XL', '32Wx34L'), a  QuantitativeValue with a unitCode, or a comprehensive and structured [[SizeSpecification]]; in other cases, the [[width]], [[height]], [[depth]] and [[weight]] properties may be more applicable. 
     *
     * @param size SizeSpecification value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1797">https://github.com/schemaorg/schemaorg/issues/1797</a>
     */
    @Override
    public void addSize(SizeSpecification size) {
        this.size = add(this.size, size);
    }

    private List<PropertyValue> additionalProperty;

    /**
     * A property-value pair representing an additional characteristics of the entitity, e.g. a product feature or another characteristic for which there is no matching property in schema.org.<br/><br/>Note: Publishers should be aware that applications designed to use specific schema.org properties (e.g. https://schema.org/width, https://schema.org/color, https://schema.org/gtin13, ...) will typically expect such data to be provided using those properties, rather than using the generic property/value mechanism.
     *
     * @return {@link PropertyValue}
     */
    @Override
    public List<PropertyValue> getAdditionalPropertyList() {
        return additionalProperty;
    }

    /**
     * A property-value pair representing an additional characteristics of the entitity, e.g. a product feature or another characteristic for which there is no matching property in schema.org.<br/><br/>Note: Publishers should be aware that applications designed to use specific schema.org properties (e.g. https://schema.org/width, https://schema.org/color, https://schema.org/gtin13, ...) will typically expect such data to be provided using those properties, rather than using the generic property/value mechanism.
     *
     * @return {@link PropertyValue}
     */
    @Override
    public PropertyValue getAdditionalProperty() {
        return getFirst(additionalProperty);
    }

    /**
     * A property-value pair representing an additional characteristics of the entitity, e.g. a product feature or another characteristic for which there is no matching property in schema.org.<br/><br/>Note: Publishers should be aware that applications designed to use specific schema.org properties (e.g. https://schema.org/width, https://schema.org/color, https://schema.org/gtin13, ...) will typically expect such data to be provided using those properties, rather than using the generic property/value mechanism.
     *
     * @param additionalProperty PropertyValue value to set.
     */
    @Override
    public void addAdditionalProperty(PropertyValue additionalProperty) {
        this.additionalProperty = add(this.additionalProperty, additionalProperty);
    }

    private List<Text> gtin13;

    /**
     * The GTIN-13 code of the product, or the product to which the offer refers. This is equivalent to 13-digit ISBN codes and EAN UCC-13. Former 12-digit UPC codes can be converted into a GTIN-13 code by simply adding a preceding zero. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
     *
     * @return {@link Text}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public List<Text> getGtin13List() {
        return gtin13;
    }

    /**
     * The GTIN-13 code of the product, or the product to which the offer refers. This is equivalent to 13-digit ISBN codes and EAN UCC-13. Former 12-digit UPC codes can be converted into a GTIN-13 code by simply adding a preceding zero. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
     *
     * @return {@link Text}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public Text getGtin13() {
        return getFirst(gtin13);
    }

    /**
     * The GTIN-13 code of the product, or the product to which the offer refers. This is equivalent to 13-digit ISBN codes and EAN UCC-13. Former 12-digit UPC codes can be converted into a GTIN-13 code by simply adding a preceding zero. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
     *
     * @param gtin13 Text value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public void addGtin13(Text gtin13) {
        this.gtin13 = add(this.gtin13, gtin13);
    }

    private List<Review> reviews;

    /**
     * Review of the item.
     *
     * @return {@link Review}
     */
    @Override
    public List<Review> getReviewsList() {
        return reviews;
    }

    /**
     * Review of the item.
     *
     * @return {@link Review}
     */
    @Override
    public Review getReviews() {
        return getFirst(reviews);
    }

    /**
     * Review of the item.
     *
     * @param reviews Review value to set.
     */
    @Override
    public void addReviews(Review reviews) {
        this.reviews = add(this.reviews, reviews);
    }

    private List<Boolean> isFamilyFriendly;

    /**
     * Indicates whether this content is family friendly.
     *
     * @return {@link Boolean}
     */
    @Override
    public List<Boolean> getIsFamilyFriendlyList() {
        return isFamilyFriendly;
    }

    /**
     * Indicates whether this content is family friendly.
     *
     * @return {@link Boolean}
     */
    @Override
    public Boolean getIsFamilyFriendly() {
        return getFirst(isFamilyFriendly);
    }

    /**
     * Indicates whether this content is family friendly.
     *
     * @param isFamilyFriendly Boolean value to set.
     */
    @Override
    public void addIsFamilyFriendly(Boolean isFamilyFriendly) {
        this.isFamilyFriendly = add(this.isFamilyFriendly, isFamilyFriendly);
    }

    @JsonLdFieldTypes({ Service.class, Product.class })
    private List<Object> isRelatedTo;

    /**
     * A pointer to another, somehow related product (or multiple products).
     *
     * @return {@link Service} or {@link Product}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public <T> List<T> getIsRelatedToList() {
        return (List<T>) isRelatedTo;
    }

    /**
     * A pointer to another, somehow related product (or multiple products).
     *
     * @return {@link Service} or {@link Product}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public <T> T getIsRelatedTo() {
        return (T) getFirst(isRelatedTo);
    }

    /**
     * A pointer to another, somehow related product (or multiple products).
     *
     * @param isRelatedTo Service value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public void addIsRelatedTo(Service isRelatedTo) {
        this.isRelatedTo = add(this.isRelatedTo, isRelatedTo);
    }
    /**
     * A pointer to another, somehow related product (or multiple products).
     *
     * @param isRelatedTo Product value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms</a>
     */
    @Override
    public void addIsRelatedTo(Product isRelatedTo) {
        this.isRelatedTo = add(this.isRelatedTo, isRelatedTo);
    }

    @JsonLdFieldTypes({ CreativeWork.class, URL.class })
    private List<Object> mainEntityOfPage;

    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     * @return {@link CreativeWork} or {@link URL}
     */
    @Override
    public <T> List<T> getMainEntityOfPageList() {
        return (List<T>) mainEntityOfPage;
    }

    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     * @return {@link CreativeWork} or {@link URL}
     */
    @Override
    public <T> T getMainEntityOfPage() {
        return (T) getFirst(mainEntityOfPage);
    }

    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     * @param mainEntityOfPage CreativeWork value to set.
     */
    @Override
    public void addMainEntityOfPage(CreativeWork mainEntityOfPage) {
        this.mainEntityOfPage = add(this.mainEntityOfPage, mainEntityOfPage);
    }
    /**
     * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
     *
     * @param mainEntityOfPage URL value to set.
     */
    @Override
    public void addMainEntityOfPage(URL mainEntityOfPage) {
        this.mainEntityOfPage = add(this.mainEntityOfPage, mainEntityOfPage);
    }

    private List<Text> alternateName;

    /**
     * An alias for the item.
     *
     * @return {@link Text}
     */
    @Override
    public List<Text> getAlternateNameList() {
        return alternateName;
    }

    /**
     * An alias for the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getAlternateName() {
        return getFirst(alternateName);
    }

    /**
     * An alias for the item.
     *
     * @param alternateName Text value to set.
     */
    @Override
    public void addAlternateName(Text alternateName) {
        this.alternateName = add(this.alternateName, alternateName);
    }

    private List<Text> name;

    /**
     * The name of the item.
     *
     * @return {@link Text}
     */
    @Override
    public List<Text> getNameList() {
        return name;
    }

    /**
     * The name of the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getName() {
        return getFirst(name);
    }

    /**
     * The name of the item.
     *
     * @param name Text value to set.
     */
    @Override
    public void addName(Text name) {
        this.name = add(this.name, name);
    }

    private List<Action> potentialAction;

    /**
     * Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
     *
     * @return {@link Action}
     */
    @Override
    public List<Action> getPotentialActionList() {
        return potentialAction;
    }

    /**
     * Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
     *
     * @return {@link Action}
     */
    @Override
    public Action getPotentialAction() {
        return getFirst(potentialAction);
    }

    /**
     * Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
     *
     * @param potentialAction Action value to set.
     */
    @Override
    public void addPotentialAction(Action potentialAction) {
        this.potentialAction = add(this.potentialAction, potentialAction);
    }

    @JsonLdFieldTypes({ URL.class, ImageObject.class })
    private List<Object> image;

    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * @return {@link URL} or {@link ImageObject}
     */
    @Override
    public <T> List<T> getImageList() {
        return (List<T>) image;
    }

    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * @return {@link URL} or {@link ImageObject}
     */
    @Override
    public <T> T getImage() {
        return (T) getFirst(image);
    }

    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * @param image URL value to set.
     */
    @Override
    public void addImage(URL image) {
        this.image = add(this.image, image);
    }
    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * @param image ImageObject value to set.
     */
    @Override
    public void addImage(ImageObject image) {
        this.image = add(this.image, image);
    }

    private List<URL> url;

    /**
     * URL of the item.
     *
     * @return {@link URL}
     */
    @Override
    public List<URL> getUrlList() {
        return url;
    }

    /**
     * URL of the item.
     *
     * @return {@link URL}
     */
    @Override
    public URL getUrl() {
        return getFirst(url);
    }

    /**
     * URL of the item.
     *
     * @param url URL value to set.
     */
    @Override
    public void addUrl(URL url) {
        this.url = add(this.url, url);
    }

    private List<Text> description;

    /**
     * A description of the item.
     *
     * @return {@link Text}
     */
    @Override
    public List<Text> getDescriptionList() {
        return description;
    }

    /**
     * A description of the item.
     *
     * @return {@link Text}
     */
    @Override
    public Text getDescription() {
        return getFirst(description);
    }

    /**
     * A description of the item.
     *
     * @param description Text value to set.
     */
    @Override
    public void addDescription(Text description) {
        this.description = add(this.description, description);
    }

    @JsonLdFieldTypes({ Event.class, CreativeWork.class })
    private List<Object> subjectOf;

    /**
     * A CreativeWork or Event about this Thing.
     *
     * @return {@link Event} or {@link CreativeWork}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public <T> List<T> getSubjectOfList() {
        return (List<T>) subjectOf;
    }

    /**
     * A CreativeWork or Event about this Thing.
     *
     * @return {@link Event} or {@link CreativeWork}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public <T> T getSubjectOf() {
        return (T) getFirst(subjectOf);
    }

    /**
     * A CreativeWork or Event about this Thing.
     *
     * @param subjectOf Event value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public void addSubjectOf(Event subjectOf) {
        this.subjectOf = add(this.subjectOf, subjectOf);
    }
    /**
     * A CreativeWork or Event about this Thing.
     *
     * @param subjectOf CreativeWork value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public void addSubjectOf(CreativeWork subjectOf) {
        this.subjectOf = add(this.subjectOf, subjectOf);
    }

    private List<URL> additionalType;

    /**
     * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
     *
     * @return {@link URL}
     */
    @Override
    public List<URL> getAdditionalTypeList() {
        return additionalType;
    }

    /**
     * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
     *
     * @return {@link URL}
     */
    @Override
    public URL getAdditionalType() {
        return getFirst(additionalType);
    }

    /**
     * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
     *
     * @param additionalType URL value to set.
     */
    @Override
    public void addAdditionalType(URL additionalType) {
        this.additionalType = add(this.additionalType, additionalType);
    }

    private List<Text> disambiguatingDescription;

    /**
     * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
     *
     * @return {@link Text}
     */
    @Override
    public List<Text> getDisambiguatingDescriptionList() {
        return disambiguatingDescription;
    }

    /**
     * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
     *
     * @return {@link Text}
     */
    @Override
    public Text getDisambiguatingDescription() {
        return getFirst(disambiguatingDescription);
    }

    /**
     * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
     *
     * @param disambiguatingDescription Text value to set.
     */
    @Override
    public void addDisambiguatingDescription(Text disambiguatingDescription) {
        this.disambiguatingDescription = add(this.disambiguatingDescription, disambiguatingDescription);
    }

    private List<URL> sameAs;

    /**
     * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
     *
     * @return {@link URL}
     */
    @Override
    public List<URL> getSameAsList() {
        return sameAs;
    }

    /**
     * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
     *
     * @return {@link URL}
     */
    @Override
    public URL getSameAs() {
        return getFirst(sameAs);
    }

    /**
     * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
     *
     * @param sameAs URL value to set.
     */
    @Override
    public void addSameAs(URL sameAs) {
        this.sameAs = add(this.sameAs, sameAs);
    }

    @JsonLdFieldTypes({ URL.class, Text.class, PropertyValue.class })
    private List<Object> identifier;

    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @return {@link URL} or {@link Text} or {@link PropertyValue}
     */
    @Override
    public <T> List<T> getIdentifierList() {
        return (List<T>) identifier;
    }

    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @return {@link URL} or {@link Text} or {@link PropertyValue}
     */
    @Override
    public <T> T getIdentifier() {
        return (T) getFirst(identifier);
    }

    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @param identifier URL value to set.
     */
    @Override
    public void addIdentifier(URL identifier) {
        this.identifier = add(this.identifier, identifier);
    }
    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @param identifier Text value to set.
     */
    @Override
    public void addIdentifier(Text identifier) {
        this.identifier = add(this.identifier, identifier);
    }
    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
     *         
     *
     * @param identifier PropertyValue value to set.
     */
    @Override
    public void addIdentifier(PropertyValue identifier) {
        this.identifier = add(this.identifier, identifier);
    }

    private List<Integer> collectionSize;

    /**
     * The number of items in the [[Collection]].
     *
     * @return {@link Integer}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1759">https://github.com/schemaorg/schemaorg/issues/1759</a>
     */
    @Override
    public List<Integer> getCollectionSizeList() {
        return collectionSize;
    }

    /**
     * The number of items in the [[Collection]].
     *
     * @return {@link Integer}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1759">https://github.com/schemaorg/schemaorg/issues/1759</a>
     */
    @Override
    public Integer getCollectionSize() {
        return getFirst(collectionSize);
    }

    /**
     * The number of items in the [[Collection]].
     *
     * @param collectionSize Integer value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1759">https://github.com/schemaorg/schemaorg/issues/1759</a>
     */
    @Override
    public void addCollectionSize(Integer collectionSize) {
        this.collectionSize = add(this.collectionSize, collectionSize);
    }

    @JsonLdFieldTypes({ DefinedTerm.class, Text.class })
    private List<Object> teaches;

    /**
     * The item being described is intended to help a person learn the competency or learning outcome defined by the referenced term.
     *
     * @return {@link DefinedTerm} or {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2427">https://github.com/schemaorg/schemaorg/issues/2427</a>
     */
    @Override
    public <T> List<T> getTeachesList() {
        return (List<T>) teaches;
    }

    /**
     * The item being described is intended to help a person learn the competency or learning outcome defined by the referenced term.
     *
     * @return {@link DefinedTerm} or {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2427">https://github.com/schemaorg/schemaorg/issues/2427</a>
     */
    @Override
    public <T> T getTeaches() {
        return (T) getFirst(teaches);
    }

    /**
     * The item being described is intended to help a person learn the competency or learning outcome defined by the referenced term.
     *
     * @param teaches DefinedTerm value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2427">https://github.com/schemaorg/schemaorg/issues/2427</a>
     */
    @Override
    public void addTeaches(DefinedTerm teaches) {
        this.teaches = add(this.teaches, teaches);
    }
    /**
     * The item being described is intended to help a person learn the competency or learning outcome defined by the referenced term.
     *
     * @param teaches Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2427">https://github.com/schemaorg/schemaorg/issues/2427</a>
     */
    @Override
    public void addTeaches(Text teaches) {
        this.teaches = add(this.teaches, teaches);
    }

    @JsonLdFieldTypes({ URL.class, DefinedTerm.class, Text.class })
    private List<Object> educationalLevel;

    /**
     * The level in terms of progression through an educational or training context. Examples of educational levels include 'beginner', 'intermediate' or 'advanced', and formal sets of level indicators.
     *
     * @return {@link URL} or {@link DefinedTerm} or {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1779">https://github.com/schemaorg/schemaorg/issues/1779</a>
     */
    @Override
    public <T> List<T> getEducationalLevelList() {
        return (List<T>) educationalLevel;
    }

    /**
     * The level in terms of progression through an educational or training context. Examples of educational levels include 'beginner', 'intermediate' or 'advanced', and formal sets of level indicators.
     *
     * @return {@link URL} or {@link DefinedTerm} or {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1779">https://github.com/schemaorg/schemaorg/issues/1779</a>
     */
    @Override
    public <T> T getEducationalLevel() {
        return (T) getFirst(educationalLevel);
    }

    /**
     * The level in terms of progression through an educational or training context. Examples of educational levels include 'beginner', 'intermediate' or 'advanced', and formal sets of level indicators.
     *
     * @param educationalLevel URL value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1779">https://github.com/schemaorg/schemaorg/issues/1779</a>
     */
    @Override
    public void addEducationalLevel(URL educationalLevel) {
        this.educationalLevel = add(this.educationalLevel, educationalLevel);
    }
    /**
     * The level in terms of progression through an educational or training context. Examples of educational levels include 'beginner', 'intermediate' or 'advanced', and formal sets of level indicators.
     *
     * @param educationalLevel DefinedTerm value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1779">https://github.com/schemaorg/schemaorg/issues/1779</a>
     */
    @Override
    public void addEducationalLevel(DefinedTerm educationalLevel) {
        this.educationalLevel = add(this.educationalLevel, educationalLevel);
    }
    /**
     * The level in terms of progression through an educational or training context. Examples of educational levels include 'beginner', 'intermediate' or 'advanced', and formal sets of level indicators.
     *
     * @param educationalLevel Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1779">https://github.com/schemaorg/schemaorg/issues/1779</a>
     */
    @Override
    public void addEducationalLevel(Text educationalLevel) {
        this.educationalLevel = add(this.educationalLevel, educationalLevel);
    }

    private List<Text> abstract_;

    /**
     * An abstract is a short description that summarizes a [[CreativeWork]].
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/276">https://github.com/schemaorg/schemaorg/issues/276</a>
     */
    @Override
    public List<Text> getAbstractList() {
        return abstract_;
    }

    /**
     * An abstract is a short description that summarizes a [[CreativeWork]].
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/276">https://github.com/schemaorg/schemaorg/issues/276</a>
     */
    @Override
    public Text getAbstract() {
        return getFirst(abstract_);
    }

    /**
     * An abstract is a short description that summarizes a [[CreativeWork]].
     *
     * @param abstract_ Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/276">https://github.com/schemaorg/schemaorg/issues/276</a>
     */
    @Override
    public void addAbstract(Text abstract_) {
        this.abstract_ = add(this.abstract_, abstract_);
    }

    @JsonLdFieldTypes({ Text.class, DefinedTerm.class })
    private List<Object> creativeWorkStatus;

    /**
     * The status of a creative work in terms of its stage in a lifecycle. Example terms include Incomplete, Draft, Published, Obsolete. Some organizations define a set of terms for the stages of their publication lifecycle.
     *
     * @return {@link Text} or {@link DefinedTerm}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/987">https://github.com/schemaorg/schemaorg/issues/987</a>
     */
    @Override
    public <T> List<T> getCreativeWorkStatusList() {
        return (List<T>) creativeWorkStatus;
    }

    /**
     * The status of a creative work in terms of its stage in a lifecycle. Example terms include Incomplete, Draft, Published, Obsolete. Some organizations define a set of terms for the stages of their publication lifecycle.
     *
     * @return {@link Text} or {@link DefinedTerm}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/987">https://github.com/schemaorg/schemaorg/issues/987</a>
     */
    @Override
    public <T> T getCreativeWorkStatus() {
        return (T) getFirst(creativeWorkStatus);
    }

    /**
     * The status of a creative work in terms of its stage in a lifecycle. Example terms include Incomplete, Draft, Published, Obsolete. Some organizations define a set of terms for the stages of their publication lifecycle.
     *
     * @param creativeWorkStatus Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/987">https://github.com/schemaorg/schemaorg/issues/987</a>
     */
    @Override
    public void addCreativeWorkStatus(Text creativeWorkStatus) {
        this.creativeWorkStatus = add(this.creativeWorkStatus, creativeWorkStatus);
    }
    /**
     * The status of a creative work in terms of its stage in a lifecycle. Example terms include Incomplete, Draft, Published, Obsolete. Some organizations define a set of terms for the stages of their publication lifecycle.
     *
     * @param creativeWorkStatus DefinedTerm value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/987">https://github.com/schemaorg/schemaorg/issues/987</a>
     */
    @Override
    public void addCreativeWorkStatus(DefinedTerm creativeWorkStatus) {
        this.creativeWorkStatus = add(this.creativeWorkStatus, creativeWorkStatus);
    }

    private List<Date> expires;

    /**
     * Date the content expires and is no longer useful or available. For example a [[VideoObject]] or [[NewsArticle]] whose availability or relevance is time-limited, or a [[ClaimReview]] fact check whose publisher wants to indicate that it may no longer be relevant (or helpful to highlight) after some date.
     *
     * @return {@link Date}
     */
    @Override
    public List<Date> getExpiresList() {
        return expires;
    }

    /**
     * Date the content expires and is no longer useful or available. For example a [[VideoObject]] or [[NewsArticle]] whose availability or relevance is time-limited, or a [[ClaimReview]] fact check whose publisher wants to indicate that it may no longer be relevant (or helpful to highlight) after some date.
     *
     * @return {@link Date}
     */
    @Override
    public Date getExpires() {
        return getFirst(expires);
    }

    /**
     * Date the content expires and is no longer useful or available. For example a [[VideoObject]] or [[NewsArticle]] whose availability or relevance is time-limited, or a [[ClaimReview]] fact check whose publisher wants to indicate that it may no longer be relevant (or helpful to highlight) after some date.
     *
     * @param expires Date value to set.
     */
    @Override
    public void addExpires(Date expires) {
        this.expires = add(this.expires, expires);
    }

    private List<DateTime> contentReferenceTime;

    /**
     * The specific time described by a creative work, for works (e.g. articles, video objects etc.) that emphasise a particular moment within an Event.
     *
     * @return {@link DateTime}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1050">https://github.com/schemaorg/schemaorg/issues/1050</a>
     */
    @Override
    public List<DateTime> getContentReferenceTimeList() {
        return contentReferenceTime;
    }

    /**
     * The specific time described by a creative work, for works (e.g. articles, video objects etc.) that emphasise a particular moment within an Event.
     *
     * @return {@link DateTime}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1050">https://github.com/schemaorg/schemaorg/issues/1050</a>
     */
    @Override
    public DateTime getContentReferenceTime() {
        return getFirst(contentReferenceTime);
    }

    /**
     * The specific time described by a creative work, for works (e.g. articles, video objects etc.) that emphasise a particular moment within an Event.
     *
     * @param contentReferenceTime DateTime value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1050">https://github.com/schemaorg/schemaorg/issues/1050</a>
     */
    @Override
    public void addContentReferenceTime(DateTime contentReferenceTime) {
        this.contentReferenceTime = add(this.contentReferenceTime, contentReferenceTime);
    }

    @JsonLdFieldTypes({ URL.class, Text.class })
    private List<Object> fileFormat;

    /**
     * Media type, typically MIME format (see [IANA site](http://www.iana.org/assignments/media-types/media-types.xhtml)) of the content e.g. application/zip of a SoftwareApplication binary. In cases where a CreativeWork has several media type representations, 'encoding' can be used to indicate each MediaObject alongside particular fileFormat information. Unregistered or niche file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia entry.
     *
     * @return {@link URL} or {@link Text}
     */
    @Override
    public <T> List<T> getFileFormatList() {
        return (List<T>) fileFormat;
    }

    /**
     * Media type, typically MIME format (see [IANA site](http://www.iana.org/assignments/media-types/media-types.xhtml)) of the content e.g. application/zip of a SoftwareApplication binary. In cases where a CreativeWork has several media type representations, 'encoding' can be used to indicate each MediaObject alongside particular fileFormat information. Unregistered or niche file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia entry.
     *
     * @return {@link URL} or {@link Text}
     */
    @Override
    public <T> T getFileFormat() {
        return (T) getFirst(fileFormat);
    }

    /**
     * Media type, typically MIME format (see [IANA site](http://www.iana.org/assignments/media-types/media-types.xhtml)) of the content e.g. application/zip of a SoftwareApplication binary. In cases where a CreativeWork has several media type representations, 'encoding' can be used to indicate each MediaObject alongside particular fileFormat information. Unregistered or niche file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia entry.
     *
     * @param fileFormat URL value to set.
     */
    @Override
    public void addFileFormat(URL fileFormat) {
        this.fileFormat = add(this.fileFormat, fileFormat);
    }
    /**
     * Media type, typically MIME format (see [IANA site](http://www.iana.org/assignments/media-types/media-types.xhtml)) of the content e.g. application/zip of a SoftwareApplication binary. In cases where a CreativeWork has several media type representations, 'encoding' can be used to indicate each MediaObject alongside particular fileFormat information. Unregistered or niche file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia entry.
     *
     * @param fileFormat Text value to set.
     */
    @Override
    public void addFileFormat(Text fileFormat) {
        this.fileFormat = add(this.fileFormat, fileFormat);
    }

    private List<Text> text;

    /**
     * The textual content of this CreativeWork.
     *
     * @return {@link Text}
     */
    @Override
    public List<Text> getTextList() {
        return text;
    }

    /**
     * The textual content of this CreativeWork.
     *
     * @return {@link Text}
     */
    @Override
    public Text getText() {
        return getFirst(text);
    }

    /**
     * The textual content of this CreativeWork.
     *
     * @param text Text value to set.
     */
    @Override
    public void addText(Text text) {
        this.text = add(this.text, text);
    }

    @JsonLdFieldTypes({ Person.class, Organization.class })
    private List<Object> translator;

    /**
     * Organization or person who adapts a creative work to different languages, regional differences and technical requirements of a target market, or that translates during some event.
     *
     * @return {@link Person} or {@link Organization}
     */
    @Override
    public <T> List<T> getTranslatorList() {
        return (List<T>) translator;
    }

    /**
     * Organization or person who adapts a creative work to different languages, regional differences and technical requirements of a target market, or that translates during some event.
     *
     * @return {@link Person} or {@link Organization}
     */
    @Override
    public <T> T getTranslator() {
        return (T) getFirst(translator);
    }

    /**
     * Organization or person who adapts a creative work to different languages, regional differences and technical requirements of a target market, or that translates during some event.
     *
     * @param translator Person value to set.
     */
    @Override
    public void addTranslator(Person translator) {
        this.translator = add(this.translator, translator);
    }
    /**
     * Organization or person who adapts a creative work to different languages, regional differences and technical requirements of a target market, or that translates during some event.
     *
     * @param translator Organization value to set.
     */
    @Override
    public void addTranslator(Organization translator) {
        this.translator = add(this.translator, translator);
    }

    @JsonLdFieldTypes({ Text.class, DefinedTerm.class })
    private List<Object> assesses;

    /**
     * The item being described is intended to assess the competency or learning outcome defined by the referenced term.
     *
     * @return {@link Text} or {@link DefinedTerm}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2427">https://github.com/schemaorg/schemaorg/issues/2427</a>
     */
    @Override
    public <T> List<T> getAssessesList() {
        return (List<T>) assesses;
    }

    /**
     * The item being described is intended to assess the competency or learning outcome defined by the referenced term.
     *
     * @return {@link Text} or {@link DefinedTerm}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2427">https://github.com/schemaorg/schemaorg/issues/2427</a>
     */
    @Override
    public <T> T getAssesses() {
        return (T) getFirst(assesses);
    }

    /**
     * The item being described is intended to assess the competency or learning outcome defined by the referenced term.
     *
     * @param assesses Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2427">https://github.com/schemaorg/schemaorg/issues/2427</a>
     */
    @Override
    public void addAssesses(Text assesses) {
        this.assesses = add(this.assesses, assesses);
    }
    /**
     * The item being described is intended to assess the competency or learning outcome defined by the referenced term.
     *
     * @param assesses DefinedTerm value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2427">https://github.com/schemaorg/schemaorg/issues/2427</a>
     */
    @Override
    public void addAssesses(DefinedTerm assesses) {
        this.assesses = add(this.assesses, assesses);
    }

    private List<Text> copyrightNotice;

    /**
     * Text of a notice appropriate for describing the copyright aspects of this Creative Work, ideally indicating the owner of the copyright for the Work.
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2659">https://github.com/schemaorg/schemaorg/issues/2659</a>
     */
    @Override
    public List<Text> getCopyrightNoticeList() {
        return copyrightNotice;
    }

    /**
     * Text of a notice appropriate for describing the copyright aspects of this Creative Work, ideally indicating the owner of the copyright for the Work.
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2659">https://github.com/schemaorg/schemaorg/issues/2659</a>
     */
    @Override
    public Text getCopyrightNotice() {
        return getFirst(copyrightNotice);
    }

    /**
     * Text of a notice appropriate for describing the copyright aspects of this Creative Work, ideally indicating the owner of the copyright for the Work.
     *
     * @param copyrightNotice Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2659">https://github.com/schemaorg/schemaorg/issues/2659</a>
     */
    @Override
    public void addCopyrightNotice(Text copyrightNotice) {
        this.copyrightNotice = add(this.copyrightNotice, copyrightNotice);
    }

    @JsonLdFieldTypes({ Text.class, URL.class })
    private List<Object> schemaVersion;

    /**
     * Indicates (by URL or string) a particular version of a schema used in some CreativeWork. This property was created primarily to
     *     indicate the use of a specific schema.org release, e.g. ```10.0``` as a simple string, or more explicitly via URL, ```https://schema.org/docs/releases.html#v10.0```. There may be situations in which other schemas might usefully be referenced this way, e.g. ```http://dublincore.org/specifications/dublin-core/dces/1999-07-02/``` but this has not been carefully explored in the community.
     *
     * @return {@link Text} or {@link URL}
     */
    @Override
    public <T> List<T> getSchemaVersionList() {
        return (List<T>) schemaVersion;
    }

    /**
     * Indicates (by URL or string) a particular version of a schema used in some CreativeWork. This property was created primarily to
     *     indicate the use of a specific schema.org release, e.g. ```10.0``` as a simple string, or more explicitly via URL, ```https://schema.org/docs/releases.html#v10.0```. There may be situations in which other schemas might usefully be referenced this way, e.g. ```http://dublincore.org/specifications/dublin-core/dces/1999-07-02/``` but this has not been carefully explored in the community.
     *
     * @return {@link Text} or {@link URL}
     */
    @Override
    public <T> T getSchemaVersion() {
        return (T) getFirst(schemaVersion);
    }

    /**
     * Indicates (by URL or string) a particular version of a schema used in some CreativeWork. This property was created primarily to
     *     indicate the use of a specific schema.org release, e.g. ```10.0``` as a simple string, or more explicitly via URL, ```https://schema.org/docs/releases.html#v10.0```. There may be situations in which other schemas might usefully be referenced this way, e.g. ```http://dublincore.org/specifications/dublin-core/dces/1999-07-02/``` but this has not been carefully explored in the community.
     *
     * @param schemaVersion Text value to set.
     */
    @Override
    public void addSchemaVersion(Text schemaVersion) {
        this.schemaVersion = add(this.schemaVersion, schemaVersion);
    }
    /**
     * Indicates (by URL or string) a particular version of a schema used in some CreativeWork. This property was created primarily to
     *     indicate the use of a specific schema.org release, e.g. ```10.0``` as a simple string, or more explicitly via URL, ```https://schema.org/docs/releases.html#v10.0```. There may be situations in which other schemas might usefully be referenced this way, e.g. ```http://dublincore.org/specifications/dublin-core/dces/1999-07-02/``` but this has not been carefully explored in the community.
     *
     * @param schemaVersion URL value to set.
     */
    @Override
    public void addSchemaVersion(URL schemaVersion) {
        this.schemaVersion = add(this.schemaVersion, schemaVersion);
    }

    private List<Person> accountablePerson;

    /**
     * Specifies the Person that is legally accountable for the CreativeWork.
     *
     * @return {@link Person}
     */
    @Override
    public List<Person> getAccountablePersonList() {
        return accountablePerson;
    }

    /**
     * Specifies the Person that is legally accountable for the CreativeWork.
     *
     * @return {@link Person}
     */
    @Override
    public Person getAccountablePerson() {
        return getFirst(accountablePerson);
    }

    /**
     * Specifies the Person that is legally accountable for the CreativeWork.
     *
     * @param accountablePerson Person value to set.
     */
    @Override
    public void addAccountablePerson(Person accountablePerson) {
        this.accountablePerson = add(this.accountablePerson, accountablePerson);
    }

    @JsonLdFieldTypes({ DefinedTerm.class, Text.class })
    private List<Object> educationalUse;

    /**
     * The purpose of a work in the context of education; for example, 'assignment', 'group work'.
     *
     * @return {@link DefinedTerm} or {@link Text}
     */
    @Override
    public <T> List<T> getEducationalUseList() {
        return (List<T>) educationalUse;
    }

    /**
     * The purpose of a work in the context of education; for example, 'assignment', 'group work'.
     *
     * @return {@link DefinedTerm} or {@link Text}
     */
    @Override
    public <T> T getEducationalUse() {
        return (T) getFirst(educationalUse);
    }

    /**
     * The purpose of a work in the context of education; for example, 'assignment', 'group work'.
     *
     * @param educationalUse DefinedTerm value to set.
     */
    @Override
    public void addEducationalUse(DefinedTerm educationalUse) {
        this.educationalUse = add(this.educationalUse, educationalUse);
    }
    /**
     * The purpose of a work in the context of education; for example, 'assignment', 'group work'.
     *
     * @param educationalUse Text value to set.
     */
    @Override
    public void addEducationalUse(Text educationalUse) {
        this.educationalUse = add(this.educationalUse, educationalUse);
    }

    @JsonLdFieldTypes({ URL.class, Text.class })
    private List<Object> genre;

    /**
     * Genre of the creative work, broadcast channel or group.
     *
     * @return {@link URL} or {@link Text}
     */
    @Override
    public <T> List<T> getGenreList() {
        return (List<T>) genre;
    }

    /**
     * Genre of the creative work, broadcast channel or group.
     *
     * @return {@link URL} or {@link Text}
     */
    @Override
    public <T> T getGenre() {
        return (T) getFirst(genre);
    }

    /**
     * Genre of the creative work, broadcast channel or group.
     *
     * @param genre URL value to set.
     */
    @Override
    public void addGenre(URL genre) {
        this.genre = add(this.genre, genre);
    }
    /**
     * Genre of the creative work, broadcast channel or group.
     *
     * @param genre Text value to set.
     */
    @Override
    public void addGenre(Text genre) {
        this.genre = add(this.genre, genre);
    }

    @JsonLdFieldTypes({ Integer.class, Text.class })
    private List<Object> position;

    /**
     * The position of an item in a series or sequence of items.
     *
     * @return {@link Integer} or {@link Text}
     */
    @Override
    public <T> List<T> getPositionList() {
        return (List<T>) position;
    }

    /**
     * The position of an item in a series or sequence of items.
     *
     * @return {@link Integer} or {@link Text}
     */
    @Override
    public <T> T getPosition() {
        return (T) getFirst(position);
    }

    /**
     * The position of an item in a series or sequence of items.
     *
     * @param position Integer value to set.
     */
    @Override
    public void addPosition(Integer position) {
        this.position = add(this.position, position);
    }
    /**
     * The position of an item in a series or sequence of items.
     *
     * @param position Text value to set.
     */
    @Override
    public void addPosition(Text position) {
        this.position = add(this.position, position);
    }

    private List<Text> accessibilityHazard;

    /**
     * A characteristic of the described resource that is physiologically dangerous to some users. Related to WCAG 2.0 guideline 2.3. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityHazard-vocabulary).
     *
     * @return {@link Text}
     */
    @Override
    public List<Text> getAccessibilityHazardList() {
        return accessibilityHazard;
    }

    /**
     * A characteristic of the described resource that is physiologically dangerous to some users. Related to WCAG 2.0 guideline 2.3. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityHazard-vocabulary).
     *
     * @return {@link Text}
     */
    @Override
    public Text getAccessibilityHazard() {
        return getFirst(accessibilityHazard);
    }

    /**
     * A characteristic of the described resource that is physiologically dangerous to some users. Related to WCAG 2.0 guideline 2.3. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityHazard-vocabulary).
     *
     * @param accessibilityHazard Text value to set.
     */
    @Override
    public void addAccessibilityHazard(Text accessibilityHazard) {
        this.accessibilityHazard = add(this.accessibilityHazard, accessibilityHazard);
    }

    private List<Text> alternativeHeadline;

    /**
     * A secondary title of the CreativeWork.
     *
     * @return {@link Text}
     */
    @Override
    public List<Text> getAlternativeHeadlineList() {
        return alternativeHeadline;
    }

    /**
     * A secondary title of the CreativeWork.
     *
     * @return {@link Text}
     */
    @Override
    public Text getAlternativeHeadline() {
        return getFirst(alternativeHeadline);
    }

    /**
     * A secondary title of the CreativeWork.
     *
     * @param alternativeHeadline Text value to set.
     */
    @Override
    public void addAlternativeHeadline(Text alternativeHeadline) {
        this.alternativeHeadline = add(this.alternativeHeadline, alternativeHeadline);
    }

    private List<Place> locationCreated;

    /**
     * The location where the CreativeWork was created, which may not be the same as the location depicted in the CreativeWork.
     *
     * @return {@link Place}
     */
    @Override
    public List<Place> getLocationCreatedList() {
        return locationCreated;
    }

    /**
     * The location where the CreativeWork was created, which may not be the same as the location depicted in the CreativeWork.
     *
     * @return {@link Place}
     */
    @Override
    public Place getLocationCreated() {
        return getFirst(locationCreated);
    }

    /**
     * The location where the CreativeWork was created, which may not be the same as the location depicted in the CreativeWork.
     *
     * @param locationCreated Place value to set.
     */
    @Override
    public void addLocationCreated(Place locationCreated) {
        this.locationCreated = add(this.locationCreated, locationCreated);
    }

    private List<MediaObject> associatedMedia;

    /**
     * A media object that encodes this CreativeWork. This property is a synonym for encoding.
     *
     * @return {@link MediaObject}
     */
    @Override
    public List<MediaObject> getAssociatedMediaList() {
        return associatedMedia;
    }

    /**
     * A media object that encodes this CreativeWork. This property is a synonym for encoding.
     *
     * @return {@link MediaObject}
     */
    @Override
    public MediaObject getAssociatedMedia() {
        return getFirst(associatedMedia);
    }

    /**
     * A media object that encodes this CreativeWork. This property is a synonym for encoding.
     *
     * @param associatedMedia MediaObject value to set.
     */
    @Override
    public void addAssociatedMedia(MediaObject associatedMedia) {
        this.associatedMedia = add(this.associatedMedia, associatedMedia);
    }

    @JsonLdFieldTypes({ QuantitativeValue.class, Text.class })
    private List<Object> materialExtent;

    /**
     * The quantity of the materials being described or an expression of the physical space they occupy.
     *
     * @return {@link QuantitativeValue} or {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1759">https://github.com/schemaorg/schemaorg/issues/1759</a>
     */
    @Override
    public <T> List<T> getMaterialExtentList() {
        return (List<T>) materialExtent;
    }

    /**
     * The quantity of the materials being described or an expression of the physical space they occupy.
     *
     * @return {@link QuantitativeValue} or {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1759">https://github.com/schemaorg/schemaorg/issues/1759</a>
     */
    @Override
    public <T> T getMaterialExtent() {
        return (T) getFirst(materialExtent);
    }

    /**
     * The quantity of the materials being described or an expression of the physical space they occupy.
     *
     * @param materialExtent QuantitativeValue value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1759">https://github.com/schemaorg/schemaorg/issues/1759</a>
     */
    @Override
    public void addMaterialExtent(QuantitativeValue materialExtent) {
        this.materialExtent = add(this.materialExtent, materialExtent);
    }
    /**
     * The quantity of the materials being described or an expression of the physical space they occupy.
     *
     * @param materialExtent Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1759">https://github.com/schemaorg/schemaorg/issues/1759</a>
     */
    @Override
    public void addMaterialExtent(Text materialExtent) {
        this.materialExtent = add(this.materialExtent, materialExtent);
    }

    private List<Thing> mainEntity;

    /**
     * Indicates the primary entity described in some page or other CreativeWork.
     *
     * @return {@link Thing}
     */
    @Override
    public List<Thing> getMainEntityList() {
        return mainEntity;
    }

    /**
     * Indicates the primary entity described in some page or other CreativeWork.
     *
     * @return {@link Thing}
     */
    @Override
    public Thing getMainEntity() {
        return getFirst(mainEntity);
    }

    /**
     * Indicates the primary entity described in some page or other CreativeWork.
     *
     * @param mainEntity Thing value to set.
     */
    @Override
    public void addMainEntity(Thing mainEntity) {
        this.mainEntity = add(this.mainEntity, mainEntity);
    }

    @JsonLdFieldTypes({ Organization.class, Person.class })
    private List<Object> copyrightHolder;

    /**
     * The party holding the legal copyright to the CreativeWork.
     *
     * @return {@link Organization} or {@link Person}
     */
    @Override
    public <T> List<T> getCopyrightHolderList() {
        return (List<T>) copyrightHolder;
    }

    /**
     * The party holding the legal copyright to the CreativeWork.
     *
     * @return {@link Organization} or {@link Person}
     */
    @Override
    public <T> T getCopyrightHolder() {
        return (T) getFirst(copyrightHolder);
    }

    /**
     * The party holding the legal copyright to the CreativeWork.
     *
     * @param copyrightHolder Organization value to set.
     */
    @Override
    public void addCopyrightHolder(Organization copyrightHolder) {
        this.copyrightHolder = add(this.copyrightHolder, copyrightHolder);
    }
    /**
     * The party holding the legal copyright to the CreativeWork.
     *
     * @param copyrightHolder Person value to set.
     */
    @Override
    public void addCopyrightHolder(Person copyrightHolder) {
        this.copyrightHolder = add(this.copyrightHolder, copyrightHolder);
    }

    private List<Place> contentLocation;

    /**
     * The location depicted or described in the content. For example, the location in a photograph or painting.
     *
     * @return {@link Place}
     */
    @Override
    public List<Place> getContentLocationList() {
        return contentLocation;
    }

    /**
     * The location depicted or described in the content. For example, the location in a photograph or painting.
     *
     * @return {@link Place}
     */
    @Override
    public Place getContentLocation() {
        return getFirst(contentLocation);
    }

    /**
     * The location depicted or described in the content. For example, the location in a photograph or painting.
     *
     * @param contentLocation Place value to set.
     */
    @Override
    public void addContentLocation(Place contentLocation) {
        this.contentLocation = add(this.contentLocation, contentLocation);
    }

    private List<Date> sdDatePublished;

    /**
     * Indicates the date on which the current structured data was generated / published. Typically used alongside [[sdPublisher]]
     *
     * @return {@link Date}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1886">https://github.com/schemaorg/schemaorg/issues/1886</a>
     */
    @Override
    public List<Date> getSdDatePublishedList() {
        return sdDatePublished;
    }

    /**
     * Indicates the date on which the current structured data was generated / published. Typically used alongside [[sdPublisher]]
     *
     * @return {@link Date}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1886">https://github.com/schemaorg/schemaorg/issues/1886</a>
     */
    @Override
    public Date getSdDatePublished() {
        return getFirst(sdDatePublished);
    }

    /**
     * Indicates the date on which the current structured data was generated / published. Typically used alongside [[sdPublisher]]
     *
     * @param sdDatePublished Date value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1886">https://github.com/schemaorg/schemaorg/issues/1886</a>
     */
    @Override
    public void addSdDatePublished(Date sdDatePublished) {
        this.sdDatePublished = add(this.sdDatePublished, sdDatePublished);
    }

    @JsonLdFieldTypes({ Organization.class, Person.class })
    private List<Object> producer;

    /**
     * The person or organization who produced the work (e.g. music album, movie, tv/radio series etc.).
     *
     * @return {@link Organization} or {@link Person}
     */
    @Override
    public <T> List<T> getProducerList() {
        return (List<T>) producer;
    }

    /**
     * The person or organization who produced the work (e.g. music album, movie, tv/radio series etc.).
     *
     * @return {@link Organization} or {@link Person}
     */
    @Override
    public <T> T getProducer() {
        return (T) getFirst(producer);
    }

    /**
     * The person or organization who produced the work (e.g. music album, movie, tv/radio series etc.).
     *
     * @param producer Organization value to set.
     */
    @Override
    public void addProducer(Organization producer) {
        this.producer = add(this.producer, producer);
    }
    /**
     * The person or organization who produced the work (e.g. music album, movie, tv/radio series etc.).
     *
     * @param producer Person value to set.
     */
    @Override
    public void addProducer(Person producer) {
        this.producer = add(this.producer, producer);
    }

    private List<Place> spatial;

    /**
     * The "spatial" property can be used in cases when more specific properties
     * (e.g. [[locationCreated]], [[spatialCoverage]], [[contentLocation]]) are not known to be appropriate.
     *
     * @return {@link Place}
     */
    @Override
    public List<Place> getSpatialList() {
        return spatial;
    }

    /**
     * The "spatial" property can be used in cases when more specific properties
     * (e.g. [[locationCreated]], [[spatialCoverage]], [[contentLocation]]) are not known to be appropriate.
     *
     * @return {@link Place}
     */
    @Override
    public Place getSpatial() {
        return getFirst(spatial);
    }

    /**
     * The "spatial" property can be used in cases when more specific properties
     * (e.g. [[locationCreated]], [[spatialCoverage]], [[contentLocation]]) are not known to be appropriate.
     *
     * @param spatial Place value to set.
     */
    @Override
    public void addSpatial(Place spatial) {
        this.spatial = add(this.spatial, spatial);
    }

    @JsonLdFieldTypes({ Person.class, Organization.class })
    private List<Object> publisher;

    /**
     * The publisher of the creative work.
     *
     * @return {@link Person} or {@link Organization}
     */
    @Override
    public <T> List<T> getPublisherList() {
        return (List<T>) publisher;
    }

    /**
     * The publisher of the creative work.
     *
     * @return {@link Person} or {@link Organization}
     */
    @Override
    public <T> T getPublisher() {
        return (T) getFirst(publisher);
    }

    /**
     * The publisher of the creative work.
     *
     * @param publisher Person value to set.
     */
    @Override
    public void addPublisher(Person publisher) {
        this.publisher = add(this.publisher, publisher);
    }
    /**
     * The publisher of the creative work.
     *
     * @param publisher Organization value to set.
     */
    @Override
    public void addPublisher(Organization publisher) {
        this.publisher = add(this.publisher, publisher);
    }

    private List<Organization> sourceOrganization;

    /**
     * The Organization on whose behalf the creator was working.
     *
     * @return {@link Organization}
     */
    @Override
    public List<Organization> getSourceOrganizationList() {
        return sourceOrganization;
    }

    /**
     * The Organization on whose behalf the creator was working.
     *
     * @return {@link Organization}
     */
    @Override
    public Organization getSourceOrganization() {
        return getFirst(sourceOrganization);
    }

    /**
     * The Organization on whose behalf the creator was working.
     *
     * @param sourceOrganization Organization value to set.
     */
    @Override
    public void addSourceOrganization(Organization sourceOrganization) {
        this.sourceOrganization = add(this.sourceOrganization, sourceOrganization);
    }

    private List<Person> character;

    /**
     * Fictional person connected with a creative work.
     *
     * @return {@link Person}
     */
    @Override
    public List<Person> getCharacterList() {
        return character;
    }

    /**
     * Fictional person connected with a creative work.
     *
     * @return {@link Person}
     */
    @Override
    public Person getCharacter() {
        return getFirst(character);
    }

    /**
     * Fictional person connected with a creative work.
     *
     * @param character Person value to set.
     */
    @Override
    public void addCharacter(Person character) {
        this.character = add(this.character, character);
    }

    @JsonLdFieldTypes({ Organization.class, Person.class })
    private List<Object> funder;

    /**
     * A person or organization that supports (sponsors) something through some kind of financial contribution.
     *
     * @return {@link Organization} or {@link Person}
     */
    @Override
    public <T> List<T> getFunderList() {
        return (List<T>) funder;
    }

    /**
     * A person or organization that supports (sponsors) something through some kind of financial contribution.
     *
     * @return {@link Organization} or {@link Person}
     */
    @Override
    public <T> T getFunder() {
        return (T) getFirst(funder);
    }

    /**
     * A person or organization that supports (sponsors) something through some kind of financial contribution.
     *
     * @param funder Organization value to set.
     */
    @Override
    public void addFunder(Organization funder) {
        this.funder = add(this.funder, funder);
    }
    /**
     * A person or organization that supports (sponsors) something through some kind of financial contribution.
     *
     * @param funder Person value to set.
     */
    @Override
    public void addFunder(Person funder) {
        this.funder = add(this.funder, funder);
    }

    private List<CreativeWork> exampleOfWork;

    /**
     * A creative work that this work is an example/instance/realization/derivation of.
     *
     * @return {@link CreativeWork}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex</a>
     */
    @Override
    public List<CreativeWork> getExampleOfWorkList() {
        return exampleOfWork;
    }

    /**
     * A creative work that this work is an example/instance/realization/derivation of.
     *
     * @return {@link CreativeWork}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex</a>
     */
    @Override
    public CreativeWork getExampleOfWork() {
        return getFirst(exampleOfWork);
    }

    /**
     * A creative work that this work is an example/instance/realization/derivation of.
     *
     * @param exampleOfWork CreativeWork value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex</a>
     */
    @Override
    public void addExampleOfWork(CreativeWork exampleOfWork) {
        this.exampleOfWork = add(this.exampleOfWork, exampleOfWork);
    }

    @JsonLdFieldTypes({ CreativeWork.class, URL.class })
    private List<Object> usageInfo;

    /**
     * The schema.org [[usageInfo]] property indicates further information about a [[CreativeWork]]. This property is applicable both to works that are freely available and to those that require payment or other transactions. It can reference additional information e.g. community expectations on preferred linking and citation conventions, as well as purchasing details. For something that can be commercially licensed, usageInfo can provide detailed, resource-specific information about licensing options.
     * 
     * This property can be used alongside the license property which indicates license(s) applicable to some piece of content. The usageInfo property can provide information about other licensing options, e.g. acquiring commercial usage rights for an image that is also available under non-commercial creative commons licenses.
     *
     * @return {@link CreativeWork} or {@link URL}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2454">https://github.com/schemaorg/schemaorg/issues/2454</a>
     */
    @Override
    public <T> List<T> getUsageInfoList() {
        return (List<T>) usageInfo;
    }

    /**
     * The schema.org [[usageInfo]] property indicates further information about a [[CreativeWork]]. This property is applicable both to works that are freely available and to those that require payment or other transactions. It can reference additional information e.g. community expectations on preferred linking and citation conventions, as well as purchasing details. For something that can be commercially licensed, usageInfo can provide detailed, resource-specific information about licensing options.
     * 
     * This property can be used alongside the license property which indicates license(s) applicable to some piece of content. The usageInfo property can provide information about other licensing options, e.g. acquiring commercial usage rights for an image that is also available under non-commercial creative commons licenses.
     *
     * @return {@link CreativeWork} or {@link URL}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2454">https://github.com/schemaorg/schemaorg/issues/2454</a>
     */
    @Override
    public <T> T getUsageInfo() {
        return (T) getFirst(usageInfo);
    }

    /**
     * The schema.org [[usageInfo]] property indicates further information about a [[CreativeWork]]. This property is applicable both to works that are freely available and to those that require payment or other transactions. It can reference additional information e.g. community expectations on preferred linking and citation conventions, as well as purchasing details. For something that can be commercially licensed, usageInfo can provide detailed, resource-specific information about licensing options.
     * 
     * This property can be used alongside the license property which indicates license(s) applicable to some piece of content. The usageInfo property can provide information about other licensing options, e.g. acquiring commercial usage rights for an image that is also available under non-commercial creative commons licenses.
     *
     * @param usageInfo CreativeWork value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2454">https://github.com/schemaorg/schemaorg/issues/2454</a>
     */
    @Override
    public void addUsageInfo(CreativeWork usageInfo) {
        this.usageInfo = add(this.usageInfo, usageInfo);
    }
    /**
     * The schema.org [[usageInfo]] property indicates further information about a [[CreativeWork]]. This property is applicable both to works that are freely available and to those that require payment or other transactions. It can reference additional information e.g. community expectations on preferred linking and citation conventions, as well as purchasing details. For something that can be commercially licensed, usageInfo can provide detailed, resource-specific information about licensing options.
     * 
     * This property can be used alongside the license property which indicates license(s) applicable to some piece of content. The usageInfo property can provide information about other licensing options, e.g. acquiring commercial usage rights for an image that is also available under non-commercial creative commons licenses.
     *
     * @param usageInfo URL value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2454">https://github.com/schemaorg/schemaorg/issues/2454</a>
     */
    @Override
    public void addUsageInfo(URL usageInfo) {
        this.usageInfo = add(this.usageInfo, usageInfo);
    }

    @JsonLdFieldTypes({ Organization.class, Person.class })
    private List<Object> provider;

    /**
     * The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
     *
     * @return {@link Organization} or {@link Person}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2927">https://github.com/schemaorg/schemaorg/issues/2927</a>
     */
    @Override
    public <T> List<T> getProviderList() {
        return (List<T>) provider;
    }

    /**
     * The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
     *
     * @return {@link Organization} or {@link Person}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2927">https://github.com/schemaorg/schemaorg/issues/2927</a>
     */
    @Override
    public <T> T getProvider() {
        return (T) getFirst(provider);
    }

    /**
     * The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
     *
     * @param provider Organization value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2927">https://github.com/schemaorg/schemaorg/issues/2927</a>
     */
    @Override
    public void addProvider(Organization provider) {
        this.provider = add(this.provider, provider);
    }
    /**
     * The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
     *
     * @param provider Person value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2289">https://github.com/schemaorg/schemaorg/issues/2289</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2927">https://github.com/schemaorg/schemaorg/issues/2927</a>
     */
    @Override
    public void addProvider(Person provider) {
        this.provider = add(this.provider, provider);
    }

    @JsonLdFieldTypes({ Organization.class, Person.class })
    private List<Object> sdPublisher;

    /**
     * Indicates the party responsible for generating and publishing the current structured data markup, typically in cases where the structured data is derived automatically from existing published content but published on a different site. For example, student projects and open data initiatives often re-publish existing content with more explicitly structured metadata. The
     * [[sdPublisher]] property helps make such practices more explicit.
     *
     * @return {@link Organization} or {@link Person}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1886">https://github.com/schemaorg/schemaorg/issues/1886</a>
     */
    @Override
    public <T> List<T> getSdPublisherList() {
        return (List<T>) sdPublisher;
    }

    /**
     * Indicates the party responsible for generating and publishing the current structured data markup, typically in cases where the structured data is derived automatically from existing published content but published on a different site. For example, student projects and open data initiatives often re-publish existing content with more explicitly structured metadata. The
     * [[sdPublisher]] property helps make such practices more explicit.
     *
     * @return {@link Organization} or {@link Person}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1886">https://github.com/schemaorg/schemaorg/issues/1886</a>
     */
    @Override
    public <T> T getSdPublisher() {
        return (T) getFirst(sdPublisher);
    }

    /**
     * Indicates the party responsible for generating and publishing the current structured data markup, typically in cases where the structured data is derived automatically from existing published content but published on a different site. For example, student projects and open data initiatives often re-publish existing content with more explicitly structured metadata. The
     * [[sdPublisher]] property helps make such practices more explicit.
     *
     * @param sdPublisher Organization value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1886">https://github.com/schemaorg/schemaorg/issues/1886</a>
     */
    @Override
    public void addSdPublisher(Organization sdPublisher) {
        this.sdPublisher = add(this.sdPublisher, sdPublisher);
    }
    /**
     * Indicates the party responsible for generating and publishing the current structured data markup, typically in cases where the structured data is derived automatically from existing published content but published on a different site. For example, student projects and open data initiatives often re-publish existing content with more explicitly structured metadata. The
     * [[sdPublisher]] property helps make such practices more explicit.
     *
     * @param sdPublisher Person value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1886">https://github.com/schemaorg/schemaorg/issues/1886</a>
     */
    @Override
    public void addSdPublisher(Person sdPublisher) {
        this.sdPublisher = add(this.sdPublisher, sdPublisher);
    }

    private List<Comment> comment;

    /**
     * Comments, typically from users.
     *
     * @return {@link Comment}
     */
    @Override
    public List<Comment> getCommentList() {
        return comment;
    }

    /**
     * Comments, typically from users.
     *
     * @return {@link Comment}
     */
    @Override
    public Comment getComment() {
        return getFirst(comment);
    }

    /**
     * Comments, typically from users.
     *
     * @param comment Comment value to set.
     */
    @Override
    public void addComment(Comment comment) {
        this.comment = add(this.comment, comment);
    }

    private List<Text> accessibilityFeature;

    /**
     * Content features of the resource, such as accessible media, alternatives and supported enhancements for accessibility. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityFeature-vocabulary).
     *
     * @return {@link Text}
     */
    @Override
    public List<Text> getAccessibilityFeatureList() {
        return accessibilityFeature;
    }

    /**
     * Content features of the resource, such as accessible media, alternatives and supported enhancements for accessibility. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityFeature-vocabulary).
     *
     * @return {@link Text}
     */
    @Override
    public Text getAccessibilityFeature() {
        return getFirst(accessibilityFeature);
    }

    /**
     * Content features of the resource, such as accessible media, alternatives and supported enhancements for accessibility. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityFeature-vocabulary).
     *
     * @param accessibilityFeature Text value to set.
     */
    @Override
    public void addAccessibilityFeature(Text accessibilityFeature) {
        this.accessibilityFeature = add(this.accessibilityFeature, accessibilityFeature);
    }

    private List<PublicationEvent> publication;

    /**
     * A publication event associated with the item.
     *
     * @return {@link PublicationEvent}
     */
    @Override
    public List<PublicationEvent> getPublicationList() {
        return publication;
    }

    /**
     * A publication event associated with the item.
     *
     * @return {@link PublicationEvent}
     */
    @Override
    public PublicationEvent getPublication() {
        return getFirst(publication);
    }

    /**
     * A publication event associated with the item.
     *
     * @param publication PublicationEvent value to set.
     */
    @Override
    public void addPublication(PublicationEvent publication) {
        this.publication = add(this.publication, publication);
    }

    private List<CreativeWork> translationOfWork;

    /**
     * The work that this work has been translated from. e.g. 物种起源 is a translationOf “On the Origin of Species”
     *
     * @return {@link CreativeWork}
     * @see <a href="https://bib.schema.org">https://bib.schema.org</a>
     */
    @Override
    public List<CreativeWork> getTranslationOfWorkList() {
        return translationOfWork;
    }

    /**
     * The work that this work has been translated from. e.g. 物种起源 is a translationOf “On the Origin of Species”
     *
     * @return {@link CreativeWork}
     * @see <a href="https://bib.schema.org">https://bib.schema.org</a>
     */
    @Override
    public CreativeWork getTranslationOfWork() {
        return getFirst(translationOfWork);
    }

    /**
     * The work that this work has been translated from. e.g. 物种起源 is a translationOf “On the Origin of Species”
     *
     * @param translationOfWork CreativeWork value to set.
     * @see <a href="https://bib.schema.org">https://bib.schema.org</a>
     */
    @Override
    public void addTranslationOfWork(CreativeWork translationOfWork) {
        this.translationOfWork = add(this.translationOfWork, translationOfWork);
    }

    private List<Text> interactivityType;

    /**
     * The predominant mode of learning supported by the learning resource. Acceptable values are 'active', 'expositive', or 'mixed'.
     *
     * @return {@link Text}
     */
    @Override
    public List<Text> getInteractivityTypeList() {
        return interactivityType;
    }

    /**
     * The predominant mode of learning supported by the learning resource. Acceptable values are 'active', 'expositive', or 'mixed'.
     *
     * @return {@link Text}
     */
    @Override
    public Text getInteractivityType() {
        return getFirst(interactivityType);
    }

    /**
     * The predominant mode of learning supported by the learning resource. Acceptable values are 'active', 'expositive', or 'mixed'.
     *
     * @param interactivityType Text value to set.
     */
    @Override
    public void addInteractivityType(Text interactivityType) {
        this.interactivityType = add(this.interactivityType, interactivityType);
    }

    private List<Integer> commentCount;

    /**
     * The number of comments this CreativeWork (e.g. Article, Question or Answer) has received. This is most applicable to works published in Web sites with commenting system; additional comments may exist elsewhere.
     *
     * @return {@link Integer}
     */
    @Override
    public List<Integer> getCommentCountList() {
        return commentCount;
    }

    /**
     * The number of comments this CreativeWork (e.g. Article, Question or Answer) has received. This is most applicable to works published in Web sites with commenting system; additional comments may exist elsewhere.
     *
     * @return {@link Integer}
     */
    @Override
    public Integer getCommentCount() {
        return getFirst(commentCount);
    }

    /**
     * The number of comments this CreativeWork (e.g. Article, Question or Answer) has received. This is most applicable to works published in Web sites with commenting system; additional comments may exist elsewhere.
     *
     * @param commentCount Integer value to set.
     */
    @Override
    public void addCommentCount(Integer commentCount) {
        this.commentCount = add(this.commentCount, commentCount);
    }

    private List<Text> accessMode;

    /**
     * The human sensory perceptual system or cognitive faculty through which a person may process or perceive information. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessMode-vocabulary).
     *
     * @return {@link Text}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1100">https://github.com/schemaorg/schemaorg/issues/1100</a>
     */
    @Override
    public List<Text> getAccessModeList() {
        return accessMode;
    }

    /**
     * The human sensory perceptual system or cognitive faculty through which a person may process or perceive information. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessMode-vocabulary).
     *
     * @return {@link Text}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1100">https://github.com/schemaorg/schemaorg/issues/1100</a>
     */
    @Override
    public Text getAccessMode() {
        return getFirst(accessMode);
    }

    /**
     * The human sensory perceptual system or cognitive faculty through which a person may process or perceive information. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessMode-vocabulary).
     *
     * @param accessMode Text value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1100">https://github.com/schemaorg/schemaorg/issues/1100</a>
     */
    @Override
    public void addAccessMode(Text accessMode) {
        this.accessMode = add(this.accessMode, accessMode);
    }

    private List<Duration> timeRequired;

    /**
     * Approximate or typical time it takes to work with or through this learning resource for the typical intended target audience, e.g. 'PT30M', 'PT1H25M'.
     *
     * @return {@link Duration}
     */
    @Override
    public List<Duration> getTimeRequiredList() {
        return timeRequired;
    }

    /**
     * Approximate or typical time it takes to work with or through this learning resource for the typical intended target audience, e.g. 'PT30M', 'PT1H25M'.
     *
     * @return {@link Duration}
     */
    @Override
    public Duration getTimeRequired() {
        return getFirst(timeRequired);
    }

    /**
     * Approximate or typical time it takes to work with or through this learning resource for the typical intended target audience, e.g. 'PT30M', 'PT1H25M'.
     *
     * @param timeRequired Duration value to set.
     */
    @Override
    public void addTimeRequired(Duration timeRequired) {
        this.timeRequired = add(this.timeRequired, timeRequired);
    }

    private List<Text> typicalAgeRange;

    /**
     * The typical expected age range, e.g. '7-9', '11-'.
     *
     * @return {@link Text}
     */
    @Override
    public List<Text> getTypicalAgeRangeList() {
        return typicalAgeRange;
    }

    /**
     * The typical expected age range, e.g. '7-9', '11-'.
     *
     * @return {@link Text}
     */
    @Override
    public Text getTypicalAgeRange() {
        return getFirst(typicalAgeRange);
    }

    /**
     * The typical expected age range, e.g. '7-9', '11-'.
     *
     * @param typicalAgeRange Text value to set.
     */
    @Override
    public void addTypicalAgeRange(Text typicalAgeRange) {
        this.typicalAgeRange = add(this.typicalAgeRange, typicalAgeRange);
    }

    private List<InteractionCounter> interactionStatistic;

    /**
     * The number of interactions for the CreativeWork using the WebSite or SoftwareApplication. The most specific child type of InteractionCounter should be used.
     *
     * @return {@link InteractionCounter}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2421">https://github.com/schemaorg/schemaorg/issues/2421</a>
     */
    @Override
    public List<InteractionCounter> getInteractionStatisticList() {
        return interactionStatistic;
    }

    /**
     * The number of interactions for the CreativeWork using the WebSite or SoftwareApplication. The most specific child type of InteractionCounter should be used.
     *
     * @return {@link InteractionCounter}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2421">https://github.com/schemaorg/schemaorg/issues/2421</a>
     */
    @Override
    public InteractionCounter getInteractionStatistic() {
        return getFirst(interactionStatistic);
    }

    /**
     * The number of interactions for the CreativeWork using the WebSite or SoftwareApplication. The most specific child type of InteractionCounter should be used.
     *
     * @param interactionStatistic InteractionCounter value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2421">https://github.com/schemaorg/schemaorg/issues/2421</a>
     */
    @Override
    public void addInteractionStatistic(InteractionCounter interactionStatistic) {
        this.interactionStatistic = add(this.interactionStatistic, interactionStatistic);
    }

    private List<Number> copyrightYear;

    /**
     * The year during which the claimed copyright for the CreativeWork was first asserted.
     *
     * @return {@link Number}
     */
    @Override
    public List<Number> getCopyrightYearList() {
        return copyrightYear;
    }

    /**
     * The year during which the claimed copyright for the CreativeWork was first asserted.
     *
     * @return {@link Number}
     */
    @Override
    public Number getCopyrightYear() {
        return getFirst(copyrightYear);
    }

    /**
     * The year during which the claimed copyright for the CreativeWork was first asserted.
     *
     * @param copyrightYear Number value to set.
     */
    @Override
    public void addCopyrightYear(Number copyrightYear) {
        this.copyrightYear = add(this.copyrightYear, copyrightYear);
    }

    @JsonLdFieldTypes({ CreativeWork.class, URL.class, Product.class })
    private List<Object> isBasedOn;

    /**
     * A resource from which this work is derived or from which it is a modification or adaption.
     *
     * @return {@link CreativeWork} or {@link URL} or {@link Product}
     */
    @Override
    public <T> List<T> getIsBasedOnList() {
        return (List<T>) isBasedOn;
    }

    /**
     * A resource from which this work is derived or from which it is a modification or adaption.
     *
     * @return {@link CreativeWork} or {@link URL} or {@link Product}
     */
    @Override
    public <T> T getIsBasedOn() {
        return (T) getFirst(isBasedOn);
    }

    /**
     * A resource from which this work is derived or from which it is a modification or adaption.
     *
     * @param isBasedOn CreativeWork value to set.
     */
    @Override
    public void addIsBasedOn(CreativeWork isBasedOn) {
        this.isBasedOn = add(this.isBasedOn, isBasedOn);
    }
    /**
     * A resource from which this work is derived or from which it is a modification or adaption.
     *
     * @param isBasedOn URL value to set.
     */
    @Override
    public void addIsBasedOn(URL isBasedOn) {
        this.isBasedOn = add(this.isBasedOn, isBasedOn);
    }
    /**
     * A resource from which this work is derived or from which it is a modification or adaption.
     *
     * @param isBasedOn Product value to set.
     */
    @Override
    public void addIsBasedOn(Product isBasedOn) {
        this.isBasedOn = add(this.isBasedOn, isBasedOn);
    }

    private List<CreativeWork> workExample;

    /**
     * Example/instance/realization/derivation of the concept of this creative work. eg. The paperback edition, first edition, or eBook.
     *
     * @return {@link CreativeWork}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex</a>
     */
    @Override
    public List<CreativeWork> getWorkExampleList() {
        return workExample;
    }

    /**
     * Example/instance/realization/derivation of the concept of this creative work. eg. The paperback edition, first edition, or eBook.
     *
     * @return {@link CreativeWork}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex</a>
     */
    @Override
    public CreativeWork getWorkExample() {
        return getFirst(workExample);
    }

    /**
     * Example/instance/realization/derivation of the concept of this creative work. eg. The paperback edition, first edition, or eBook.
     *
     * @param workExample CreativeWork value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex</a>
     */
    @Override
    public void addWorkExample(CreativeWork workExample) {
        this.workExample = add(this.workExample, workExample);
    }

    @JsonLdFieldTypes({ URL.class, CreativeWork.class })
    private List<Object> publishingPrinciples;

    /**
     * The publishingPrinciples property indicates (typically via [[URL]]) a document describing the editorial principles of an [[Organization]] (or individual e.g. a [[Person]] writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a [[CreativeWork]] (e.g. [[NewsArticle]]) the principles are those of the party primarily responsible for the creation of the [[CreativeWork]].
     * 
     * While such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a [[funder]]) can be expressed using schema.org terminology.
     *
     * @return {@link URL} or {@link CreativeWork}
     */
    @Override
    public <T> List<T> getPublishingPrinciplesList() {
        return (List<T>) publishingPrinciples;
    }

    /**
     * The publishingPrinciples property indicates (typically via [[URL]]) a document describing the editorial principles of an [[Organization]] (or individual e.g. a [[Person]] writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a [[CreativeWork]] (e.g. [[NewsArticle]]) the principles are those of the party primarily responsible for the creation of the [[CreativeWork]].
     * 
     * While such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a [[funder]]) can be expressed using schema.org terminology.
     *
     * @return {@link URL} or {@link CreativeWork}
     */
    @Override
    public <T> T getPublishingPrinciples() {
        return (T) getFirst(publishingPrinciples);
    }

    /**
     * The publishingPrinciples property indicates (typically via [[URL]]) a document describing the editorial principles of an [[Organization]] (or individual e.g. a [[Person]] writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a [[CreativeWork]] (e.g. [[NewsArticle]]) the principles are those of the party primarily responsible for the creation of the [[CreativeWork]].
     * 
     * While such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a [[funder]]) can be expressed using schema.org terminology.
     *
     * @param publishingPrinciples URL value to set.
     */
    @Override
    public void addPublishingPrinciples(URL publishingPrinciples) {
        this.publishingPrinciples = add(this.publishingPrinciples, publishingPrinciples);
    }
    /**
     * The publishingPrinciples property indicates (typically via [[URL]]) a document describing the editorial principles of an [[Organization]] (or individual e.g. a [[Person]] writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a [[CreativeWork]] (e.g. [[NewsArticle]]) the principles are those of the party primarily responsible for the creation of the [[CreativeWork]].
     * 
     * While such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a [[funder]]) can be expressed using schema.org terminology.
     *
     * @param publishingPrinciples CreativeWork value to set.
     */
    @Override
    public void addPublishingPrinciples(CreativeWork publishingPrinciples) {
        this.publishingPrinciples = add(this.publishingPrinciples, publishingPrinciples);
    }

    private List<URL> discussionUrl;

    /**
     * A link to the page containing the comments of the CreativeWork.
     *
     * @return {@link URL}
     */
    @Override
    public List<URL> getDiscussionUrlList() {
        return discussionUrl;
    }

    /**
     * A link to the page containing the comments of the CreativeWork.
     *
     * @return {@link URL}
     */
    @Override
    public URL getDiscussionUrl() {
        return getFirst(discussionUrl);
    }

    /**
     * A link to the page containing the comments of the CreativeWork.
     *
     * @param discussionUrl URL value to set.
     */
    @Override
    public void addDiscussionUrl(URL discussionUrl) {
        this.discussionUrl = add(this.discussionUrl, discussionUrl);
    }

    private List<PublicationEvent> releasedEvent;

    /**
     * The place and time the release was issued, expressed as a PublicationEvent.
     *
     * @return {@link PublicationEvent}
     */
    @Override
    public List<PublicationEvent> getReleasedEventList() {
        return releasedEvent;
    }

    /**
     * The place and time the release was issued, expressed as a PublicationEvent.
     *
     * @return {@link PublicationEvent}
     */
    @Override
    public PublicationEvent getReleasedEvent() {
        return getFirst(releasedEvent);
    }

    /**
     * The place and time the release was issued, expressed as a PublicationEvent.
     *
     * @param releasedEvent PublicationEvent value to set.
     */
    @Override
    public void addReleasedEvent(PublicationEvent releasedEvent) {
        this.releasedEvent = add(this.releasedEvent, releasedEvent);
    }

    @JsonLdFieldTypes({ Date.class, DateTime.class })
    private List<Object> dateCreated;

    /**
     * The date on which the CreativeWork was created or the item was added to a DataFeed.
     *
     * @return {@link Date} or {@link DateTime}
     */
    @Override
    public <T> List<T> getDateCreatedList() {
        return (List<T>) dateCreated;
    }

    /**
     * The date on which the CreativeWork was created or the item was added to a DataFeed.
     *
     * @return {@link Date} or {@link DateTime}
     */
    @Override
    public <T> T getDateCreated() {
        return (T) getFirst(dateCreated);
    }

    /**
     * The date on which the CreativeWork was created or the item was added to a DataFeed.
     *
     * @param dateCreated Date value to set.
     */
    @Override
    public void addDateCreated(Date dateCreated) {
        this.dateCreated = add(this.dateCreated, dateCreated);
    }
    /**
     * The date on which the CreativeWork was created or the item was added to a DataFeed.
     *
     * @param dateCreated DateTime value to set.
     */
    @Override
    public void addDateCreated(DateTime dateCreated) {
        this.dateCreated = add(this.dateCreated, dateCreated);
    }

    private List<CreativeWork> workTranslation;

    /**
     * A work that is a translation of the content of this work. e.g. 西遊記 has an English workTranslation “Journey to the West”,a German workTranslation “Monkeys Pilgerfahrt” and a Vietnamese  translation Tây du ký bình khảo.
     *
     * @return {@link CreativeWork}
     * @see <a href="https://bib.schema.org">https://bib.schema.org</a>
     */
    @Override
    public List<CreativeWork> getWorkTranslationList() {
        return workTranslation;
    }

    /**
     * A work that is a translation of the content of this work. e.g. 西遊記 has an English workTranslation “Journey to the West”,a German workTranslation “Monkeys Pilgerfahrt” and a Vietnamese  translation Tây du ký bình khảo.
     *
     * @return {@link CreativeWork}
     * @see <a href="https://bib.schema.org">https://bib.schema.org</a>
     */
    @Override
    public CreativeWork getWorkTranslation() {
        return getFirst(workTranslation);
    }

    /**
     * A work that is a translation of the content of this work. e.g. 西遊記 has an English workTranslation “Journey to the West”,a German workTranslation “Monkeys Pilgerfahrt” and a Vietnamese  translation Tây du ký bình khảo.
     *
     * @param workTranslation CreativeWork value to set.
     * @see <a href="https://bib.schema.org">https://bib.schema.org</a>
     */
    @Override
    public void addWorkTranslation(CreativeWork workTranslation) {
        this.workTranslation = add(this.workTranslation, workTranslation);
    }

    private List<Person> editor;

    /**
     * Specifies the Person who edited the CreativeWork.
     *
     * @return {@link Person}
     */
    @Override
    public List<Person> getEditorList() {
        return editor;
    }

    /**
     * Specifies the Person who edited the CreativeWork.
     *
     * @return {@link Person}
     */
    @Override
    public Person getEditor() {
        return getFirst(editor);
    }

    /**
     * Specifies the Person who edited the CreativeWork.
     *
     * @param editor Person value to set.
     */
    @Override
    public void addEditor(Person editor) {
        this.editor = add(this.editor, editor);
    }

    private List<Text> creditText;

    /**
     * Text that can be used to credit person(s) and/or organization(s) associated with a published Creative Work.
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2659">https://github.com/schemaorg/schemaorg/issues/2659</a>
     */
    @Override
    public List<Text> getCreditTextList() {
        return creditText;
    }

    /**
     * Text that can be used to credit person(s) and/or organization(s) associated with a published Creative Work.
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2659">https://github.com/schemaorg/schemaorg/issues/2659</a>
     */
    @Override
    public Text getCreditText() {
        return getFirst(creditText);
    }

    /**
     * Text that can be used to credit person(s) and/or organization(s) associated with a published Creative Work.
     *
     * @param creditText Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2659">https://github.com/schemaorg/schemaorg/issues/2659</a>
     */
    @Override
    public void addCreditText(Text creditText) {
        this.creditText = add(this.creditText, creditText);
    }

    private List<Event> recordedAt;

    /**
     * The Event where the CreativeWork was recorded. The CreativeWork may capture all or part of the event.
     *
     * @return {@link Event}
     */
    @Override
    public List<Event> getRecordedAtList() {
        return recordedAt;
    }

    /**
     * The Event where the CreativeWork was recorded. The CreativeWork may capture all or part of the event.
     *
     * @return {@link Event}
     */
    @Override
    public Event getRecordedAt() {
        return getFirst(recordedAt);
    }

    /**
     * The Event where the CreativeWork was recorded. The CreativeWork may capture all or part of the event.
     *
     * @param recordedAt Event value to set.
     */
    @Override
    public void addRecordedAt(Event recordedAt) {
        this.recordedAt = add(this.recordedAt, recordedAt);
    }

    @JsonLdFieldTypes({ URL.class, Text.class })
    private List<Object> editEIDR;

    /**
     * An [EIDR](https://eidr.org/) (Entertainment Identifier Registry) [[identifier]] representing a specific edit / edition for a work of film or television.
     * 
     * For example, the motion picture known as "Ghostbusters" whose [[titleEIDR]] is "10.5240/7EC7-228A-510A-053E-CBB8-J", has several edits e.g. "10.5240/1F2A-E1C5-680A-14C6-E76B-I" and "10.5240/8A35-3BEE-6497-5D12-9E4F-3".
     * 
     * Since schema.org types like [[Movie]] and [[TVEpisode]] can be used for both works and their multiple expressions, it is possible to use [[titleEIDR]] alone (for a general description), or alongside [[editEIDR]] for a more edit-specific description.
     *
     * @return {@link URL} or {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2469">https://github.com/schemaorg/schemaorg/issues/2469</a>
     */
    @Override
    public <T> List<T> getEditEIDRList() {
        return (List<T>) editEIDR;
    }

    /**
     * An [EIDR](https://eidr.org/) (Entertainment Identifier Registry) [[identifier]] representing a specific edit / edition for a work of film or television.
     * 
     * For example, the motion picture known as "Ghostbusters" whose [[titleEIDR]] is "10.5240/7EC7-228A-510A-053E-CBB8-J", has several edits e.g. "10.5240/1F2A-E1C5-680A-14C6-E76B-I" and "10.5240/8A35-3BEE-6497-5D12-9E4F-3".
     * 
     * Since schema.org types like [[Movie]] and [[TVEpisode]] can be used for both works and their multiple expressions, it is possible to use [[titleEIDR]] alone (for a general description), or alongside [[editEIDR]] for a more edit-specific description.
     *
     * @return {@link URL} or {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2469">https://github.com/schemaorg/schemaorg/issues/2469</a>
     */
    @Override
    public <T> T getEditEIDR() {
        return (T) getFirst(editEIDR);
    }

    /**
     * An [EIDR](https://eidr.org/) (Entertainment Identifier Registry) [[identifier]] representing a specific edit / edition for a work of film or television.
     * 
     * For example, the motion picture known as "Ghostbusters" whose [[titleEIDR]] is "10.5240/7EC7-228A-510A-053E-CBB8-J", has several edits e.g. "10.5240/1F2A-E1C5-680A-14C6-E76B-I" and "10.5240/8A35-3BEE-6497-5D12-9E4F-3".
     * 
     * Since schema.org types like [[Movie]] and [[TVEpisode]] can be used for both works and their multiple expressions, it is possible to use [[titleEIDR]] alone (for a general description), or alongside [[editEIDR]] for a more edit-specific description.
     *
     * @param editEIDR URL value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2469">https://github.com/schemaorg/schemaorg/issues/2469</a>
     */
    @Override
    public void addEditEIDR(URL editEIDR) {
        this.editEIDR = add(this.editEIDR, editEIDR);
    }
    /**
     * An [EIDR](https://eidr.org/) (Entertainment Identifier Registry) [[identifier]] representing a specific edit / edition for a work of film or television.
     * 
     * For example, the motion picture known as "Ghostbusters" whose [[titleEIDR]] is "10.5240/7EC7-228A-510A-053E-CBB8-J", has several edits e.g. "10.5240/1F2A-E1C5-680A-14C6-E76B-I" and "10.5240/8A35-3BEE-6497-5D12-9E4F-3".
     * 
     * Since schema.org types like [[Movie]] and [[TVEpisode]] can be used for both works and their multiple expressions, it is possible to use [[titleEIDR]] alone (for a general description), or alongside [[editEIDR]] for a more edit-specific description.
     *
     * @param editEIDR Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2469">https://github.com/schemaorg/schemaorg/issues/2469</a>
     */
    @Override
    public void addEditEIDR(Text editEIDR) {
        this.editEIDR = add(this.editEIDR, editEIDR);
    }

    @JsonLdFieldTypes({ Person.class, Organization.class })
    private List<Object> author;

    /**
     * The author of this content or rating. Please note that author is special in that HTML 5 provides a special mechanism for indicating authorship via the rel tag. That is equivalent to this and may be used interchangeably.
     *
     * @return {@link Person} or {@link Organization}
     */
    @Override
    public <T> List<T> getAuthorList() {
        return (List<T>) author;
    }

    /**
     * The author of this content or rating. Please note that author is special in that HTML 5 provides a special mechanism for indicating authorship via the rel tag. That is equivalent to this and may be used interchangeably.
     *
     * @return {@link Person} or {@link Organization}
     */
    @Override
    public <T> T getAuthor() {
        return (T) getFirst(author);
    }

    /**
     * The author of this content or rating. Please note that author is special in that HTML 5 provides a special mechanism for indicating authorship via the rel tag. That is equivalent to this and may be used interchangeably.
     *
     * @param author Person value to set.
     */
    @Override
    public void addAuthor(Person author) {
        this.author = add(this.author, author);
    }
    /**
     * The author of this content or rating. Please note that author is special in that HTML 5 provides a special mechanism for indicating authorship via the rel tag. That is equivalent to this and may be used interchangeably.
     *
     * @param author Organization value to set.
     */
    @Override
    public void addAuthor(Organization author) {
        this.author = add(this.author, author);
    }

    @JsonLdFieldTypes({ DateTime.class, Date.class })
    private List<Object> dateModified;

    /**
     * The date on which the CreativeWork was most recently modified or when the item's entry was modified within a DataFeed.
     *
     * @return {@link DateTime} or {@link Date}
     */
    @Override
    public <T> List<T> getDateModifiedList() {
        return (List<T>) dateModified;
    }

    /**
     * The date on which the CreativeWork was most recently modified or when the item's entry was modified within a DataFeed.
     *
     * @return {@link DateTime} or {@link Date}
     */
    @Override
    public <T> T getDateModified() {
        return (T) getFirst(dateModified);
    }

    /**
     * The date on which the CreativeWork was most recently modified or when the item's entry was modified within a DataFeed.
     *
     * @param dateModified DateTime value to set.
     */
    @Override
    public void addDateModified(DateTime dateModified) {
        this.dateModified = add(this.dateModified, dateModified);
    }
    /**
     * The date on which the CreativeWork was most recently modified or when the item's entry was modified within a DataFeed.
     *
     * @param dateModified Date value to set.
     */
    @Override
    public void addDateModified(Date dateModified) {
        this.dateModified = add(this.dateModified, dateModified);
    }

    @JsonLdFieldTypes({ Organization.class, Person.class })
    private List<Object> sponsor;

    /**
     * A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.
     *
     * @return {@link Organization} or {@link Person}
     */
    @Override
    public <T> List<T> getSponsorList() {
        return (List<T>) sponsor;
    }

    /**
     * A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.
     *
     * @return {@link Organization} or {@link Person}
     */
    @Override
    public <T> T getSponsor() {
        return (T) getFirst(sponsor);
    }

    /**
     * A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.
     *
     * @param sponsor Organization value to set.
     */
    @Override
    public void addSponsor(Organization sponsor) {
        this.sponsor = add(this.sponsor, sponsor);
    }
    /**
     * A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.
     *
     * @param sponsor Person value to set.
     */
    @Override
    public void addSponsor(Person sponsor) {
        this.sponsor = add(this.sponsor, sponsor);
    }

    private List<Text> accessibilitySummary;

    /**
     * A human-readable summary of specific accessibility features or deficiencies, consistent with the other accessibility metadata but expressing subtleties such as "short descriptions are present but long descriptions will be needed for non-visual users" or "short descriptions are present and no long descriptions are needed."
     *
     * @return {@link Text}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1100">https://github.com/schemaorg/schemaorg/issues/1100</a>
     */
    @Override
    public List<Text> getAccessibilitySummaryList() {
        return accessibilitySummary;
    }

    /**
     * A human-readable summary of specific accessibility features or deficiencies, consistent with the other accessibility metadata but expressing subtleties such as "short descriptions are present but long descriptions will be needed for non-visual users" or "short descriptions are present and no long descriptions are needed."
     *
     * @return {@link Text}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1100">https://github.com/schemaorg/schemaorg/issues/1100</a>
     */
    @Override
    public Text getAccessibilitySummary() {
        return getFirst(accessibilitySummary);
    }

    /**
     * A human-readable summary of specific accessibility features or deficiencies, consistent with the other accessibility metadata but expressing subtleties such as "short descriptions are present but long descriptions will be needed for non-visual users" or "short descriptions are present and no long descriptions are needed."
     *
     * @param accessibilitySummary Text value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1100">https://github.com/schemaorg/schemaorg/issues/1100</a>
     */
    @Override
    public void addAccessibilitySummary(Text accessibilitySummary) {
        this.accessibilitySummary = add(this.accessibilitySummary, accessibilitySummary);
    }

    @JsonLdFieldTypes({ Text.class, URL.class })
    private List<Object> encodingFormat;

    /**
     * Media type typically expressed using a MIME format (see [IANA site](http://www.iana.org/assignments/media-types/media-types.xhtml) and [MDN reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)) e.g. application/zip for a SoftwareApplication binary, audio/mpeg for .mp3 etc.).
     * 
     * In cases where a [[CreativeWork]] has several media type representations, [[encoding]] can be used to indicate each [[MediaObject]] alongside particular [[encodingFormat]] information.
     * 
     * Unregistered or niche encoding and file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia/Wikidata entry.
     *
     * @return {@link Text} or {@link URL}
     */
    @Override
    public <T> List<T> getEncodingFormatList() {
        return (List<T>) encodingFormat;
    }

    /**
     * Media type typically expressed using a MIME format (see [IANA site](http://www.iana.org/assignments/media-types/media-types.xhtml) and [MDN reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)) e.g. application/zip for a SoftwareApplication binary, audio/mpeg for .mp3 etc.).
     * 
     * In cases where a [[CreativeWork]] has several media type representations, [[encoding]] can be used to indicate each [[MediaObject]] alongside particular [[encodingFormat]] information.
     * 
     * Unregistered or niche encoding and file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia/Wikidata entry.
     *
     * @return {@link Text} or {@link URL}
     */
    @Override
    public <T> T getEncodingFormat() {
        return (T) getFirst(encodingFormat);
    }

    /**
     * Media type typically expressed using a MIME format (see [IANA site](http://www.iana.org/assignments/media-types/media-types.xhtml) and [MDN reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)) e.g. application/zip for a SoftwareApplication binary, audio/mpeg for .mp3 etc.).
     * 
     * In cases where a [[CreativeWork]] has several media type representations, [[encoding]] can be used to indicate each [[MediaObject]] alongside particular [[encodingFormat]] information.
     * 
     * Unregistered or niche encoding and file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia/Wikidata entry.
     *
     * @param encodingFormat Text value to set.
     */
    @Override
    public void addEncodingFormat(Text encodingFormat) {
        this.encodingFormat = add(this.encodingFormat, encodingFormat);
    }
    /**
     * Media type typically expressed using a MIME format (see [IANA site](http://www.iana.org/assignments/media-types/media-types.xhtml) and [MDN reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)) e.g. application/zip for a SoftwareApplication binary, audio/mpeg for .mp3 etc.).
     * 
     * In cases where a [[CreativeWork]] has several media type representations, [[encoding]] can be used to indicate each [[MediaObject]] alongside particular [[encodingFormat]] information.
     * 
     * Unregistered or niche encoding and file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia/Wikidata entry.
     *
     * @param encodingFormat URL value to set.
     */
    @Override
    public void addEncodingFormat(URL encodingFormat) {
        this.encodingFormat = add(this.encodingFormat, encodingFormat);
    }

    @JsonLdFieldTypes({ Person.class, Organization.class })
    private List<Object> maintainer;

    /**
     * A maintainer of a [[Dataset]], software package ([[SoftwareApplication]]), or other [[Project]]. A maintainer is a [[Person]] or [[Organization]] that manages contributions to, and/or publication of, some (typically complex) artifact. It is common for distributions of software and data to be based on "upstream" sources. When [[maintainer]] is applied to a specific version of something e.g. a particular version or packaging of a [[Dataset]], it is always  possible that the upstream source has a different maintainer. The [[isBasedOn]] property can be used to indicate such relationships between datasets to make the different maintenance roles clear. Similarly in the case of software, a package may have dedicated maintainers working on integration into software distributions such as Ubuntu, as well as upstream maintainers of the underlying work.
     *       
     *
     * @return {@link Person} or {@link Organization}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2311">https://github.com/schemaorg/schemaorg/issues/2311</a>
     */
    @Override
    public <T> List<T> getMaintainerList() {
        return (List<T>) maintainer;
    }

    /**
     * A maintainer of a [[Dataset]], software package ([[SoftwareApplication]]), or other [[Project]]. A maintainer is a [[Person]] or [[Organization]] that manages contributions to, and/or publication of, some (typically complex) artifact. It is common for distributions of software and data to be based on "upstream" sources. When [[maintainer]] is applied to a specific version of something e.g. a particular version or packaging of a [[Dataset]], it is always  possible that the upstream source has a different maintainer. The [[isBasedOn]] property can be used to indicate such relationships between datasets to make the different maintenance roles clear. Similarly in the case of software, a package may have dedicated maintainers working on integration into software distributions such as Ubuntu, as well as upstream maintainers of the underlying work.
     *       
     *
     * @return {@link Person} or {@link Organization}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2311">https://github.com/schemaorg/schemaorg/issues/2311</a>
     */
    @Override
    public <T> T getMaintainer() {
        return (T) getFirst(maintainer);
    }

    /**
     * A maintainer of a [[Dataset]], software package ([[SoftwareApplication]]), or other [[Project]]. A maintainer is a [[Person]] or [[Organization]] that manages contributions to, and/or publication of, some (typically complex) artifact. It is common for distributions of software and data to be based on "upstream" sources. When [[maintainer]] is applied to a specific version of something e.g. a particular version or packaging of a [[Dataset]], it is always  possible that the upstream source has a different maintainer. The [[isBasedOn]] property can be used to indicate such relationships between datasets to make the different maintenance roles clear. Similarly in the case of software, a package may have dedicated maintainers working on integration into software distributions such as Ubuntu, as well as upstream maintainers of the underlying work.
     *       
     *
     * @param maintainer Person value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2311">https://github.com/schemaorg/schemaorg/issues/2311</a>
     */
    @Override
    public void addMaintainer(Person maintainer) {
        this.maintainer = add(this.maintainer, maintainer);
    }
    /**
     * A maintainer of a [[Dataset]], software package ([[SoftwareApplication]]), or other [[Project]]. A maintainer is a [[Person]] or [[Organization]] that manages contributions to, and/or publication of, some (typically complex) artifact. It is common for distributions of software and data to be based on "upstream" sources. When [[maintainer]] is applied to a specific version of something e.g. a particular version or packaging of a [[Dataset]], it is always  possible that the upstream source has a different maintainer. The [[isBasedOn]] property can be used to indicate such relationships between datasets to make the different maintenance roles clear. Similarly in the case of software, a package may have dedicated maintainers working on integration into software distributions such as Ubuntu, as well as upstream maintainers of the underlying work.
     *       
     *
     * @param maintainer Organization value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2311">https://github.com/schemaorg/schemaorg/issues/2311</a>
     */
    @Override
    public void addMaintainer(Organization maintainer) {
        this.maintainer = add(this.maintainer, maintainer);
    }

    private List<AlignmentObject> educationalAlignment;

    /**
     * An alignment to an established educational framework.
     * 
     * This property should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
     *
     * @return {@link AlignmentObject}
     */
    @Override
    public List<AlignmentObject> getEducationalAlignmentList() {
        return educationalAlignment;
    }

    /**
     * An alignment to an established educational framework.
     * 
     * This property should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
     *
     * @return {@link AlignmentObject}
     */
    @Override
    public AlignmentObject getEducationalAlignment() {
        return getFirst(educationalAlignment);
    }

    /**
     * An alignment to an established educational framework.
     * 
     * This property should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
     *
     * @param educationalAlignment AlignmentObject value to set.
     */
    @Override
    public void addEducationalAlignment(AlignmentObject educationalAlignment) {
        this.educationalAlignment = add(this.educationalAlignment, educationalAlignment);
    }

    @JsonLdFieldTypes({ CreativeWork.class, URL.class })
    private List<Object> acquireLicensePage;

    /**
     * Indicates a page documenting how licenses can be purchased or otherwise acquired, for the current item.
     *
     * @return {@link CreativeWork} or {@link URL}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2454">https://github.com/schemaorg/schemaorg/issues/2454</a>
     */
    @Override
    public <T> List<T> getAcquireLicensePageList() {
        return (List<T>) acquireLicensePage;
    }

    /**
     * Indicates a page documenting how licenses can be purchased or otherwise acquired, for the current item.
     *
     * @return {@link CreativeWork} or {@link URL}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2454">https://github.com/schemaorg/schemaorg/issues/2454</a>
     */
    @Override
    public <T> T getAcquireLicensePage() {
        return (T) getFirst(acquireLicensePage);
    }

    /**
     * Indicates a page documenting how licenses can be purchased or otherwise acquired, for the current item.
     *
     * @param acquireLicensePage CreativeWork value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2454">https://github.com/schemaorg/schemaorg/issues/2454</a>
     */
    @Override
    public void addAcquireLicensePage(CreativeWork acquireLicensePage) {
        this.acquireLicensePage = add(this.acquireLicensePage, acquireLicensePage);
    }
    /**
     * Indicates a page documenting how licenses can be purchased or otherwise acquired, for the current item.
     *
     * @param acquireLicensePage URL value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2454">https://github.com/schemaorg/schemaorg/issues/2454</a>
     */
    @Override
    public void addAcquireLicensePage(URL acquireLicensePage) {
        this.acquireLicensePage = add(this.acquireLicensePage, acquireLicensePage);
    }

    private List<Boolean> isAccessibleForFree;

    /**
     * A flag to signal that the item, event, or place is accessible for free.
     *
     * @return {@link Boolean}
     */
    @Override
    public List<Boolean> getIsAccessibleForFreeList() {
        return isAccessibleForFree;
    }

    /**
     * A flag to signal that the item, event, or place is accessible for free.
     *
     * @return {@link Boolean}
     */
    @Override
    public Boolean getIsAccessibleForFree() {
        return getFirst(isAccessibleForFree);
    }

    /**
     * A flag to signal that the item, event, or place is accessible for free.
     *
     * @param isAccessibleForFree Boolean value to set.
     */
    @Override
    public void addIsAccessibleForFree(Boolean isAccessibleForFree) {
        this.isAccessibleForFree = add(this.isAccessibleForFree, isAccessibleForFree);
    }

    @JsonLdFieldTypes({ Date.class, DateTime.class })
    private List<Object> datePublished;

    /**
     * Date of first broadcast/publication.
     *
     * @return {@link Date} or {@link DateTime}
     */
    @Override
    public <T> List<T> getDatePublishedList() {
        return (List<T>) datePublished;
    }

    /**
     * Date of first broadcast/publication.
     *
     * @return {@link Date} or {@link DateTime}
     */
    @Override
    public <T> T getDatePublished() {
        return (T) getFirst(datePublished);
    }

    /**
     * Date of first broadcast/publication.
     *
     * @param datePublished Date value to set.
     */
    @Override
    public void addDatePublished(Date datePublished) {
        this.datePublished = add(this.datePublished, datePublished);
    }
    /**
     * Date of first broadcast/publication.
     *
     * @param datePublished DateTime value to set.
     */
    @Override
    public void addDatePublished(DateTime datePublished) {
        this.datePublished = add(this.datePublished, datePublished);
    }

    private List<Place> spatialCoverage;

    /**
     * The spatialCoverage of a CreativeWork indicates the place(s) which are the focus of the content. It is a subproperty of
     *       contentLocation intended primarily for more technical and detailed materials. For example with a Dataset, it indicates
     *       areas that the dataset describes: a dataset of New York weather would have spatialCoverage which was the place: the state of New York.
     *
     * @return {@link Place}
     */
    @Override
    public List<Place> getSpatialCoverageList() {
        return spatialCoverage;
    }

    /**
     * The spatialCoverage of a CreativeWork indicates the place(s) which are the focus of the content. It is a subproperty of
     *       contentLocation intended primarily for more technical and detailed materials. For example with a Dataset, it indicates
     *       areas that the dataset describes: a dataset of New York weather would have spatialCoverage which was the place: the state of New York.
     *
     * @return {@link Place}
     */
    @Override
    public Place getSpatialCoverage() {
        return getFirst(spatialCoverage);
    }

    /**
     * The spatialCoverage of a CreativeWork indicates the place(s) which are the focus of the content. It is a subproperty of
     *       contentLocation intended primarily for more technical and detailed materials. For example with a Dataset, it indicates
     *       areas that the dataset describes: a dataset of New York weather would have spatialCoverage which was the place: the state of New York.
     *
     * @param spatialCoverage Place value to set.
     */
    @Override
    public void addSpatialCoverage(Place spatialCoverage) {
        this.spatialCoverage = add(this.spatialCoverage, spatialCoverage);
    }

    @JsonLdFieldTypes({ CreativeWork.class, URL.class })
    private List<Object> sdLicense;

    /**
     * A license document that applies to this structured data, typically indicated by URL.
     *
     * @return {@link CreativeWork} or {@link URL}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1886">https://github.com/schemaorg/schemaorg/issues/1886</a>
     */
    @Override
    public <T> List<T> getSdLicenseList() {
        return (List<T>) sdLicense;
    }

    /**
     * A license document that applies to this structured data, typically indicated by URL.
     *
     * @return {@link CreativeWork} or {@link URL}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1886">https://github.com/schemaorg/schemaorg/issues/1886</a>
     */
    @Override
    public <T> T getSdLicense() {
        return (T) getFirst(sdLicense);
    }

    /**
     * A license document that applies to this structured data, typically indicated by URL.
     *
     * @param sdLicense CreativeWork value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1886">https://github.com/schemaorg/schemaorg/issues/1886</a>
     */
    @Override
    public void addSdLicense(CreativeWork sdLicense) {
        this.sdLicense = add(this.sdLicense, sdLicense);
    }
    /**
     * A license document that applies to this structured data, typically indicated by URL.
     *
     * @param sdLicense URL value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1886">https://github.com/schemaorg/schemaorg/issues/1886</a>
     */
    @Override
    public void addSdLicense(URL sdLicense) {
        this.sdLicense = add(this.sdLicense, sdLicense);
    }

    private List<Text> conditionsOfAccess;

    /**
     * Conditions that affect the availability of, or method(s) of access to, an item. Typically used for real world items such as an [[ArchiveComponent]] held by an [[ArchiveOrganization]]. This property is not suitable for use as a general Web access control mechanism. It is expressed only in natural language.<br/><br/>For example "Available by appointment from the Reading Room" or "Accessible only from logged-in accounts ". 
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2173">https://github.com/schemaorg/schemaorg/issues/2173</a>
     */
    @Override
    public List<Text> getConditionsOfAccessList() {
        return conditionsOfAccess;
    }

    /**
     * Conditions that affect the availability of, or method(s) of access to, an item. Typically used for real world items such as an [[ArchiveComponent]] held by an [[ArchiveOrganization]]. This property is not suitable for use as a general Web access control mechanism. It is expressed only in natural language.<br/><br/>For example "Available by appointment from the Reading Room" or "Accessible only from logged-in accounts ". 
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2173">https://github.com/schemaorg/schemaorg/issues/2173</a>
     */
    @Override
    public Text getConditionsOfAccess() {
        return getFirst(conditionsOfAccess);
    }

    /**
     * Conditions that affect the availability of, or method(s) of access to, an item. Typically used for real world items such as an [[ArchiveComponent]] held by an [[ArchiveOrganization]]. This property is not suitable for use as a general Web access control mechanism. It is expressed only in natural language.<br/><br/>For example "Available by appointment from the Reading Room" or "Accessible only from logged-in accounts ". 
     *
     * @param conditionsOfAccess Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2173">https://github.com/schemaorg/schemaorg/issues/2173</a>
     */
    @Override
    public void addConditionsOfAccess(Text conditionsOfAccess) {
        this.conditionsOfAccess = add(this.conditionsOfAccess, conditionsOfAccess);
    }

    @JsonLdFieldTypes({ URL.class, Text.class, CorrectionComment.class })
    private List<Object> correction;

    /**
     * Indicates a correction to a [[CreativeWork]], either via a [[CorrectionComment]], textually or in another document.
     *
     * @return {@link URL} or {@link Text} or {@link CorrectionComment}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP">https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1950">https://github.com/schemaorg/schemaorg/issues/1950</a>
     */
    @Override
    public <T> List<T> getCorrectionList() {
        return (List<T>) correction;
    }

    /**
     * Indicates a correction to a [[CreativeWork]], either via a [[CorrectionComment]], textually or in another document.
     *
     * @return {@link URL} or {@link Text} or {@link CorrectionComment}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP">https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1950">https://github.com/schemaorg/schemaorg/issues/1950</a>
     */
    @Override
    public <T> T getCorrection() {
        return (T) getFirst(correction);
    }

    /**
     * Indicates a correction to a [[CreativeWork]], either via a [[CorrectionComment]], textually or in another document.
     *
     * @param correction URL value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP">https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1950">https://github.com/schemaorg/schemaorg/issues/1950</a>
     */
    @Override
    public void addCorrection(URL correction) {
        this.correction = add(this.correction, correction);
    }
    /**
     * Indicates a correction to a [[CreativeWork]], either via a [[CorrectionComment]], textually or in another document.
     *
     * @param correction Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP">https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1950">https://github.com/schemaorg/schemaorg/issues/1950</a>
     */
    @Override
    public void addCorrection(Text correction) {
        this.correction = add(this.correction, correction);
    }
    /**
     * Indicates a correction to a [[CreativeWork]], either via a [[CorrectionComment]], textually or in another document.
     *
     * @param correction CorrectionComment value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP">https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1950">https://github.com/schemaorg/schemaorg/issues/1950</a>
     */
    @Override
    public void addCorrection(CorrectionComment correction) {
        this.correction = add(this.correction, correction);
    }

    @JsonLdFieldTypes({ Text.class, Rating.class })
    private List<Object> contentRating;

    /**
     * Official rating of a piece of content&#x2014;for example,'MPAA PG-13'.
     *
     * @return {@link Text} or {@link Rating}
     */
    @Override
    public <T> List<T> getContentRatingList() {
        return (List<T>) contentRating;
    }

    /**
     * Official rating of a piece of content&#x2014;for example,'MPAA PG-13'.
     *
     * @return {@link Text} or {@link Rating}
     */
    @Override
    public <T> T getContentRating() {
        return (T) getFirst(contentRating);
    }

    /**
     * Official rating of a piece of content&#x2014;for example,'MPAA PG-13'.
     *
     * @param contentRating Text value to set.
     */
    @Override
    public void addContentRating(Text contentRating) {
        this.contentRating = add(this.contentRating, contentRating);
    }
    /**
     * Official rating of a piece of content&#x2014;for example,'MPAA PG-13'.
     *
     * @param contentRating Rating value to set.
     */
    @Override
    public void addContentRating(Rating contentRating) {
        this.contentRating = add(this.contentRating, contentRating);
    }

    @JsonLdFieldTypes({ URL.class, CreativeWork.class })
    private List<Object> isPartOf;

    /**
     * Indicates an item or CreativeWork that this item, or CreativeWork (in some sense), is part of.
     *
     * @return {@link URL} or {@link CreativeWork}
     */
    @Override
    public <T> List<T> getIsPartOfList() {
        return (List<T>) isPartOf;
    }

    /**
     * Indicates an item or CreativeWork that this item, or CreativeWork (in some sense), is part of.
     *
     * @return {@link URL} or {@link CreativeWork}
     */
    @Override
    public <T> T getIsPartOf() {
        return (T) getFirst(isPartOf);
    }

    /**
     * Indicates an item or CreativeWork that this item, or CreativeWork (in some sense), is part of.
     *
     * @param isPartOf URL value to set.
     */
    @Override
    public void addIsPartOf(URL isPartOf) {
        this.isPartOf = add(this.isPartOf, isPartOf);
    }
    /**
     * Indicates an item or CreativeWork that this item, or CreativeWork (in some sense), is part of.
     *
     * @param isPartOf CreativeWork value to set.
     */
    @Override
    public void addIsPartOf(CreativeWork isPartOf) {
        this.isPartOf = add(this.isPartOf, isPartOf);
    }

    @JsonLdFieldTypes({ DateTime.class, Text.class })
    private List<Object> temporal;

    /**
     * The "temporal" property can be used in cases where more specific properties
     * (e.g. [[temporalCoverage]], [[dateCreated]], [[dateModified]], [[datePublished]]) are not known to be appropriate.
     *
     * @return {@link DateTime} or {@link Text}
     */
    @Override
    public <T> List<T> getTemporalList() {
        return (List<T>) temporal;
    }

    /**
     * The "temporal" property can be used in cases where more specific properties
     * (e.g. [[temporalCoverage]], [[dateCreated]], [[dateModified]], [[datePublished]]) are not known to be appropriate.
     *
     * @return {@link DateTime} or {@link Text}
     */
    @Override
    public <T> T getTemporal() {
        return (T) getFirst(temporal);
    }

    /**
     * The "temporal" property can be used in cases where more specific properties
     * (e.g. [[temporalCoverage]], [[dateCreated]], [[dateModified]], [[datePublished]]) are not known to be appropriate.
     *
     * @param temporal DateTime value to set.
     */
    @Override
    public void addTemporal(DateTime temporal) {
        this.temporal = add(this.temporal, temporal);
    }
    /**
     * The "temporal" property can be used in cases where more specific properties
     * (e.g. [[temporalCoverage]], [[dateCreated]], [[dateModified]], [[datePublished]]) are not known to be appropriate.
     *
     * @param temporal Text value to set.
     */
    @Override
    public void addTemporal(Text temporal) {
        this.temporal = add(this.temporal, temporal);
    }

    private List<URL> thumbnailUrl;

    /**
     * A thumbnail image relevant to the Thing.
     *
     * @return {@link URL}
     */
    @Override
    public List<URL> getThumbnailUrlList() {
        return thumbnailUrl;
    }

    /**
     * A thumbnail image relevant to the Thing.
     *
     * @return {@link URL}
     */
    @Override
    public URL getThumbnailUrl() {
        return getFirst(thumbnailUrl);
    }

    /**
     * A thumbnail image relevant to the Thing.
     *
     * @param thumbnailUrl URL value to set.
     */
    @Override
    public void addThumbnailUrl(URL thumbnailUrl) {
        this.thumbnailUrl = add(this.thumbnailUrl, thumbnailUrl);
    }

    @JsonLdFieldTypes({ Text.class, Language.class })
    private List<Object> inLanguage;

    /**
     * The language of the content or performance or used in an action. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[availableLanguage]].
     *
     * @return {@link Text} or {@link Language}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2382">https://github.com/schemaorg/schemaorg/issues/2382</a>
     */
    @Override
    public <T> List<T> getInLanguageList() {
        return (List<T>) inLanguage;
    }

    /**
     * The language of the content or performance or used in an action. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[availableLanguage]].
     *
     * @return {@link Text} or {@link Language}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2382">https://github.com/schemaorg/schemaorg/issues/2382</a>
     */
    @Override
    public <T> T getInLanguage() {
        return (T) getFirst(inLanguage);
    }

    /**
     * The language of the content or performance or used in an action. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[availableLanguage]].
     *
     * @param inLanguage Text value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2382">https://github.com/schemaorg/schemaorg/issues/2382</a>
     */
    @Override
    public void addInLanguage(Text inLanguage) {
        this.inLanguage = add(this.inLanguage, inLanguage);
    }
    /**
     * The language of the content or performance or used in an action. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[availableLanguage]].
     *
     * @param inLanguage Language value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2382">https://github.com/schemaorg/schemaorg/issues/2382</a>
     */
    @Override
    public void addInLanguage(Language inLanguage) {
        this.inLanguage = add(this.inLanguage, inLanguage);
    }

    @JsonLdFieldTypes({ URL.class, CreativeWork.class })
    private List<Object> license;

    /**
     * A license document that applies to this content, typically indicated by URL.
     *
     * @return {@link URL} or {@link CreativeWork}
     */
    @Override
    public <T> List<T> getLicenseList() {
        return (List<T>) license;
    }

    /**
     * A license document that applies to this content, typically indicated by URL.
     *
     * @return {@link URL} or {@link CreativeWork}
     */
    @Override
    public <T> T getLicense() {
        return (T) getFirst(license);
    }

    /**
     * A license document that applies to this content, typically indicated by URL.
     *
     * @param license URL value to set.
     */
    @Override
    public void addLicense(URL license) {
        this.license = add(this.license, license);
    }
    /**
     * A license document that applies to this content, typically indicated by URL.
     *
     * @param license CreativeWork value to set.
     */
    @Override
    public void addLicense(CreativeWork license) {
        this.license = add(this.license, license);
    }

    @JsonLdFieldTypes({ Organization.class, Person.class })
    private List<Object> creator;

    /**
     * The creator/author of this CreativeWork. This is the same as the Author property for CreativeWork.
     *
     * @return {@link Organization} or {@link Person}
     */
    @Override
    public <T> List<T> getCreatorList() {
        return (List<T>) creator;
    }

    /**
     * The creator/author of this CreativeWork. This is the same as the Author property for CreativeWork.
     *
     * @return {@link Organization} or {@link Person}
     */
    @Override
    public <T> T getCreator() {
        return (T) getFirst(creator);
    }

    /**
     * The creator/author of this CreativeWork. This is the same as the Author property for CreativeWork.
     *
     * @param creator Organization value to set.
     */
    @Override
    public void addCreator(Organization creator) {
        this.creator = add(this.creator, creator);
    }
    /**
     * The creator/author of this CreativeWork. This is the same as the Author property for CreativeWork.
     *
     * @param creator Person value to set.
     */
    @Override
    public void addCreator(Person creator) {
        this.creator = add(this.creator, creator);
    }

    private List<Thing> about;

    /**
     * The subject matter of the content.
     *
     * @return {@link Thing}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public List<Thing> getAboutList() {
        return about;
    }

    /**
     * The subject matter of the content.
     *
     * @return {@link Thing}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public Thing getAbout() {
        return getFirst(about);
    }

    /**
     * The subject matter of the content.
     *
     * @param about Thing value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1670">https://github.com/schemaorg/schemaorg/issues/1670</a>
     */
    @Override
    public void addAbout(Thing about) {
        this.about = add(this.about, about);
    }

    private List<Text> headline;

    /**
     * Headline of the article.
     *
     * @return {@link Text}
     */
    @Override
    public List<Text> getHeadlineList() {
        return headline;
    }

    /**
     * Headline of the article.
     *
     * @return {@link Text}
     */
    @Override
    public Text getHeadline() {
        return getFirst(headline);
    }

    /**
     * Headline of the article.
     *
     * @param headline Text value to set.
     */
    @Override
    public void addHeadline(Text headline) {
        this.headline = add(this.headline, headline);
    }

    private List<Text> accessibilityAPI;

    /**
     * Indicates that the resource is compatible with the referenced accessibility API. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityAPI-vocabulary).
     *
     * @return {@link Text}
     */
    @Override
    public List<Text> getAccessibilityAPIList() {
        return accessibilityAPI;
    }

    /**
     * Indicates that the resource is compatible with the referenced accessibility API. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityAPI-vocabulary).
     *
     * @return {@link Text}
     */
    @Override
    public Text getAccessibilityAPI() {
        return getFirst(accessibilityAPI);
    }

    /**
     * Indicates that the resource is compatible with the referenced accessibility API. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityAPI-vocabulary).
     *
     * @param accessibilityAPI Text value to set.
     */
    @Override
    public void addAccessibilityAPI(Text accessibilityAPI) {
        this.accessibilityAPI = add(this.accessibilityAPI, accessibilityAPI);
    }

    private List<Organization> publisherImprint;

    /**
     * The publishing division which published the comic.
     *
     * @return {@link Organization}
     * @see <a href="https://bib.schema.org">https://bib.schema.org</a>
     */
    @Override
    public List<Organization> getPublisherImprintList() {
        return publisherImprint;
    }

    /**
     * The publishing division which published the comic.
     *
     * @return {@link Organization}
     * @see <a href="https://bib.schema.org">https://bib.schema.org</a>
     */
    @Override
    public Organization getPublisherImprint() {
        return getFirst(publisherImprint);
    }

    /**
     * The publishing division which published the comic.
     *
     * @param publisherImprint Organization value to set.
     * @see <a href="https://bib.schema.org">https://bib.schema.org</a>
     */
    @Override
    public void addPublisherImprint(Organization publisherImprint) {
        this.publisherImprint = add(this.publisherImprint, publisherImprint);
    }

    @JsonLdFieldTypes({ URL.class, CreativeWork.class, Product.class })
    private List<Object> isBasedOnUrl;

    /**
     * A resource that was used in the creation of this resource. This term can be repeated for multiple sources. For example, http://example.com/great-multiplication-intro.html.
     *
     * @return {@link URL} or {@link CreativeWork} or {@link Product}
     */
    @Override
    public <T> List<T> getIsBasedOnUrlList() {
        return (List<T>) isBasedOnUrl;
    }

    /**
     * A resource that was used in the creation of this resource. This term can be repeated for multiple sources. For example, http://example.com/great-multiplication-intro.html.
     *
     * @return {@link URL} or {@link CreativeWork} or {@link Product}
     */
    @Override
    public <T> T getIsBasedOnUrl() {
        return (T) getFirst(isBasedOnUrl);
    }

    /**
     * A resource that was used in the creation of this resource. This term can be repeated for multiple sources. For example, http://example.com/great-multiplication-intro.html.
     *
     * @param isBasedOnUrl URL value to set.
     */
    @Override
    public void addIsBasedOnUrl(URL isBasedOnUrl) {
        this.isBasedOnUrl = add(this.isBasedOnUrl, isBasedOnUrl);
    }
    /**
     * A resource that was used in the creation of this resource. This term can be repeated for multiple sources. For example, http://example.com/great-multiplication-intro.html.
     *
     * @param isBasedOnUrl CreativeWork value to set.
     */
    @Override
    public void addIsBasedOnUrl(CreativeWork isBasedOnUrl) {
        this.isBasedOnUrl = add(this.isBasedOnUrl, isBasedOnUrl);
    }
    /**
     * A resource that was used in the creation of this resource. This term can be repeated for multiple sources. For example, http://example.com/great-multiplication-intro.html.
     *
     * @param isBasedOnUrl Product value to set.
     */
    @Override
    public void addIsBasedOnUrl(Product isBasedOnUrl) {
        this.isBasedOnUrl = add(this.isBasedOnUrl, isBasedOnUrl);
    }

    private List<MediaObject> encodings;

    /**
     * A media object that encodes this CreativeWork.
     *
     * @return {@link MediaObject}
     */
    @Override
    public List<MediaObject> getEncodingsList() {
        return encodings;
    }

    /**
     * A media object that encodes this CreativeWork.
     *
     * @return {@link MediaObject}
     */
    @Override
    public MediaObject getEncodings() {
        return getFirst(encodings);
    }

    /**
     * A media object that encodes this CreativeWork.
     *
     * @param encodings MediaObject value to set.
     */
    @Override
    public void addEncodings(MediaObject encodings) {
        this.encodings = add(this.encodings, encodings);
    }

    private List<Claim> interpretedAsClaim;

    /**
     * Used to indicate a specific claim contained, implied, translated or refined from the content of a [[MediaObject]] or other [[CreativeWork]]. The interpreting party can be indicated using [[claimInterpreter]].
     *
     * @return {@link Claim}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2450">https://github.com/schemaorg/schemaorg/issues/2450</a>
     */
    @Override
    public List<Claim> getInterpretedAsClaimList() {
        return interpretedAsClaim;
    }

    /**
     * Used to indicate a specific claim contained, implied, translated or refined from the content of a [[MediaObject]] or other [[CreativeWork]]. The interpreting party can be indicated using [[claimInterpreter]].
     *
     * @return {@link Claim}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2450">https://github.com/schemaorg/schemaorg/issues/2450</a>
     */
    @Override
    public Claim getInterpretedAsClaim() {
        return getFirst(interpretedAsClaim);
    }

    /**
     * Used to indicate a specific claim contained, implied, translated or refined from the content of a [[MediaObject]] or other [[CreativeWork]]. The interpreting party can be indicated using [[claimInterpreter]].
     *
     * @param interpretedAsClaim Claim value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2450">https://github.com/schemaorg/schemaorg/issues/2450</a>
     */
    @Override
    public void addInterpretedAsClaim(Claim interpretedAsClaim) {
        this.interpretedAsClaim = add(this.interpretedAsClaim, interpretedAsClaim);
    }

    private List<Text> accessibilityControl;

    /**
     * Identifies input methods that are sufficient to fully control the described resource. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityControl-vocabulary).
     *
     * @return {@link Text}
     */
    @Override
    public List<Text> getAccessibilityControlList() {
        return accessibilityControl;
    }

    /**
     * Identifies input methods that are sufficient to fully control the described resource. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityControl-vocabulary).
     *
     * @return {@link Text}
     */
    @Override
    public Text getAccessibilityControl() {
        return getFirst(accessibilityControl);
    }

    /**
     * Identifies input methods that are sufficient to fully control the described resource. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityControl-vocabulary).
     *
     * @param accessibilityControl Text value to set.
     */
    @Override
    public void addAccessibilityControl(Text accessibilityControl) {
        this.accessibilityControl = add(this.accessibilityControl, accessibilityControl);
    }

    @JsonLdFieldTypes({ CreativeWork.class, Text.class })
    private List<Object> citation;

    /**
     * A citation or reference to another creative work, such as another publication, web page, scholarly article, etc.
     *
     * @return {@link CreativeWork} or {@link Text}
     */
    @Override
    public <T> List<T> getCitationList() {
        return (List<T>) citation;
    }

    /**
     * A citation or reference to another creative work, such as another publication, web page, scholarly article, etc.
     *
     * @return {@link CreativeWork} or {@link Text}
     */
    @Override
    public <T> T getCitation() {
        return (T) getFirst(citation);
    }

    /**
     * A citation or reference to another creative work, such as another publication, web page, scholarly article, etc.
     *
     * @param citation CreativeWork value to set.
     */
    @Override
    public void addCitation(CreativeWork citation) {
        this.citation = add(this.citation, citation);
    }
    /**
     * A citation or reference to another creative work, such as another publication, web page, scholarly article, etc.
     *
     * @param citation Text value to set.
     */
    @Override
    public void addCitation(Text citation) {
        this.citation = add(this.citation, citation);
    }

    @JsonLdFieldTypes({ Number.class, Text.class })
    private List<Object> version;

    /**
     * The version of the CreativeWork embodied by a specified resource.
     *
     * @return {@link Number} or {@link Text}
     */
    @Override
    public <T> List<T> getVersionList() {
        return (List<T>) version;
    }

    /**
     * The version of the CreativeWork embodied by a specified resource.
     *
     * @return {@link Number} or {@link Text}
     */
    @Override
    public <T> T getVersion() {
        return (T) getFirst(version);
    }

    /**
     * The version of the CreativeWork embodied by a specified resource.
     *
     * @param version Number value to set.
     */
    @Override
    public void addVersion(Number version) {
        this.version = add(this.version, version);
    }
    /**
     * The version of the CreativeWork embodied by a specified resource.
     *
     * @param version Text value to set.
     */
    @Override
    public void addVersion(Text version) {
        this.version = add(this.version, version);
    }

    @JsonLdFieldTypes({ WebPage.class, URL.class })
    private List<Object> archivedAt;

    /**
     * Indicates a page or other link involved in archival of a [[CreativeWork]]. In the case of [[MediaReview]], the items in a [[MediaReviewItem]] may often become inaccessible, but be archived by archival, journalistic, activist, or law enforcement organizations. In such cases, the referenced page may not directly publish the content.
     *
     * @return {@link WebPage} or {@link URL}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2450">https://github.com/schemaorg/schemaorg/issues/2450</a>
     */
    @Override
    public <T> List<T> getArchivedAtList() {
        return (List<T>) archivedAt;
    }

    /**
     * Indicates a page or other link involved in archival of a [[CreativeWork]]. In the case of [[MediaReview]], the items in a [[MediaReviewItem]] may often become inaccessible, but be archived by archival, journalistic, activist, or law enforcement organizations. In such cases, the referenced page may not directly publish the content.
     *
     * @return {@link WebPage} or {@link URL}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2450">https://github.com/schemaorg/schemaorg/issues/2450</a>
     */
    @Override
    public <T> T getArchivedAt() {
        return (T) getFirst(archivedAt);
    }

    /**
     * Indicates a page or other link involved in archival of a [[CreativeWork]]. In the case of [[MediaReview]], the items in a [[MediaReviewItem]] may often become inaccessible, but be archived by archival, journalistic, activist, or law enforcement organizations. In such cases, the referenced page may not directly publish the content.
     *
     * @param archivedAt WebPage value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2450">https://github.com/schemaorg/schemaorg/issues/2450</a>
     */
    @Override
    public void addArchivedAt(WebPage archivedAt) {
        this.archivedAt = add(this.archivedAt, archivedAt);
    }
    /**
     * Indicates a page or other link involved in archival of a [[CreativeWork]]. In the case of [[MediaReview]], the items in a [[MediaReviewItem]] may often become inaccessible, but be archived by archival, journalistic, activist, or law enforcement organizations. In such cases, the referenced page may not directly publish the content.
     *
     * @param archivedAt URL value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2450">https://github.com/schemaorg/schemaorg/issues/2450</a>
     */
    @Override
    public void addArchivedAt(URL archivedAt) {
        this.archivedAt = add(this.archivedAt, archivedAt);
    }

    @JsonLdFieldTypes({ DefinedTerm.class, Text.class })
    private List<Object> learningResourceType;

    /**
     * The predominant type or kind characterizing the learning resource. For example, 'presentation', 'handout'.
     *
     * @return {@link DefinedTerm} or {@link Text}
     */
    @Override
    public <T> List<T> getLearningResourceTypeList() {
        return (List<T>) learningResourceType;
    }

    /**
     * The predominant type or kind characterizing the learning resource. For example, 'presentation', 'handout'.
     *
     * @return {@link DefinedTerm} or {@link Text}
     */
    @Override
    public <T> T getLearningResourceType() {
        return (T) getFirst(learningResourceType);
    }

    /**
     * The predominant type or kind characterizing the learning resource. For example, 'presentation', 'handout'.
     *
     * @param learningResourceType DefinedTerm value to set.
     */
    @Override
    public void addLearningResourceType(DefinedTerm learningResourceType) {
        this.learningResourceType = add(this.learningResourceType, learningResourceType);
    }
    /**
     * The predominant type or kind characterizing the learning resource. For example, 'presentation', 'handout'.
     *
     * @param learningResourceType Text value to set.
     */
    @Override
    public void addLearningResourceType(Text learningResourceType) {
        this.learningResourceType = add(this.learningResourceType, learningResourceType);
    }

    private List<MediaObject> encoding;

    /**
     * A media object that encodes this CreativeWork. This property is a synonym for associatedMedia.
     *
     * @return {@link MediaObject}
     */
    @Override
    public List<MediaObject> getEncodingList() {
        return encoding;
    }

    /**
     * A media object that encodes this CreativeWork. This property is a synonym for associatedMedia.
     *
     * @return {@link MediaObject}
     */
    @Override
    public MediaObject getEncoding() {
        return getFirst(encoding);
    }

    /**
     * A media object that encodes this CreativeWork. This property is a synonym for associatedMedia.
     *
     * @param encoding MediaObject value to set.
     */
    @Override
    public void addEncoding(MediaObject encoding) {
        this.encoding = add(this.encoding, encoding);
    }

    @JsonLdFieldTypes({ AudioObject.class, MusicRecording.class, Clip.class })
    private List<Object> audio;

    /**
     * An embedded audio object.
     *
     * @return {@link AudioObject} or {@link MusicRecording} or {@link Clip}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2420">https://github.com/schemaorg/schemaorg/issues/2420</a>
     */
    @Override
    public <T> List<T> getAudioList() {
        return (List<T>) audio;
    }

    /**
     * An embedded audio object.
     *
     * @return {@link AudioObject} or {@link MusicRecording} or {@link Clip}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2420">https://github.com/schemaorg/schemaorg/issues/2420</a>
     */
    @Override
    public <T> T getAudio() {
        return (T) getFirst(audio);
    }

    /**
     * An embedded audio object.
     *
     * @param audio AudioObject value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2420">https://github.com/schemaorg/schemaorg/issues/2420</a>
     */
    @Override
    public void addAudio(AudioObject audio) {
        this.audio = add(this.audio, audio);
    }
    /**
     * An embedded audio object.
     *
     * @param audio MusicRecording value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2420">https://github.com/schemaorg/schemaorg/issues/2420</a>
     */
    @Override
    public void addAudio(MusicRecording audio) {
        this.audio = add(this.audio, audio);
    }
    /**
     * An embedded audio object.
     *
     * @param audio Clip value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2420">https://github.com/schemaorg/schemaorg/issues/2420</a>
     */
    @Override
    public void addAudio(Clip audio) {
        this.audio = add(this.audio, audio);
    }

    private List<Thing> mentions;

    /**
     * Indicates that the CreativeWork contains a reference to, but is not necessarily about a concept.
     *
     * @return {@link Thing}
     */
    @Override
    public List<Thing> getMentionsList() {
        return mentions;
    }

    /**
     * Indicates that the CreativeWork contains a reference to, but is not necessarily about a concept.
     *
     * @return {@link Thing}
     */
    @Override
    public Thing getMentions() {
        return getFirst(mentions);
    }

    /**
     * Indicates that the CreativeWork contains a reference to, but is not necessarily about a concept.
     *
     * @param mentions Thing value to set.
     */
    @Override
    public void addMentions(Thing mentions) {
        this.mentions = add(this.mentions, mentions);
    }

    private List<ItemList> accessModeSufficient;

    /**
     * A list of single or combined accessModes that are sufficient to understand all the intellectual content of a resource. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessModeSufficient-vocabulary).
     *
     * @return {@link ItemList}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1100">https://github.com/schemaorg/schemaorg/issues/1100</a>
     */
    @Override
    public List<ItemList> getAccessModeSufficientList() {
        return accessModeSufficient;
    }

    /**
     * A list of single or combined accessModes that are sufficient to understand all the intellectual content of a resource. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessModeSufficient-vocabulary).
     *
     * @return {@link ItemList}
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1100">https://github.com/schemaorg/schemaorg/issues/1100</a>
     */
    @Override
    public ItemList getAccessModeSufficient() {
        return getFirst(accessModeSufficient);
    }

    /**
     * A list of single or combined accessModes that are sufficient to understand all the intellectual content of a resource. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessModeSufficient-vocabulary).
     *
     * @param accessModeSufficient ItemList value to set.
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/1100">https://github.com/schemaorg/schemaorg/issues/1100</a>
     */
    @Override
    public void addAccessModeSufficient(ItemList accessModeSufficient) {
        this.accessModeSufficient = add(this.accessModeSufficient, accessModeSufficient);
    }

    private List<CreativeWork> hasPart;

    /**
     * Indicates an item or CreativeWork that is part of this item, or CreativeWork (in some sense).
     *
     * @return {@link CreativeWork}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex</a>
     */
    @Override
    public List<CreativeWork> getHasPartList() {
        return hasPart;
    }

    /**
     * Indicates an item or CreativeWork that is part of this item, or CreativeWork (in some sense).
     *
     * @return {@link CreativeWork}
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex</a>
     */
    @Override
    public CreativeWork getHasPart() {
        return getFirst(hasPart);
    }

    /**
     * Indicates an item or CreativeWork that is part of this item, or CreativeWork (in some sense).
     *
     * @param hasPart CreativeWork value to set.
     * @see <a href="http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex">http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex</a>
     */
    @Override
    public void addHasPart(CreativeWork hasPart) {
        this.hasPart = add(this.hasPart, hasPart);
    }

    @JsonLdFieldTypes({ URL.class, DateTime.class, Text.class })
    private List<Object> temporalCoverage;

    /**
     * The temporalCoverage of a CreativeWork indicates the period that the content applies to, i.e. that it describes, either as a DateTime or as a textual string indicating a time period in [ISO 8601 time interval format](https://en.wikipedia.org/wiki/ISO_8601#Time_intervals). In
     *       the case of a Dataset it will typically indicate the relevant time period in a precise notation (e.g. for a 2011 census dataset, the year 2011 would be written "2011/2012"). Other forms of content e.g. ScholarlyArticle, Book, TVSeries or TVEpisode may indicate their temporalCoverage in broader terms - textually or via well-known URL.
     *       Written works such as books may sometimes have precise temporal coverage too, e.g. a work set in 1939 - 1945 can be indicated in ISO 8601 interval format format via "1939/1945".
     * 
     * Open-ended date ranges can be written with ".." in place of the end date. For example, "2015-11/.." indicates a range beginning in November 2015 and with no specified final date. This is tentative and might be updated in future when ISO 8601 is officially updated.
     *
     * @return {@link URL} or {@link DateTime} or {@link Text}
     */
    @Override
    public <T> List<T> getTemporalCoverageList() {
        return (List<T>) temporalCoverage;
    }

    /**
     * The temporalCoverage of a CreativeWork indicates the period that the content applies to, i.e. that it describes, either as a DateTime or as a textual string indicating a time period in [ISO 8601 time interval format](https://en.wikipedia.org/wiki/ISO_8601#Time_intervals). In
     *       the case of a Dataset it will typically indicate the relevant time period in a precise notation (e.g. for a 2011 census dataset, the year 2011 would be written "2011/2012"). Other forms of content e.g. ScholarlyArticle, Book, TVSeries or TVEpisode may indicate their temporalCoverage in broader terms - textually or via well-known URL.
     *       Written works such as books may sometimes have precise temporal coverage too, e.g. a work set in 1939 - 1945 can be indicated in ISO 8601 interval format format via "1939/1945".
     * 
     * Open-ended date ranges can be written with ".." in place of the end date. For example, "2015-11/.." indicates a range beginning in November 2015 and with no specified final date. This is tentative and might be updated in future when ISO 8601 is officially updated.
     *
     * @return {@link URL} or {@link DateTime} or {@link Text}
     */
    @Override
    public <T> T getTemporalCoverage() {
        return (T) getFirst(temporalCoverage);
    }

    /**
     * The temporalCoverage of a CreativeWork indicates the period that the content applies to, i.e. that it describes, either as a DateTime or as a textual string indicating a time period in [ISO 8601 time interval format](https://en.wikipedia.org/wiki/ISO_8601#Time_intervals). In
     *       the case of a Dataset it will typically indicate the relevant time period in a precise notation (e.g. for a 2011 census dataset, the year 2011 would be written "2011/2012"). Other forms of content e.g. ScholarlyArticle, Book, TVSeries or TVEpisode may indicate their temporalCoverage in broader terms - textually or via well-known URL.
     *       Written works such as books may sometimes have precise temporal coverage too, e.g. a work set in 1939 - 1945 can be indicated in ISO 8601 interval format format via "1939/1945".
     * 
     * Open-ended date ranges can be written with ".." in place of the end date. For example, "2015-11/.." indicates a range beginning in November 2015 and with no specified final date. This is tentative and might be updated in future when ISO 8601 is officially updated.
     *
     * @param temporalCoverage URL value to set.
     */
    @Override
    public void addTemporalCoverage(URL temporalCoverage) {
        this.temporalCoverage = add(this.temporalCoverage, temporalCoverage);
    }
    /**
     * The temporalCoverage of a CreativeWork indicates the period that the content applies to, i.e. that it describes, either as a DateTime or as a textual string indicating a time period in [ISO 8601 time interval format](https://en.wikipedia.org/wiki/ISO_8601#Time_intervals). In
     *       the case of a Dataset it will typically indicate the relevant time period in a precise notation (e.g. for a 2011 census dataset, the year 2011 would be written "2011/2012"). Other forms of content e.g. ScholarlyArticle, Book, TVSeries or TVEpisode may indicate their temporalCoverage in broader terms - textually or via well-known URL.
     *       Written works such as books may sometimes have precise temporal coverage too, e.g. a work set in 1939 - 1945 can be indicated in ISO 8601 interval format format via "1939/1945".
     * 
     * Open-ended date ranges can be written with ".." in place of the end date. For example, "2015-11/.." indicates a range beginning in November 2015 and with no specified final date. This is tentative and might be updated in future when ISO 8601 is officially updated.
     *
     * @param temporalCoverage DateTime value to set.
     */
    @Override
    public void addTemporalCoverage(DateTime temporalCoverage) {
        this.temporalCoverage = add(this.temporalCoverage, temporalCoverage);
    }
    /**
     * The temporalCoverage of a CreativeWork indicates the period that the content applies to, i.e. that it describes, either as a DateTime or as a textual string indicating a time period in [ISO 8601 time interval format](https://en.wikipedia.org/wiki/ISO_8601#Time_intervals). In
     *       the case of a Dataset it will typically indicate the relevant time period in a precise notation (e.g. for a 2011 census dataset, the year 2011 would be written "2011/2012"). Other forms of content e.g. ScholarlyArticle, Book, TVSeries or TVEpisode may indicate their temporalCoverage in broader terms - textually or via well-known URL.
     *       Written works such as books may sometimes have precise temporal coverage too, e.g. a work set in 1939 - 1945 can be indicated in ISO 8601 interval format format via "1939/1945".
     * 
     * Open-ended date ranges can be written with ".." in place of the end date. For example, "2015-11/.." indicates a range beginning in November 2015 and with no specified final date. This is tentative and might be updated in future when ISO 8601 is officially updated.
     *
     * @param temporalCoverage Text value to set.
     */
    @Override
    public void addTemporalCoverage(Text temporalCoverage) {
        this.temporalCoverage = add(this.temporalCoverage, temporalCoverage);
    }

    @JsonLdFieldTypes({ Organization.class, Person.class })
    private List<Object> contributor;

    /**
     * A secondary contributor to the CreativeWork or Event.
     *
     * @return {@link Organization} or {@link Person}
     */
    @Override
    public <T> List<T> getContributorList() {
        return (List<T>) contributor;
    }

    /**
     * A secondary contributor to the CreativeWork or Event.
     *
     * @return {@link Organization} or {@link Person}
     */
    @Override
    public <T> T getContributor() {
        return (T) getFirst(contributor);
    }

    /**
     * A secondary contributor to the CreativeWork or Event.
     *
     * @param contributor Organization value to set.
     */
    @Override
    public void addContributor(Organization contributor) {
        this.contributor = add(this.contributor, contributor);
    }
    /**
     * A secondary contributor to the CreativeWork or Event.
     *
     * @param contributor Person value to set.
     */
    @Override
    public void addContributor(Person contributor) {
        this.contributor = add(this.contributor, contributor);
    }

    @JsonLdFieldTypes({ Clip.class, VideoObject.class })
    private List<Object> video;

    /**
     * An embedded video object.
     *
     * @return {@link Clip} or {@link VideoObject}
     */
    @Override
    public <T> List<T> getVideoList() {
        return (List<T>) video;
    }

    /**
     * An embedded video object.
     *
     * @return {@link Clip} or {@link VideoObject}
     */
    @Override
    public <T> T getVideo() {
        return (T) getFirst(video);
    }

    /**
     * An embedded video object.
     *
     * @param video Clip value to set.
     */
    @Override
    public void addVideo(Clip video) {
        this.video = add(this.video, video);
    }
    /**
     * An embedded video object.
     *
     * @param video VideoObject value to set.
     */
    @Override
    public void addVideo(VideoObject video) {
        this.video = add(this.video, video);
    }
}
