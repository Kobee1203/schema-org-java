/*
 * This class is auto generated by the schema.org code generator program.
 * https://github.com/Kobee1203/schema-org-java
 * Do not edit the class manually.
 */
package spec.model;

import java.util.List;
import spec.model.ItemListOrderType;
import spec.model.datatype.Text;
import spec.model.datatype.Integer;
import spec.model.ListItem;
import spec.model.Thing;

/**
 * A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
 *
 * @see <a href="https://schema.org/ItemList">https://schema.org/ItemList</a>
 */
public interface ItemList extends Intangible {

    /**
     * Type of ordering (e.g. Ascending, Descending, Unordered).
     *
     * @return {@link ItemListOrderType} or {@link Text}
     */
    <T> List<T> getItemListOrderList();

    /**
     * Type of ordering (e.g. Ascending, Descending, Unordered).
     *
     * @return {@link ItemListOrderType} or {@link Text}
     */
    <T> T getItemListOrder();

    /**
     * Type of ordering (e.g. Ascending, Descending, Unordered).
     *
     * @param itemListOrder ItemListOrderType value to set.
     */
    void addItemListOrder(ItemListOrderType itemListOrder);
    /**
     * Type of ordering (e.g. Ascending, Descending, Unordered).
     *
     * @param itemListOrder Text value to set.
     */
    void addItemListOrder(Text itemListOrder);

    /**
     * The number of items in an ItemList. Note that some descriptions might not fully describe all items in a list (e.g., multi-page pagination); in such cases, the numberOfItems would be for the entire list.
     *
     * @return {@link Integer}
     */
    List<Integer> getNumberOfItemsList();

    /**
     * The number of items in an ItemList. Note that some descriptions might not fully describe all items in a list (e.g., multi-page pagination); in such cases, the numberOfItems would be for the entire list.
     *
     * @return {@link Integer}
     */
    Integer getNumberOfItems();

    /**
     * The number of items in an ItemList. Note that some descriptions might not fully describe all items in a list (e.g., multi-page pagination); in such cases, the numberOfItems would be for the entire list.
     *
     * @param numberOfItems Integer value to set.
     */
    void addNumberOfItems(Integer numberOfItems);

    /**
     * For itemListElement values, you can use simple strings (e.g. "Peter", "Paul", "Mary"), existing entities, or use ListItem.<br/><br/>Text values are best if the elements in the list are plain strings. Existing entities are best for a simple, unordered list of existing things in your data. ListItem is used with ordered lists when you want to provide additional context about the element in that list or when the same item might be in different places in different lists.<br/><br/>Note: The order of elements in your mark-up is not sufficient for indicating the order or elements.  Use ListItem with a 'position' property in such cases.
     *
     * @return {@link ListItem} or {@link Text} or {@link Thing}
     */
    <T> List<T> getItemListElementList();

    /**
     * For itemListElement values, you can use simple strings (e.g. "Peter", "Paul", "Mary"), existing entities, or use ListItem.<br/><br/>Text values are best if the elements in the list are plain strings. Existing entities are best for a simple, unordered list of existing things in your data. ListItem is used with ordered lists when you want to provide additional context about the element in that list or when the same item might be in different places in different lists.<br/><br/>Note: The order of elements in your mark-up is not sufficient for indicating the order or elements.  Use ListItem with a 'position' property in such cases.
     *
     * @return {@link ListItem} or {@link Text} or {@link Thing}
     */
    <T> T getItemListElement();

    /**
     * For itemListElement values, you can use simple strings (e.g. "Peter", "Paul", "Mary"), existing entities, or use ListItem.<br/><br/>Text values are best if the elements in the list are plain strings. Existing entities are best for a simple, unordered list of existing things in your data. ListItem is used with ordered lists when you want to provide additional context about the element in that list or when the same item might be in different places in different lists.<br/><br/>Note: The order of elements in your mark-up is not sufficient for indicating the order or elements.  Use ListItem with a 'position' property in such cases.
     *
     * @param itemListElement ListItem value to set.
     */
    void addItemListElement(ListItem itemListElement);
    /**
     * For itemListElement values, you can use simple strings (e.g. "Peter", "Paul", "Mary"), existing entities, or use ListItem.<br/><br/>Text values are best if the elements in the list are plain strings. Existing entities are best for a simple, unordered list of existing things in your data. ListItem is used with ordered lists when you want to provide additional context about the element in that list or when the same item might be in different places in different lists.<br/><br/>Note: The order of elements in your mark-up is not sufficient for indicating the order or elements.  Use ListItem with a 'position' property in such cases.
     *
     * @param itemListElement Text value to set.
     */
    void addItemListElement(Text itemListElement);
    /**
     * For itemListElement values, you can use simple strings (e.g. "Peter", "Paul", "Mary"), existing entities, or use ListItem.<br/><br/>Text values are best if the elements in the list are plain strings. Existing entities are best for a simple, unordered list of existing things in your data. ListItem is used with ordered lists when you want to provide additional context about the element in that list or when the same item might be in different places in different lists.<br/><br/>Note: The order of elements in your mark-up is not sufficient for indicating the order or elements.  Use ListItem with a 'position' property in such cases.
     *
     * @param itemListElement Thing value to set.
     */
    void addItemListElement(Thing itemListElement);
}
