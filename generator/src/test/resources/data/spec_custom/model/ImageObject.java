/*
 * This class is auto generated by the schema.org code generator program.
 * https://github.com/Kobee1203/schema-org-java
 * Do not edit the class manually.
 */
package spec_custom.model;

import java.util.List;
import spec_custom.model.MediaObject;
import spec_custom.model.datatype.Text;
import spec_custom.model.ImageObject;
import spec_custom.model.PropertyValue;
import spec_custom.model.datatype.Boolean;

/**
 * An image file.
 *
 * @see <a href="https://schema.org/ImageObject">https://schema.org/ImageObject</a>
 */
public interface ImageObject extends MediaObject {

    /**
     * The caption for this object. For downloadable machine formats (closed caption, subtitles etc.) use MediaObject and indicate the [[encodingFormat]].
     *
     * @return {@link MediaObject} or {@link Text}
     */
    <T> List<T> getCaptionList();

    /**
     * The caption for this object. For downloadable machine formats (closed caption, subtitles etc.) use MediaObject and indicate the [[encodingFormat]].
     *
     * @return {@link MediaObject} or {@link Text}
     */
    <T> T getCaption();

    /**
     * The caption for this object. For downloadable machine formats (closed caption, subtitles etc.) use MediaObject and indicate the [[encodingFormat]].
     *
     * @param caption MediaObject value to set.
     */
    void addCaption(MediaObject caption);
    /**
     * The caption for this object. For downloadable machine formats (closed caption, subtitles etc.) use MediaObject and indicate the [[encodingFormat]].
     *
     * @param caption Text value to set.
     */
    void addCaption(Text caption);

    /**
     * Thumbnail image for an image or video.
     *
     * @return {@link ImageObject}
     */
    List<ImageObject> getThumbnailList();

    /**
     * Thumbnail image for an image or video.
     *
     * @return {@link ImageObject}
     */
    ImageObject getThumbnail();

    /**
     * Thumbnail image for an image or video.
     *
     * @param thumbnail ImageObject value to set.
     */
    void addThumbnail(ImageObject thumbnail);

    /**
     * exif data for this object.
     *
     * @return {@link Text} or {@link PropertyValue}
     */
    <T> List<T> getExifDataList();

    /**
     * exif data for this object.
     *
     * @return {@link Text} or {@link PropertyValue}
     */
    <T> T getExifData();

    /**
     * exif data for this object.
     *
     * @param exifData Text value to set.
     */
    void addExifData(Text exifData);
    /**
     * exif data for this object.
     *
     * @param exifData PropertyValue value to set.
     */
    void addExifData(PropertyValue exifData);

    /**
     * Represents textual captioning from a [[MediaObject]], e.g. text of a 'meme'.
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2450">https://github.com/schemaorg/schemaorg/issues/2450</a>
     */
    List<Text> getEmbeddedTextCaptionList();

    /**
     * Represents textual captioning from a [[MediaObject]], e.g. text of a 'meme'.
     *
     * @return {@link Text}
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2450">https://github.com/schemaorg/schemaorg/issues/2450</a>
     */
    Text getEmbeddedTextCaption();

    /**
     * Represents textual captioning from a [[MediaObject]], e.g. text of a 'meme'.
     *
     * @param embeddedTextCaption Text value to set.
     * @see <a href="https://pending.schema.org">https://pending.schema.org</a>
     * @see <a href="https://github.com/schemaorg/schemaorg/issues/2450">https://github.com/schemaorg/schemaorg/issues/2450</a>
     */
    void addEmbeddedTextCaption(Text embeddedTextCaption);

    /**
     * Indicates whether this image is representative of the content of the page.
     *
     * @return {@link Boolean}
     */
    List<Boolean> getRepresentativeOfPageList();

    /**
     * Indicates whether this image is representative of the content of the page.
     *
     * @return {@link Boolean}
     */
    Boolean getRepresentativeOfPage();

    /**
     * Indicates whether this image is representative of the content of the page.
     *
     * @param representativeOfPage Boolean value to set.
     */
    void addRepresentativeOfPage(Boolean representativeOfPage);
}
