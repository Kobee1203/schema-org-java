/*
 * This class is auto generated by the schema.org code generator program.
 * https://github.com/Kobee1203/schema-org-java
 * Do not edit the class manually.
 */
package spec_custom.model;

import java.util.List;
import spec_custom.model.datatype.URL;
import spec_custom.model.ImageObject;
import spec_custom.model.datatype.Text;
import spec_custom.model.CreativeWork;
import spec_custom.model.DataFeed;
import spec_custom.model.SoftwareApplication;

/**
 * A software application.
 *
 * @see <a href="https://schema.org/SoftwareApplication">https://schema.org/SoftwareApplication</a>
 */
public interface SoftwareApplication extends CreativeWork {

    /**
     * A link to a screenshot image of the app.
     *
     * @return {@link URL} or {@link ImageObject}
     */
    <T> List<T> getScreenshotList();

    /**
     * A link to a screenshot image of the app.
     *
     * @return {@link URL} or {@link ImageObject}
     */
    <T> T getScreenshot();

    /**
     * A link to a screenshot image of the app.
     *
     * @param screenshot URL value to set.
     */
    void addScreenshot(URL screenshot);
    /**
     * A link to a screenshot image of the app.
     *
     * @param screenshot ImageObject value to set.
     */
    void addScreenshot(ImageObject screenshot);

    /**
     * Permission(s) required to run the app (for example, a mobile app may require full internet access or may run only on wifi).
     *
     * @return {@link Text}
     */
    List<Text> getPermissionsList();

    /**
     * Permission(s) required to run the app (for example, a mobile app may require full internet access or may run only on wifi).
     *
     * @return {@link Text}
     */
    Text getPermissions();

    /**
     * Permission(s) required to run the app (for example, a mobile app may require full internet access or may run only on wifi).
     *
     * @param permissions Text value to set.
     */
    void addPermissions(Text permissions);

    /**
     * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (examples: DirectX, Java or .NET runtime).
     *
     * @return {@link Text} or {@link URL}
     */
    <T> List<T> getRequirementsList();

    /**
     * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (examples: DirectX, Java or .NET runtime).
     *
     * @return {@link Text} or {@link URL}
     */
    <T> T getRequirements();

    /**
     * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (examples: DirectX, Java or .NET runtime).
     *
     * @param requirements Text value to set.
     */
    void addRequirements(Text requirements);
    /**
     * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (examples: DirectX, Java or .NET runtime).
     *
     * @param requirements URL value to set.
     */
    void addRequirements(URL requirements);

    /**
     * Storage requirements (free space required).
     *
     * @return {@link URL} or {@link Text}
     */
    <T> List<T> getStorageRequirementsList();

    /**
     * Storage requirements (free space required).
     *
     * @return {@link URL} or {@link Text}
     */
    <T> T getStorageRequirements();

    /**
     * Storage requirements (free space required).
     *
     * @param storageRequirements URL value to set.
     */
    void addStorageRequirements(URL storageRequirements);
    /**
     * Storage requirements (free space required).
     *
     * @param storageRequirements Text value to set.
     */
    void addStorageRequirements(Text storageRequirements);

    /**
     * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (examples: DirectX, Java or .NET runtime).
     *
     * @return {@link Text} or {@link URL}
     */
    <T> List<T> getSoftwareRequirementsList();

    /**
     * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (examples: DirectX, Java or .NET runtime).
     *
     * @return {@link Text} or {@link URL}
     */
    <T> T getSoftwareRequirements();

    /**
     * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (examples: DirectX, Java or .NET runtime).
     *
     * @param softwareRequirements Text value to set.
     */
    void addSoftwareRequirements(Text softwareRequirements);
    /**
     * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (examples: DirectX, Java or .NET runtime).
     *
     * @param softwareRequirements URL value to set.
     */
    void addSoftwareRequirements(URL softwareRequirements);

    /**
     * Type of software application, e.g. 'Game, Multimedia'.
     *
     * @return {@link URL} or {@link Text}
     */
    <T> List<T> getApplicationCategoryList();

    /**
     * Type of software application, e.g. 'Game, Multimedia'.
     *
     * @return {@link URL} or {@link Text}
     */
    <T> T getApplicationCategory();

    /**
     * Type of software application, e.g. 'Game, Multimedia'.
     *
     * @param applicationCategory URL value to set.
     */
    void addApplicationCategory(URL applicationCategory);
    /**
     * Type of software application, e.g. 'Game, Multimedia'.
     *
     * @param applicationCategory Text value to set.
     */
    void addApplicationCategory(Text applicationCategory);

    /**
     * Device required to run the application. Used in cases where a specific make/model is required to run the application.
     *
     * @return {@link Text}
     */
    List<Text> getDeviceList();

    /**
     * Device required to run the application. Used in cases where a specific make/model is required to run the application.
     *
     * @return {@link Text}
     */
    Text getDevice();

    /**
     * Device required to run the application. Used in cases where a specific make/model is required to run the application.
     *
     * @param device Text value to set.
     */
    void addDevice(Text device);

    /**
     * Size of the application / package (e.g. 18MB). In the absence of a unit (MB, KB etc.), KB will be assumed.
     *
     * @return {@link Text}
     */
    List<Text> getFileSizeList();

    /**
     * Size of the application / package (e.g. 18MB). In the absence of a unit (MB, KB etc.), KB will be assumed.
     *
     * @return {@link Text}
     */
    Text getFileSize();

    /**
     * Size of the application / package (e.g. 18MB). In the absence of a unit (MB, KB etc.), KB will be assumed.
     *
     * @param fileSize Text value to set.
     */
    void addFileSize(Text fileSize);

    /**
     * Countries for which the application is not supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
     *
     * @return {@link Text}
     */
    List<Text> getCountriesNotSupportedList();

    /**
     * Countries for which the application is not supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
     *
     * @return {@link Text}
     */
    Text getCountriesNotSupported();

    /**
     * Countries for which the application is not supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
     *
     * @param countriesNotSupported Text value to set.
     */
    void addCountriesNotSupported(Text countriesNotSupported);

    /**
     * Operating systems supported (Windows 7, OS X 10.6, Android 1.6).
     *
     * @return {@link Text}
     */
    List<Text> getOperatingSystemList();

    /**
     * Operating systems supported (Windows 7, OS X 10.6, Android 1.6).
     *
     * @return {@link Text}
     */
    Text getOperatingSystem();

    /**
     * Operating systems supported (Windows 7, OS X 10.6, Android 1.6).
     *
     * @param operatingSystem Text value to set.
     */
    void addOperatingSystem(Text operatingSystem);

    /**
     * Features or modules provided by this application (and possibly required by other applications).
     *
     * @return {@link URL} or {@link Text}
     */
    <T> List<T> getFeatureListList();

    /**
     * Features or modules provided by this application (and possibly required by other applications).
     *
     * @return {@link URL} or {@link Text}
     */
    <T> T getFeatureList();

    /**
     * Features or modules provided by this application (and possibly required by other applications).
     *
     * @param featureList URL value to set.
     */
    void addFeatureList(URL featureList);
    /**
     * Features or modules provided by this application (and possibly required by other applications).
     *
     * @param featureList Text value to set.
     */
    void addFeatureList(Text featureList);

    /**
     * The name of the application suite to which the application belongs (e.g. Excel belongs to Office).
     *
     * @return {@link Text}
     */
    List<Text> getApplicationSuiteList();

    /**
     * The name of the application suite to which the application belongs (e.g. Excel belongs to Office).
     *
     * @return {@link Text}
     */
    Text getApplicationSuite();

    /**
     * The name of the application suite to which the application belongs (e.g. Excel belongs to Office).
     *
     * @param applicationSuite Text value to set.
     */
    void addApplicationSuite(Text applicationSuite);

    /**
     * Subcategory of the application, e.g. 'Arcade Game'.
     *
     * @return {@link URL} or {@link Text}
     */
    <T> List<T> getApplicationSubCategoryList();

    /**
     * Subcategory of the application, e.g. 'Arcade Game'.
     *
     * @return {@link URL} or {@link Text}
     */
    <T> T getApplicationSubCategory();

    /**
     * Subcategory of the application, e.g. 'Arcade Game'.
     *
     * @param applicationSubCategory URL value to set.
     */
    void addApplicationSubCategory(URL applicationSubCategory);
    /**
     * Subcategory of the application, e.g. 'Arcade Game'.
     *
     * @param applicationSubCategory Text value to set.
     */
    void addApplicationSubCategory(Text applicationSubCategory);

    /**
     * Description of what changed in this version.
     *
     * @return {@link Text} or {@link URL}
     */
    <T> List<T> getReleaseNotesList();

    /**
     * Description of what changed in this version.
     *
     * @return {@link Text} or {@link URL}
     */
    <T> T getReleaseNotes();

    /**
     * Description of what changed in this version.
     *
     * @param releaseNotes Text value to set.
     */
    void addReleaseNotes(Text releaseNotes);
    /**
     * Description of what changed in this version.
     *
     * @param releaseNotes URL value to set.
     */
    void addReleaseNotes(URL releaseNotes);

    /**
     * Software application help.
     *
     * @return {@link CreativeWork}
     */
    List<CreativeWork> getSoftwareHelpList();

    /**
     * Software application help.
     *
     * @return {@link CreativeWork}
     */
    CreativeWork getSoftwareHelp();

    /**
     * Software application help.
     *
     * @param softwareHelp CreativeWork value to set.
     */
    void addSoftwareHelp(CreativeWork softwareHelp);

    /**
     * Supporting data for a SoftwareApplication.
     *
     * @return {@link DataFeed}
     */
    List<DataFeed> getSupportingDataList();

    /**
     * Supporting data for a SoftwareApplication.
     *
     * @return {@link DataFeed}
     */
    DataFeed getSupportingData();

    /**
     * Supporting data for a SoftwareApplication.
     *
     * @param supportingData DataFeed value to set.
     */
    void addSupportingData(DataFeed supportingData);

    /**
     * Countries for which the application is supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
     *
     * @return {@link Text}
     */
    List<Text> getCountriesSupportedList();

    /**
     * Countries for which the application is supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
     *
     * @return {@link Text}
     */
    Text getCountriesSupported();

    /**
     * Countries for which the application is supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
     *
     * @param countriesSupported Text value to set.
     */
    void addCountriesSupported(Text countriesSupported);

    /**
     * Device required to run the application. Used in cases where a specific make/model is required to run the application.
     *
     * @return {@link Text}
     */
    List<Text> getAvailableOnDeviceList();

    /**
     * Device required to run the application. Used in cases where a specific make/model is required to run the application.
     *
     * @return {@link Text}
     */
    Text getAvailableOnDevice();

    /**
     * Device required to run the application. Used in cases where a specific make/model is required to run the application.
     *
     * @param availableOnDevice Text value to set.
     */
    void addAvailableOnDevice(Text availableOnDevice);

    /**
     * Version of the software instance.
     *
     * @return {@link Text}
     */
    List<Text> getSoftwareVersionList();

    /**
     * Version of the software instance.
     *
     * @return {@link Text}
     */
    Text getSoftwareVersion();

    /**
     * Version of the software instance.
     *
     * @param softwareVersion Text value to set.
     */
    void addSoftwareVersion(Text softwareVersion);

    /**
     * URL at which the app may be installed, if different from the URL of the item.
     *
     * @return {@link URL}
     */
    List<URL> getInstallUrlList();

    /**
     * URL at which the app may be installed, if different from the URL of the item.
     *
     * @return {@link URL}
     */
    URL getInstallUrl();

    /**
     * URL at which the app may be installed, if different from the URL of the item.
     *
     * @param installUrl URL value to set.
     */
    void addInstallUrl(URL installUrl);

    /**
     * Minimum memory requirements.
     *
     * @return {@link Text} or {@link URL}
     */
    <T> List<T> getMemoryRequirementsList();

    /**
     * Minimum memory requirements.
     *
     * @return {@link Text} or {@link URL}
     */
    <T> T getMemoryRequirements();

    /**
     * Minimum memory requirements.
     *
     * @param memoryRequirements Text value to set.
     */
    void addMemoryRequirements(Text memoryRequirements);
    /**
     * Minimum memory requirements.
     *
     * @param memoryRequirements URL value to set.
     */
    void addMemoryRequirements(URL memoryRequirements);

    /**
     * Processor architecture required to run the application (e.g. IA64).
     *
     * @return {@link Text}
     */
    List<Text> getProcessorRequirementsList();

    /**
     * Processor architecture required to run the application (e.g. IA64).
     *
     * @return {@link Text}
     */
    Text getProcessorRequirements();

    /**
     * Processor architecture required to run the application (e.g. IA64).
     *
     * @param processorRequirements Text value to set.
     */
    void addProcessorRequirements(Text processorRequirements);

    /**
     * Additional content for a software application.
     *
     * @return {@link SoftwareApplication}
     */
    List<SoftwareApplication> getSoftwareAddOnList();

    /**
     * Additional content for a software application.
     *
     * @return {@link SoftwareApplication}
     */
    SoftwareApplication getSoftwareAddOn();

    /**
     * Additional content for a software application.
     *
     * @param softwareAddOn SoftwareApplication value to set.
     */
    void addSoftwareAddOn(SoftwareApplication softwareAddOn);

    /**
     * If the file can be downloaded, URL to download the binary.
     *
     * @return {@link URL}
     */
    List<URL> getDownloadUrlList();

    /**
     * If the file can be downloaded, URL to download the binary.
     *
     * @return {@link URL}
     */
    URL getDownloadUrl();

    /**
     * If the file can be downloaded, URL to download the binary.
     *
     * @param downloadUrl URL value to set.
     */
    void addDownloadUrl(URL downloadUrl);
}
