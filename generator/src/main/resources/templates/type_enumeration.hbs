{{!-- @formatter:off --}}
{{> templates/fragment/file_header}}
package {{this.usedPackage}};

{{#each this.imports}}
import {{this}};
{{/each}}

{{#with this.type}}
{{> templates/fragment/javadoc_class}}
@JsonLdTypeName("{{this.typeId}}")
{{#and this.enumerationType this.subTypes}}
@JsonLdSubTypes({ {{#each this.subTypes}}"{{this.name}}Enum"{{#not @last}}, {{/not}}{{/each}} })
{{/and}}
public enum {{this.name}}Enum implements {{this.name}} {
{{#each this.enumerationMembers}}
    {{capitalizeWithUnderscore this}}("{{this}}"){{#not @last}},{{else}}{{/not}}
{{/each}}
    ;

    private final String enumValue;

    {{this.name}}Enum(String enumValue) {
        this.enumValue = enumValue;
    }

    public static {{this.name}}Enum from(String value) {
        for ({{this.name}}Enum item : values()) {
            if (item.enumValue.equals(value)) {
                return item;
            }
        }
        return null;
    }

    @Override
    public String toString() {
        return enumValue;
    }

{{#each this.baseParent.methods}}
    /** {@inheritDoc} <br/><b>DO NOT USE THIS METHOD</b> */
    @Override
    {{this.modifiers}} {{&this.returnType}} {{this.name}}({{this.parametersAsString}}){{this.exceptionsAsString}} {
    {{#if this.voidReturnType}}{{!--
    --}}    throw new java.lang.IllegalAccessError("Method '{{this.name}}' not allowed for enum {{../this.name}}Enum");{{!--
    --}}{{else}}{{!--
    --}}    return null;{{!--
    --}}{{/if}}
    }

{{/each}}

{{#each this.allProperties}}
{{#with this.accessor}}
    /** {@inheritDoc} <br/><b>DO NOT USE THIS METHOD</b> */
    @Override
    public {{&this.returnFieldType}} {{this.methodName}}() {
        return null;
    }
{{/with}}

{{#each this.mutators}}
    /** {@inheritDoc} <br/><b>DO NOT USE THIS METHOD</b> */
    @Override
    public void {{this.methodName}}({{this.paramType}} {{../this.field.fieldName}}) {
        throw new java.lang.IllegalAccessError("Unable to set property '{{this.name}}': method not allowed for enum {{../this.name}}Enum");
    }
{{/each}}
{{/each}}
}
{{/with}}