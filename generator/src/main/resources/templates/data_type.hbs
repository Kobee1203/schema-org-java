{{!-- @formatter:off --}}
{{> templates/fragment/file_header}}
package {{this.usedPackage}};

{{#each this.imports}}
import {{this}};
{{/each}}

{{#with this.type}}
{{> templates/fragment/javadoc_class}}
@JsonLdTypeName("{{this.typeId}}")
public class {{this.name}}{{#if this.parents}} extends {{#each this.parents}}{{this.name}}{{#eq this.name "DataType"}}<{{../this.javaType}}>{{/eq}}{{#not @last}}, {{/not}}{{/each}}{{/if}} {

    {{this.name}}({{this.javaType}} value) {
        super(value{{#if this.stringifiable}}.toString(){{/if}});
    }

    public static {{this.name}} of({{this.javaType}} value) {
        return new {{this.name}}(value);
    }

{{#each this.allProperties}}

    private {{this.field.fieldType}} {{this.field.fieldName}};

{{#with this.accessor}}
    {{> templates/fragment/javadoc_getter}}
    public {{&this.returnFieldType}} {{this.firstGetterMethod}}() {
        return {{#if this.cast}}{{&this.cast}} {{/if}}{{../this.field.fieldName}};
    }
{{/with}}

{{#each this.mutators}}
    {{> templates/fragment/javadoc_setter}}
    public void {{this.setterMethod}}({{&this.paramType}} {{../this.field.fieldName}}) {
        this.{{../this.field.fieldName}} = {{this.paramValue}};
    }
{{/each}}
{{/each}}
}
{{/with}}