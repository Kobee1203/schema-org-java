{{!-- @formatter:off --}}
{{> templates/fragment/file_header}}
package {{this.usedPackage}};

{{#each this.imports}}
import {{this}};
{{/each}}

{{#with this.type}}
{{> templates/fragment/javadoc_class}}
@JsonLdTypeName("{{this.typeId}}")
public class {{this.name}}Impl{{#if this.baseParent}} extends {{this.baseParent.implementationClassName}}{{/if}} implements {{this.name}} {
{{#each this.allProperties}}

    private {{#gt this.types.length 1}}Object{{else}}{{this.types.[0].name}}{{/gt}} {{this.fieldName}};

    {{> templates/fragment/javadoc_getter}}
    @Override
    public {{&this.returnFieldType}} get{{capitalizeFirst this.name}}() {
        return {{#gt this.types.length 1}}(T) {{/gt}}{{this.fieldName}};
    }

    {{> templates/fragment/javadoc_setter}}
    @Override
    public void set{{capitalizeFirst this.name}}({{&this.paramFieldType}} {{this.fieldName}}) {
{{#gt this.types.length 1}}
        if({{#each this.types}}!({{../this.fieldName}} instanceof {{this.name}}){{#not @last}} && {{/not}}{{/each}}) {
            throw new java.lang.IllegalArgumentException("Invalid value for property '{{this.name}}': " + {{this.fieldName}});
        }
{{/gt}}
        this.{{this.fieldName}} = {{this.fieldName}};
    }
{{/each}}
}
{{/with}}