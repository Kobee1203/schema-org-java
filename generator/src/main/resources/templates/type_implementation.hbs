{{!-- @formatter:off --}}
{{> templates/fragment/file_header}}
package {{this.usedPackage}};

{{#each this.imports}}
import {{this}};
{{/each}}

{{#with this.type}}
{{> templates/fragment/javadoc_class}}
@JsonLdTypeName("{{this.typeId}}")
public class {{this.name}}Impl{{#if this.baseParent}} extends {{this.baseParent.implementationClassName}}{{/if}} implements {{this.name}} {
{{#each this.allProperties}}

    {{#if this.types.[1]}}
    @JsonLdFieldTypes({ {{#each this.types}}{{this.name}}.class{{#not @last}}, {{/not}}{{/each}} })
    {{/if}}
    private {{&this.field.fieldTypeAsList}} {{this.field.fieldName}};

{{#with this.accessor}}
    {{> templates/fragment/javadoc_getter}}
    @Override
    public {{&this.returnFieldTypeAsList}} {{this.getterMethod}}() {
        return {{#if this.castAsList}}{{&this.castAsList}} {{/if}}{{../this.field.fieldName}};
    }

    {{> templates/fragment/javadoc_getter}}
    @Override
    public {{&this.returnFieldType}} {{this.firstGetterMethod}}() {
        return {{#if this.cast}}{{&this.cast}} {{/if}}getFirst({{../this.field.fieldName}});
    }
{{/with}}

{{#each this.mutators}}
    {{> templates/fragment/javadoc_setter}}
    @Override
    public void {{this.addMethod}}({{this.paramType}} {{../this.field.fieldName}}) {
        this.{{../this.field.fieldName}} = add(this.{{../this.field.fieldName}}, {{this.paramValue}});
    }
{{/each}}
{{/each}}
}
{{/with}}